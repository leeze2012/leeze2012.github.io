<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>js实现高精度计算</title>
    <url>/post/26f63a55.html</url>
    <content><![CDATA[<h4 id="js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题"><a href="#js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题" class="headerlink" title="js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题"></a>js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题</h4><p>   下载地址：<a href="/download/js-big-decimal.min.js">js-big-decimal.min.js</a></p>
<a id="more"></a>

<p>   使用方法：</p>
<ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/js-big-decimal.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<br>

<h5 id="加法："><a href="#加法：" class="headerlink" title="加法："></a>加法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.059"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"7.559595"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> MathContext<span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="减法："><a href="#减法：" class="headerlink" title="减法："></a>减法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.123123213120"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.55555555"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="乘法："><a href="#乘法：" class="headerlink" title="乘法："></a>乘法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.21312312312"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="除法："><a href="#除法：" class="headerlink" title="除法："></a>除法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.4123123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1231231232"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> def<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Decimal</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-table 显示行号</title>
    <url>/post/644b0626.html</url>
    <content><![CDATA[<h4 id="动态生成行号"><a href="#动态生成行号" class="headerlink" title="动态生成行号"></a>动态生成行号</h4><p>思想：借助bootstrap-table 本身的<code>index</code>属性和<code>options</code>的对象， 巧妙的的通过<code>formatter</code> 实现</p>
<a id="more"></a>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>field<span class="token operator">:</span> <span class="token string">"Number"</span><span class="token punctuation">,</span>title<span class="token operator">:</span> <span class="token string">"序号"</span><span class="token punctuation">,</span>halign<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>align<span class="token operator">:</span><span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">formatter</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> options <span class="token operator">=</span> $table<span class="token punctuation">.</span><span class="token function">bootstrapTable</span><span class="token punctuation">(</span><span class="token string">"getOptions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>pageNumber<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>BootStrap</category>
        <category>table</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse安装SVN插件的几种方式</title>
    <url>/post/ddb18259.html</url>
    <content><![CDATA[<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><h4 id="方式一：通过Eclipse-Marketplace在线安装"><a href="#方式一：通过Eclipse-Marketplace在线安装" class="headerlink" title="方式一：通过Eclipse Marketplace在线安装"></a><font color="red">方式一：通过Eclipse Marketplace在线安装</font></h4><p>  Help–&gt;Eclipse Marketplace，搜索svn</p>
  <a id="more"></a>


  <img data-src="/post/ddb18259/em_svn_1.png" class="" title="第一步">

  <img data-src="/post/ddb18259/em_svn_2.png" class="" title="第二步">

<p>  点击Install开始安装<br>  <img data-src="/post/ddb18259/em_svn_3.png" class="" title="第三步"><br>  一步一步往下点，然后接受协议，安装完成后重启eclipse即可生效。</p>
<h4 id="方式二：通过Install-New-Software在线安装"><a href="#方式二：通过Install-New-Software在线安装" class="headerlink" title="方式二：通过Install New Software在线安装"></a><font color="red">方式二：通过Install New Software在线安装</font></h4><p>  Help -&gt; Install New Software</p>
<p>  点击add按钮，在弹出窗口中，输入name(自己为变量命的名)和插件的URL，然后点击add</p>
<p>  SVN插件与Subversion版本的对应关系如下：</p>
<p>  <a href="http://subclipse.tigris.org/update_1.6.x/">http://subclipse.tigris.org/update_1.6.x/</a> （Subversion 1.6.x）</p>
<p>  <a href="http://subclipse.tigris.org/update_1.8.x/">http://subclipse.tigris.org/update_1.8.x/</a> （Subversion 1.7.x）</p>
<p>  <a href="http://subclipse.tigris.org/update_1.10.x/">http://subclipse.tigris.org/update_1.10.x/</a> （Subversion 1.8.x）</p>
<p>  <a href="https://dl.bintray.com/subclipse/releases/subclipse/4.2.x/">https://dl.bintray.com/subclipse/releases/subclipse/4.2.x/</a> （Subversion 1.9.x）</p>
  <img data-src="/post/ddb18259/em_svn_4.png" class="" title="第四步">

<p>  全部勾选，然后点击Next</p>
  <img data-src="/post/ddb18259/em_svn_5.png" class="" title="第五步">

<p>  一步一步往下点，然后接受协议，安装完成后重启eclipse即可生效。</p>
<h4 id="方式三：通过下载插件，离线安装"><a href="#方式三：通过下载插件，离线安装" class="headerlink" title="方式三：通过下载插件，离线安装"></a><font color="red">方式三：通过下载插件，离线安装</font></h4><p>   1、下载需要的插件包，<a href="https://github.com/subclipse/subclipse/wiki">https://github.com/subclipse/subclipse/wiki</a></p>
   <img data-src="/post/ddb18259/em_svn_6.png" class="" title="第一步">

<p>   这里有最新版的插件下载地址，也有旧版本的插件下载地址，根据自己的需要选择下载。</p>
   <img data-src="/post/ddb18259/em_svn_7.png" class="" title="第二步">

<p>   下载的包里会有”plugins”和”features”两个文件夹</p>
   <img data-src="/post/ddb18259/em_svn_8.png" class="" title="第三步">

<p>   2、找到eclipse目录下”plugins”和”features”文件夹，将下载好的的svn插件对应名称文件夹下的内容复制到eclipse的同名文件夹中</p>
<p>   3、重启eclipse即可生效</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 编辑器日常使用语法记录</title>
    <url>/post/9c39465b.html</url>
    <content><![CDATA[<h4 id="段首缩进"><a href="#段首缩进" class="headerlink" title="段首缩进"></a>段首缩进</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面用菜根谭中一段做例<br>  好丑心太明，则物不契；贤愚心太明，则人不亲。士君子须是内精明而外浑厚，使好丑两得其平，贤愚共受其益，才是生成的德量。</p>
<a id="more"></a>

<h4 id="文本局中"><a href="#文本局中" class="headerlink" title="文本局中"></a>文本局中</h4><blockquote class="blockquote-center">
<p>夜宿山寺<br>唐 · 李白<br>危楼高百尺，手可摘星辰。<br>不敢高声语，恐惊天上人。</p>

</blockquote>

<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/post/1.jpg<span class="token punctuation">)</span>

<span class="token punctuation">{</span>% asset_img jkp.jpeg 相对路径示例图 %<span class="token punctuation">}</span>  推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img data-src="/post/9c39465b/child01.jpg" alt="小女孩"></p>
<img data-src="/post/9c39465b/child01.jpg" class="" title="小女孩">

<h4 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>escape</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- more --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>escape</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ol>
  <li>文字链接</li>

  <pre class="line-numbers language-none"><code class="language-none">[github](www.github.com)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li>网址链接</li>

  <pre class="line-numbers language-none"><code class="language-none">&lt;www.Google.hk&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>




<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><pre class="line-numbers language-none"><code class="language-none">| 姓名 | 性别 | 电话 |
| :--- | :----: | ----: |
| 张三 | 男 | 123456789123 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="center">性别</th>
<th align="right">电话</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="center">男</td>
<td align="right">123456789123</td>
</tr>
</tbody></table>
<h4 id="图片墙"><a href="#图片墙" class="headerlink" title="图片墙"></a>图片墙</h4><pre class="line-numbers language-none"><code class="language-none">{% grouppicture [group]-[layout] %}{% endgrouppicture %}
{% gp [group]-[layout] %}{% endgp %}

[group]  : 要在组中添加的图片总数。
[layout] : 要显示的组下的默认图片。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-none"><code class="language-none">{% gp 4-4 %}
  ![](/photos/images/1.jpg)
  ![](/photos/images/2.jpg)
  ![](/photos/images/3.jpg)
  ![](/photos/images/4.jpg)
{% endgp %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/photos/images/1.jpg"></div><div class="group-picture-column"><img data-src="/photos/images/2.jpg"></div><div class="group-picture-column"><img data-src="/photos/images/3.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="/photos/images/10.jpg"></div></div></div>


<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><pre class="line-numbers language-none"><code class="language-none">{% button #, 开始 %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a class="btn" href="#">开始</a>

<pre class="line-numbers language-none"><code class="language-none">{% btn #, Text %} {% btn #, 取消,, Title %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a class="btn" href="#">Text</a> <a class="btn" href="#" title="Title">取消</a>


<pre class="line-numbers language-none"><code class="language-none">{% button url, text, icon [class], [title] %}
&lt;!-- 标签别名 --&gt;
{% btn url, text, icon [class], [title] %}

url     : 绝对或相对URL
text    : 按钮文字，如果未指定图标则为必须
icon    : FontAwesome图标名称（开头没有'fa-'）。如果未指定文本，则为必需
[class] : FontAwesome类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。
[title] : 鼠标悬停时的工具提示，可选参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用：</p>
<p>最好添加<code>&lt;div&gt;标签</code>，测试时没加div，下面显示不完全，加上非常美观。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;{% btn https://www.zhyong.cn ,首页,home fa-2x,这是YouForever的首页%}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示：</p>
<div><a class="btn" href="https://blog.xiaosige.com/" title="这是leeze的首页"><i class="fa fa-home fa-fw"></i>首页</a></div>


<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><pre class="line-numbers language-none"><code class="language-none">{% label [class]@Text %}

[class] : default | primary | success | info | warning | danger.
          '@Text' 可以指定是否有空格
          例如。 'success @text'类似于'success @ text'。
          如果未指定，则将选择默认类。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Lorem {% label @ipsum %} {% label primary@dolor sit %} amet, consectetur {% label success@adipiscing elit, %} sed {% label info@do eiusmod %} tempor incididunt ut labore et dolore magna aliqua.

Ut enim *{% label warning @ad %}* minim veniam, quis **{% label danger@nostrud %}** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate ~~{% label default @velit %}~~ &lt;mark&gt;esse&lt;/mark&gt; cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Lorem <mark class="label ">ipsum</mark> <mark class="label primary">dolor sit</mark> amet, consectetur <mark class="label success">adipiscing elit,</mark> sed <mark class="label info">do eiusmod</mark> tempor incididunt ut labore et dolore magna aliqua.</p>
<p>Ut enim <em><mark class="label warning">ad</mark></em> minim veniam, quis <strong><mark class="label danger">nostrud</mark></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
<p>Duis aute irure dolor in reprehenderit in voluptate <del><mark class="label default">velit</mark></del> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><pre class="line-numbers language-none"><code class="language-none">{% note [class] [no-icon] %}
任何内容（支持内联标签）
{% endnote %}

[class]   : default | primary | success | info | warning | danger.
[no-icon] : 禁用备注中的图标

所有参数都是可选的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">{% note %}
无任何样式
{% endnote %}

{% note success %}
成功的笔记
{% endnote %}

{% note primary %}
#### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div class="note primary"><h5 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<h4 id="pdf-文件"><a href="#pdf-文件" class="headerlink" title="pdf 文件"></a>pdf 文件</h4><p>1,第一方法</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" width="830" height="800" scroll="no"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2,第二方法</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;embed src="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" width="840" height="800"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这两种方法效果是一样的，但是不够完美，pdf 文件不能随窗口大小变化，后读发现方法在更新。</p>
<p>启用PDF标签插件：<a href="https://github.com/theme-next/theme-next-pdf">https://github.com/theme-next/theme-next-pdf</a></p>
<p>官方教程<br><a href="https://theme-next.org/docs/tag-plugins/pdf">https://theme-next.org/docs/tag-plugins/pdf</a></p>
<p>使用：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf url [height] %}

[url]    : 相对路径
[height] : 可选参数，pdf展示的高度, e.g. 800px.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例1：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf https://zhyong-cn-file.oss-cn-shanghai.aliyuncs.com/books%2Fbyte-of-python-chinese-edition.pdf %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div class="pdfobject-container" data-target="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" data-height="500px"></div>

<p>示例2：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div class="pdfobject-container" data-target="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" data-height="500px"></div>

<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>用于页内跳转。其中定义id地方，虽然不太美观，不过只能写HTML。<br>语法</p>
<pre class="line-numbers language-none"><code class="language-none">[点击我跳转到锚点](#jump)
&lt;div id = "jump"&gt;我是一个锚点，跳到我这里来&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用 # 号可标记1 - 6级标题，一级标题对应 1 个 # 号，二级标题对应 2 个 # 号，以此类推。</p>
<pre class="line-numbers language-none"><code class="language-none"># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><pre class="line-numbers language-none"><code class="language-none">
*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>显示效果如下：</p>
<p><em>斜体文本</em></p>
<p><em>斜体文本</em></p>
<p><strong>粗体文本</strong> </p>
<p><strong>粗体文本</strong></p>
<p><strong><em>粗斜体文本</em></strong></p>
<p><strong><em>粗斜体文本</em></strong></p>
<h4 id="字号及颜色"><a href="#字号及颜色" class="headerlink" title="字号及颜色"></a>字号及颜色</h4><pre class="line-numbers language-none"><code class="language-none">&lt;font size=1&gt;大小为1的字体&lt;/font&gt;
&lt;font size=6&gt;大小为6的字体&lt;/font&gt;

&lt;font color=gray size=4&gt;gray颜色的字&lt;/font&gt;
&lt;font color=green size=4&gt;green颜色的字&lt;/font&gt;
&lt;font color=hotpink size=4&gt;hotpink颜色的字&lt;/font&gt;
&lt;font color=LightCoral size=4&gt;LightCoral颜色的字&lt;/font&gt;
&lt;font color=LightSlateGray size=4&gt;LightSlateGray颜色的字&lt;/font&gt;
&lt;font color=orangered size=4&gt;orangered颜色的字&lt;/font&gt;
&lt;font color=red size=4&gt;red颜色的字&lt;/font&gt;
&lt;font color=springgreen size=4&gt;springgreen颜色的字&lt;/font&gt;
&lt;font color=Turquoise size=4&gt;Turquoise颜色的字&lt;/font&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><font size="1">大小为1的字体</font><br><br><font size="6">大小为6的字体</font><br><br><font color="gray" size="4">gray颜色的字</font><br><br><font color="green" size="4">green颜色的字</font><br><br><font color="hotpink" size="4">hotpink颜色的字</font><br><br><font color="LightCoral" size="4">LightCoral颜色的字</font><br><br><font color="LightSlateGray" size="4">LightSlateGray颜色的字</font><br><br><font color="orangered" size="4">orangered颜色的字</font><br><br><font color="red" size="4">red颜色的字</font><br><br><font color="springgreen" size="4">springgreen颜色的字</font><br><br><font color="Turquoise" size="4">Turquoise颜色的字</font></p>
<h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>有多种方法都可以建立分隔线：3个以上的星号，3个以上的减号，3个以上的下划线，也可以在星号、减号、下划线中间插入空格，这几种方式都可以建立分隔线。</p>
<pre class="line-numbers language-none"><code class="language-none">
***
* * *
******
- - -
_ _ _
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><pre class="line-numbers language-none"><code class="language-none">我没有删除线
我也没有删除线
~~我有删除线~~
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<p>我没有删除线<br>我也没有删除线<br><del>我有删除线</del></p>
<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>Markdown中并无下划线的原生语法，可以通过HTML的<u>标签来实现。</u></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;u&gt;我带下划线&lt;/u&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示效果如下：</p>
<p><u>我带下划线</u></p>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表使用星号，加号或是减号作为标记。</p>
<pre class="line-numbers language-none"><code class="language-none">* 列表项1
* 列表项2

+ 列表项1
+ 列表项2

- 列表项1
- 列表项2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表使用数字加上 . 号来表示，注意 . 号和实际内容之间需要加一个空格。</p>
<pre class="line-numbers language-none"><code class="language-none">1. 有序列表项1
2. 有序列表项2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<ol>
<li>有序列表项1</li>
<li>有序列表项2</li>
</ol>
<h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需要在子列表选项的前面添加 4 个空格即可。</p>
<pre class="line-numbers language-none"><code class="language-none">* 无序列表1
    1. 有序列表1.1
    2. 有序列表1.2
* 无序列表2
    - 无序列表2.1
    - 无序列表2.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无序列表1<ol>
<li>有序列表1.1</li>
<li>有序列表1.2</li>
</ol>
</li>
<li>无序列表2<ul>
<li>无序列表2.1</li>
<li>无序列表2.2</li>
</ul>
</li>
</ul>
<h4 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h4><p>区块使用 &gt; 符号，后面加上一个空格。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; 区块
&gt; Markdown
&gt; 用Markdown写文章，爽！
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>显示效果如下：</p>
<blockquote>
<p> 区块 Markdown 用Markdown写文章，爽！</p>
</blockquote>
<p>区块嵌套：每一层嵌套加上 &gt; 符号和空格</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; 区块
&gt; &gt; 嵌套1
&gt; &gt; &gt; 嵌套2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>区块</p>
<blockquote>
<p>嵌套1</p>
<blockquote>
<p>嵌套2</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="折叠-显示-隐藏-部分文字"><a href="#折叠-显示-隐藏-部分文字" class="headerlink" title="折叠(显示/隐藏)部分文字"></a>折叠(显示/隐藏)部分文字</h4><p><code>npm install hexo-hide-posts --save</code></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        title
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<div class="spoiler collapsed">
    <div class="spoiler-title">
        word
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<div class="spoiler collapsed">
    <div class="spoiler-title">
        Several spaces in the title
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<p>二选一或者<br><code>npm install hexo-spoiler --save</code></p>
<h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><p> <del>这是一条删除线</del></p>
<p> <em>这里不会显示斜体</em></p>
<p> <code>code</code></p>
<p> <code>more code</code></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>linux搭建GitLab</title>
    <url>/post/73879c7f.html</url>
    <content><![CDATA[<h3 id="1-初始GitLab"><a href="#1-初始GitLab" class="headerlink" title="1.初始GitLab"></a>1.初始GitLab</h3><p>  GitLab是利用Ruby on Rails一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。<br>  与Github类似，GitLab能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。<br>  它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p>
<a id="more"></a>


<h3 id="2-准备安装GitLab"><a href="#2-准备安装GitLab" class="headerlink" title="2.准备安装GitLab"></a>2.准备安装GitLab</h3><p>  <code>yum install -y postfix sshd policycoreutils-python</code></p>
<ul>
<li><code>postfix</code> 邮件通知</li>
<li><code>sshd</code> ssh服务(一般系统已经有了,可以不装)</li>
<li><code>policycoreutils-python</code> GitLab必备依赖</li>
</ul>
<p>  设置postfix开机自启: <code>chkconfig --add postfix</code></p>
<h3 id="3-开始安装GitLab"><a href="#3-开始安装GitLab" class="headerlink" title="3.开始安装GitLab"></a>3.开始安装GitLab</h3><p>  官方下载地址：<a href="https://packages.gitlab.com/gitlab/gitlab-ce">https://packages.gitlab.com/gitlab/gitlab-ce</a><br>  国内镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-12.7.6-ce.0.el6.x86_64.rpm
yum <span class="token function">install</span> -y gitlab-ce-12.7.6-ce.0.el6.x86_64.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-配置GitLab"><a href="#4-配置GitLab" class="headerlink" title="4.配置GitLab"></a>4.配置GitLab</h3><p>  主要配置两个地方: 访问GitLab的IP地址和发送邮件的账号配置</p>
<p>  <code>vim /etc/gitlab/gitlab.rb</code></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">external_url</span> <span class="token attr-value">'http://192.168.183.200' # 你自己的IP</span>

<span class="token comment">### Email Settings</span>
<span class="token attr-name">gitlab_rails['gitlab_email_enabled']</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span>
<span class="token attr-name">gitlab_rails['gitlab_email_from']</span> <span class="token punctuation">=</span> <span class="token attr-value">'你的邮箱'</span>
<span class="token attr-name">gitlab_rails['gitlab_email_display_name']</span> <span class="token punctuation">=</span> <span class="token attr-value">'邮件名字'</span>

<span class="token comment">### GitLab email server settings</span>
<span class="token comment">### 这里邮件服务器使用的是QQ企业邮箱,163自行修改</span>
<span class="token attr-name">gitlab_rails['smtp_enable']</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span>
<span class="token attr-name">gitlab_rails['smtp_address']</span> <span class="token punctuation">=</span> <span class="token attr-value">"smtp.exmail.qq.com"</span>
<span class="token attr-name">gitlab_rails['smtp_port']</span> <span class="token punctuation">=</span> <span class="token attr-value">465</span>
<span class="token attr-name">gitlab_rails['smtp_user_name']</span> <span class="token punctuation">=</span> <span class="token attr-value">"你的邮箱"</span>
<span class="token attr-name">gitlab_rails['smtp_password']</span> <span class="token punctuation">=</span> <span class="token attr-value">"邮箱密码"</span>
<span class="token attr-name">gitlab_rails['smtp_authentication']</span> <span class="token punctuation">=</span> <span class="token attr-value">"login"</span>
<span class="token attr-name">gitlab_rails['smtp_enable_starttls_auto']</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span>
<span class="token attr-name">gitlab_rails['smtp_tls']</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  ESC保存并退出 :<code>wq</code></p>
<h3 id="5-更改gitlab默认端口"><a href="#5-更改gitlab默认端口" class="headerlink" title="5.更改gitlab默认端口"></a>5.更改gitlab默认端口</h3><p>  若linux服务器的80和8080端口都已经被使用，则需修改gitlab监听的端口</p>
<p>  修改路径文件：<code>vim /etc/gitlab/gitlab.rb</code></p>
<p>  1、修改<code>external_url</code>  （将前面的#注释符号去掉）,我改成了8099</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## GitLab URL</span>
<span class="token comment">##! URL on which GitLab will be reachable.</span>
<span class="token comment">##! For more details on configuring external_url see:</span>
<span class="token comment">##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab</span>
<span class="token comment">##!</span>
<span class="token comment">##! Note: During installation/upgrades, the value of the environment variable</span>
<span class="token comment">##! EXTERNAL_URL will be used to populate/replace this value.</span>
<span class="token comment">##! On AWS EC2 instances, we also attempt to fetch the public hostname/IP</span>
<span class="token comment">##! address from AWS. For more details, see:</span>
<span class="token comment">##! https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html</span>
<span class="token attr-name">external_url</span> <span class="token attr-value">'http://10.211.55.61:8099'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  2、找到Advanced settings 下的8080端口 将端口改成自己备用端口号<br>  （<code>不能和上面url端口号相同，会冲突占用！</code>），我改的28080</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">### Advanced settings</span>
<span class="token comment"># unicorn['listen'] = 'localhost'</span>
<span class="token attr-name"> unicorn['port']</span> <span class="token punctuation">=</span> <span class="token attr-value">28080</span>
<span class="token comment"># unicorn['socket'] = '/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket'</span>
<span class="token comment"># unicorn['pidfile'] = '/opt/gitlab/var/unicorn/unicorn.pid'</span>
<span class="token comment"># unicorn['tcp_nopush'] = true</span>
<span class="token comment"># unicorn['backlog_socket'] = 1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  3、运行下面命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl stop --停止服务
<span class="token function">sudo</span> gitlab-ctl reconfigure --启动服务
<span class="token function">sudo</span> gitlab-ctl start --启动所有gitlab组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>  4、若访问不了gitlab，尝试关闭或开放防火墙</p>
<h3 id="6-启动GitLab"><a href="#6-启动GitLab" class="headerlink" title="6.启动GitLab"></a>6.启动GitLab</h3><p>  刷新配置: <code>gitlab-ctl reconfigure</code><br>  重启服务: <code>gitlab-ctl restart</code></p>
<h3 id="7-访问GitLab"><a href="#7-访问GitLab" class="headerlink" title="7.访问GitLab"></a>7.访问GitLab</h3><p>  此时还不能访问,需要关闭防火墙 <code>service iptables stop</code> 或者 在防火墙中开放8099端口:</p>
<p>  编辑iptables <code>vi /etc/sysconfig/iptables</code></p>
<p>  添加配置 <code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8099 -j ACCEPT</code></p>
<p>  重启防火墙 <code>service iptables restart</code></p>
<p>  访问 <a href="http://10.211.55.61:8099/">http://10.211.55.61:8099/</a></p>
<p>  第一次登录需要修改<code>root</code>密码, 密码8位以上,修改完就可以登录</p>
<h3 id="8-Linux下Gitlab个人界面汉化"><a href="#8-Linux下Gitlab个人界面汉化" class="headerlink" title="8.Linux下Gitlab个人界面汉化"></a>8.Linux下Gitlab个人界面汉化</h3><p>  1.进入个人用户界面<br>  点击右上角<code>个人头像-&gt;settings-&gt;profile-&gt;Preferred language</code><br>  2.默认是english,可以切换中文<br>  3.再刷新一下，我们看见语言变成中文了<br>  4.不过其它账号登录依然是英文，只有当前账号登录才会显示成功切换的语言</p>
<h3 id="9-GitLab基本操作"><a href="#9-GitLab基本操作" class="headerlink" title="9.GitLab基本操作"></a>9.GitLab基本操作</h3><p>  添加用户2种方式: root后台添加和自己注册</p>
<p>  用户权限:</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">Regular</span><span class="token punctuation">:</span> <span class="token attr-value">可以访问自己组和项目</span>
<span class="token attr-name">Admin</span><span class="token punctuation">:</span> <span class="token attr-value">可以访问所有组和项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p>  添加组</p>
<p>  组权限</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">Private</span><span class="token punctuation">:</span> <span class="token attr-value">私用,只允许组成员可见</span>
<span class="token attr-name">Internal</span><span class="token punctuation">:</span> <span class="token attr-value">内部,所有登录用户可见</span>
<span class="token attr-name">Public</span><span class="token punctuation">:</span> <span class="token attr-value">公共,所有人可见</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  创建仓库和添加成员到组,很简单,不再赘述. 重点说下仓库成员权限,</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">Guest</span><span class="token punctuation">:</span> <span class="token attr-value">可以创建issue、发表评论，不能读写版本库</span>
<span class="token attr-name">Reporter</span><span class="token punctuation">:</span> <span class="token attr-value">可以克隆代码，不能提交，QA、PM可以赋予这个权限</span>
<span class="token attr-name">Developer</span><span class="token punctuation">:</span> <span class="token attr-value">可以克隆代码、开发、提交、push，RD可以赋予这个权限</span>
<span class="token attr-name">Master</span><span class="token punctuation">:</span> <span class="token attr-value">可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心RD负责人可以赋予这个权限</span>
<span class="token attr-name">Owner</span><span class="token punctuation">:</span> <span class="token attr-value">可以设置项目访问权限 (- Visibility Level、删除项目、迁移项目、管理组成员，开发组leader可以赋予这个权限)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="10-Gitlab相关操作及说明"><a href="#10-Gitlab相关操作及说明" class="headerlink" title="10.Gitlab相关操作及说明"></a>10.Gitlab相关操作及说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
/etc/gitlab/gitlab.rb          <span class="token comment">#gitlab配置文件</span>
/opt/gitlab                    <span class="token comment">#gitlab的程序安装目录</span>
/var/opt/gitlab                <span class="token comment">#gitlab目录数据目录</span>
/var/opt/gitlab/git-data       <span class="token comment">#存放仓库数据</span>
gitlab-ctl reconfigure         <span class="token comment">#重新加载配置</span>
gitlab-ctl status              <span class="token comment">#查看当前gitlab所有服务运行状态</span>
gitlab-ctl stop                <span class="token comment">#停止gitlab服务</span>
gitlab-ctl stop nginx          <span class="token comment">#单独停止某个服务</span>
gitlab-ctl <span class="token function">tail</span>                <span class="token comment">#查看所有服务的日志</span>

Gitlab的服务构成：
nginx：                 静态web服务器
gitlab-workhorse        轻量级反向代理服务器
<span class="token function">logrotate</span>              日志文件管理工具
postgresql             数据库
redis                  缓存数据库
sidekiq                用于在后台执行队列任务（异步执行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Git-两种方式详细教程</title>
    <url>/post/4370af2f.html</url>
    <content><![CDATA[<h3 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h3><p>  Git — The stupid content tracker, 傻瓜内容跟踪器。Linus Torvalds 是这样给我们介绍 Git 的。<br>  Git 是用于 Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>
<a id="more"></a>

<h3 id="yun安装"><a href="#yun安装" class="headerlink" title="yun安装"></a>yun安装</h3><ol>
<li>在Linux上是有yum安装Git，非常简单，只需要一行命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel
yum -y <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>输入 git –version查看Git是否安装完成以及查看其版本号<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>yum安装git被安装在<code>/usr/libexec/git-core</code>目录下</li>
</ol>
<h3 id="从github上下载最新的源码编译后安装"><a href="#从github上下载最新的源码编译后安装" class="headerlink" title="从github上下载最新的源码编译后安装"></a>从github上下载最新的源码编译后安装</h3><p>  yum安装简单，但版本太旧，你不好控制。如果想要使用最新版的git，那还是得自己下载源码安装。</p>
<ol>
<li><p>首先我们需要删除旧的Git</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y remove <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>进入<code>git</code>在<code>GitHub</code>上发布版本页面<code>https://github.com/git/git/releases</code> ，这个页面我们可以找到所有git已发布的版本。这里我们选择最新版的<code>tar.gz</code>包。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">https://github.com/git/git/releases<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>下载最新版本的tar.gz的Git到本地电脑上，利用ftp工具将压缩包上传至Linux服务器的<code>/usr/local</code>目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/git/git/archive/v2.28.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>进入<code>/usr/local</code> 目录解压git文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf git-2.28.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>拿到解压后的源码以后我们需要编译源码了，不过在此之前需要安装编译所需要的依赖。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>6、提示，安装编译源码所需依赖的时候，yum自动帮你安装了git，这时候你需要先卸载这个旧版的git。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y remove <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>编译git源码，进入cd <code>/usr/local/git-2.28.0.tar.gz</code> 目录</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">make prefix=/usr/local/git all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>安装git至/usr/local/git路径</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">make prefix=/usr/local/git install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>配置环境变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile 

在底部加上如下

<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/git/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>刷新环境变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看Git是否安装完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> <span class="token function">git</span>
<span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ol>
<p>  至此，从github上下载最新的源码编译后安装git完成。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/post/423abe9e.html</url>
    <content><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h5 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h5><ol>
<li><p>仓库级别 local 【优先级最高】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --local user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config --local user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git 仓库级别对应的配置文件是当前仓库下的.git/config 【在当前目录下.git目录默认是隐藏的，所以在文件管理器中我们要打开显示以藏文件】</p>
<a id="more"></a></li>
<li><p>用户级别 global【优先级次之】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git 用户级别对应的配置文件是用户宿主目录下的~/.gitconfig</p>
</li>
<li><p>系统级别 system【优先级最低】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --system user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config --system user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git系统级别对应的配置文件是git安装目录下的 /etc/gitconfig</p>
</li>
</ol>
<h5 id="获取当前git配置"><a href="#获取当前git配置" class="headerlink" title="获取当前git配置"></a>获取当前git配置</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version
<span class="token function">git</span> config --global user.name         <span class="token comment"># 获取当前登录的用户</span>
<span class="token function">git</span> config --global user.email        <span class="token comment"># 获取当前登录用户的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者</p>
<ol>
<li>git config –local -l 查看仓库配置【必须要进入到具体的目录下，比如要查看TestGit仓库的配置信息】</li>
<li>git config –global -l 查看用户配置</li>
<li>git config –system -l 查看系统配置</li>
<li>git config -l查看所有的配置信息，依次是系统级别、用户级别、仓库级别<img data-src="/post/423abe9e/gitcom-001.png" class="" title="示例图"></li>
<li>git config 常用配置选项<ul>
<li>git config -e 编辑配置文件 <ul>
<li>git config –local -e 编辑仓库级别配置文件</li>
<li>git config –global -e 编辑用户级别配置文件</li>
<li>git config –system -e 编辑系统级别配置文件</li>
</ul>
</li>
<li>git config 添加配置项目 <ul>
<li>git config –global user.email “<a href="mailto:you@example.com">you@example.com</a>”</li>
<li>git config –global user.name “Your Name”<br>上面的操作表示添加用户级别的配置信息，也就是说修改用户宿主目录下面的配置文件</li>
</ul>
</li>
</ul>
</li>
<li>配置文件如何生效的<br>  对于git来说，配置文件的权重是仓库&gt;全局&gt;系统。Git会使用这一系列的配置文件来存储你定义的偏好，它首先会查找/etc/gitconfig文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来Git会查找每个用户的~/.gitconfig文件（全局级）。最后Git会查找由用户定义的各个库中Git目录下的配置文件.git/config（仓库级），该文件中的值只对当前所属仓库有效</li>
</ol>
<h5 id="增加配置项"><a href="#增加配置项" class="headerlink" title="增加配置项"></a>增加配置项</h5><p>  参数 –add<br>  格式: git config [–local|–global|–system] –add section.key value(默认是添加在local配置中)<br>  注意add后面的section,key,value一项都不能少，否则添加失败。比如我们执行：git config –add cat.name tom</p>
<img data-src="/post/423abe9e/gitcom-002.png" class="" title="示例图">

<h5 id="获取一个配置项"><a href="#获取一个配置项" class="headerlink" title="获取一个配置项"></a>获取一个配置项</h5><p>  有时候，我们并不需要查看所有配置的值，而是查看某个配置项的值，怎么做呢？<br>  命令参数 –get<br>  格式：git config [–local|–global|–system] –get section.key(默认是获取local配置中内容)<br>  我们先往global配置中写入一个cat.name=Tomcat的配置项，再使用git config –get cat.name看看得到的是什么：</p>
<img data-src="/post/423abe9e/gitcom-003.png" class="" title="示例图">
<p>  结果就是local中的cat.name=Tom，因此git config –get section.key 等价于git config –local –get section.key<br>  如果获取一个section不存在的key值，不会返回任何值<br>  如果获取一个不存在的section的key值，则会报错</p>
<h5 id="删除一个配置项"><a href="#删除一个配置项" class="headerlink" title="删除一个配置项"></a>删除一个配置项</h5><p>  命令参数 –unset<br>  格式：git config [–local|–global|–system] –unset section.key<br>  相信有了前两个命令的使用基础，大家举一反三就知道改怎么用了，来，我们试试删除local配置中的cat.name</p>
<img data-src="/post/423abe9e/gitcom-004.png" class="" title="示例图">

<h5 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h5><p>如果文件不存在，则创建文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"hello git"</span>
<span class="token operator">&gt;</span> index.html                          <span class="token comment"># 将'hello git'写入到index.html中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>单个<code>&gt;</code>箭头表示写入，<code>&gt;&gt;</code>表示追加</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init                        <span class="token comment"># 初始化当前所在目录的这个项目</span>
<span class="token function">git</span> status                      <span class="token comment"># 查看项目状态，有没有添加或者修改文件</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                       <span class="token comment"># 给目前的项目制作一个快照snapshot（快照只是登记留名，快照不等于记录在案，git管快照叫做索引index）</span>
<span class="token function">git</span> commit                      <span class="token comment"># 将快照里登记的内容永久写入git仓库</span>
<span class="token function">git</span> commit -a                   <span class="token comment"># 直接提交所有修改，省去了``git add``和``git diff``和``git commit``的工序</span>
                                <span class="token comment"># 无法把新增文件或文件夹加入进来，所以，如果你新增了文件或文件夹，那么就要老老实实的先``git add ..``，再``git commit``</span>
<span class="token function">git</span> push                        <span class="token comment"># 把更新推送到远程分支</span>
<span class="token function">git</span> log -p                      <span class="token comment"># git不但会给出开发日志，而且会显示每个开发版本的代码区别所在</span>
<span class="token function">git</span> log --online                <span class="token comment"># 查看版本</span>
<span class="token function">git</span> <span class="token function">diff</span>                        <span class="token comment"># 比较暂存区和工作区的差别</span>
<span class="token function">git</span> <span class="token function">diff</span> --cached               <span class="token comment"># 比较暂存区和历史区的差别</span>
<span class="token function">git</span> <span class="token function">diff</span> master                 <span class="token comment"># 比较历史区和工作区的差别（修改）</span>
<span class="token function">git</span> checkout index.html         <span class="token comment"># 用暂存区中的内容或者版本库中的内容覆盖掉工作区</span>
<span class="token function">git</span> reset HEAD index.html       <span class="token comment"># 取消增加到暂存区的内容（添加时）</span>
<span class="token function">git</span> <span class="token function">rm</span> index.html --cached      <span class="token comment"># 使用--cached表示只删除缓冲区中的内容</span>
<span class="token function">git</span> reset --hard HEAD/commit_id <span class="token comment"># 回滚版本</span>
<span class="token function">git</span> reflog                      <span class="token comment"># 回滚到未来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总结：先git add修改过的文件，再git diff并git status查看确认，然后git commit提交，然后输入开发日志，然后git push推送到远程分支，最后git log再次确认。</p>
<h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch                      <span class="token comment"># 查看分支列表</span>
<span class="token function">git</span> branch experiment           <span class="token comment"># 创建experiment分支</span>
<span class="token function">git</span> checkout experiment         <span class="token comment"># 切换到experiment分支</span>
<span class="token function">git</span> checkout -b experiment      <span class="token comment"># 创建分支并切换分支</span>
<span class="token function">git</span> commit -a                   <span class="token comment"># 在分支上提交工作</span>
<span class="token function">git</span> checkout master             <span class="token comment"># 切换到主干道</span>
<span class="token function">git</span> merge experiment            <span class="token comment"># 合并分支到主干道</span>
<span class="token function">git</span> branch -d experiment        <span class="token comment"># -d，表示“在分支已经合并到主干后删除分支”。如果使用大写的-D的话，则表示“不论如何都删除分支”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="使用git-stash命令保存和恢复进度"><a href="#使用git-stash命令保存和恢复进度" class="headerlink" title="使用git stash命令保存和恢复进度"></a>使用git stash命令保存和恢复进度</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash                       <span class="token comment"># 保留当前工作区进度，会把暂存区和工作区的改动保存起来</span>
<span class="token function">git</span> stash save <span class="token string">'message...'</span>     <span class="token comment"># 保存当前工作区，并添加备注</span>
<span class="token function">git</span> stash list                  <span class="token comment"># 显示保存进度的列表。也就意味着，git stash命令可以多次执行。</span>
<span class="token function">git</span> stash pop                   <span class="token comment"># 恢复最新的进度到工作区并删除。git默认会把工作区和缓存区的改动都恢复到工作区。</span>
<span class="token function">git</span> stash apply                 <span class="token comment"># 恢复最新的进度到工作区不删除</span>
<span class="token function">git</span> stash drop <span class="token punctuation">[</span>stash_id<span class="token punctuation">]</span>       <span class="token comment"># 删除一个存储的进度，如果不指定stash_id，则默认删除最新的存储进度，stash_id从git stash list获取</span>
<span class="token function">git</span> stash <span class="token function">clear</span>                 <span class="token comment"># 删除所有存储的进度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="撤销一次已经提交到Github的内容"><a href="#撤销一次已经提交到Github的内容" class="headerlink" title="撤销一次已经提交到Github的内容"></a>撤销一次已经提交到Github的内容</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD~1
<span class="token function">git</span> push --force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>该命令执行后，会隐藏掉Github库中的被撤销掉的记录，但是指定到该被隐藏掉的记录来访问，依旧可以访问。</p>
<h5 id="GitHub更新自己fork的代码"><a href="#GitHub更新自己fork的代码" class="headerlink" title="GitHub更新自己fork的代码"></a>GitHub更新自己fork的代码</h5><ol>
<li> clone已经fork到自己账号的代码 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/shadow000902/ApiTestEngine.git
<span class="token builtin class-name">cd</span> ApiTestEngine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<li> 查看远程分支列表 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─taoyi at TaoYi-Mac <span class="token keyword">in</span> ~/git_projects/GitHub/ApiTestEngine on master✔ using ‹› <span class="token number">17</span>-08-23 - <span class="token number">15</span>:01:23
╰─○ <span class="token function">git</span> remote -v
debugtalk	https://github.com/debugtalk/ApiTestEngine.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
debugtalk	https://github.com/debugtalk/ApiTestEngine.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
origin	https://github.com/shadow000902/ApiTestEngine.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin	https://github.com/shadow000902/ApiTestEngine.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<li> fetch原始源代码的新版本到本地 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch debugtalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 合并两个版本的代码 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge debugtalk/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 如果合并代码后有冲突，解决冲突 </li>

<li> 把合并好的最新的代码提交到自己的GitHub账号上 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="git撤销最后一次commit"><a href="#git撤销最后一次commit" class="headerlink" title="git撤销最后一次commit"></a>git撤销最后一次commit</h5><ol>
<li> 使用git log查看commit记录 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">commit-id1
commit-id2
commit-id3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果想要撤销commit-id1的话，就要选择commit-id2</p>
<li> 使用命令撤销提交 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset commit-id2				<span class="token comment"># 只是撤销提交，修改的内容不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard commit-id2			<span class="token comment"># 撤销提交，并撤销修改的内容</span>
<span class="token function">git</span> push origin HARD --force		<span class="token comment"># 撤销后，强制提交并push到远程分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<li> 修改最新一次已提交但未 push 的 message </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend -m <span class="token string">"your new message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<br>

<blockquote>
<p>其他相关链接<br><a href="https://cloud.tencent.com/developer/article/1664429">Git 常用命令</a></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之404 跳转</title>
    <url>/post/20e74403.html</url>
    <content><![CDATA[<h4 id="新建-404-页面"><a href="#新建-404-页面" class="headerlink" title="新建 404 页面"></a>新建 404 页面</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a id="more"></a>

<h4 id="编辑-404-md"><a href="#编辑-404-md" class="headerlink" title="编辑 404.md"></a>编辑 <code>404.md</code></h4><p>  添加 Front-matter 信息 permalink: /404 并替换自己的网站地址，下面的网址是腾讯公益信息宝贝回家，寻找失踪儿童的信息。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">---
title: 404
date: 2018-11-08 21:19:51
permalink: /404
---
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">homePageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pzb568.github.io<span class="token punctuation">"</span></span> <span class="token attr-name">homePageName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>回到我的主页<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之永久链接</title>
    <url>/post/2c523943.html</url>
    <content><![CDATA[<p>  设置永久链接，所有的文章都是中文的以至于网站地址特别长，不方便记忆，不美观。利用 hexo-abbrlink 这个插件可以解决。</p>
<a id="more"></a>

<h4 id="安装-hexo-abbrlink"><a href="#安装-hexo-abbrlink" class="headerlink" title="安装 hexo-abbrlink"></a>安装 hexo-abbrlink</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">permalink</span><span class="token punctuation">:</span> <span class="token attr-value">post/:abbrlink.html</span>
<span class="token attr-name">abbrlink</span><span class="token punctuation">:</span>
<span class="token attr-name">  alg</span><span class="token punctuation">:</span> <span class="token attr-value">crc32  # 算法：crc16(default) and crc32</span>
<span class="token attr-name">  rep</span><span class="token punctuation">:</span> <span class="token attr-value">hex    # 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加背景图</title>
    <url>/post/2db94f1a.html</url>
    <content><![CDATA[<h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>
<a id="more"></a>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改内容区域的宽度</title>
    <url>/post/e20d3e6e.html</url>
    <content><![CDATA[<h2 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h2><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p>
<a id="more"></a>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 修改成你期望的宽度 */</span>
$content-desktop = 700px

<span class="token comment">/* 当视窗超过 1600px 后的宽度 */</span>
$content-desktop-large = 900px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之基本操作</title>
    <url>/post/343aa4a8.html</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre><code>git

Node.js</code></pre>
<h4 id="Hexo安装：npm-install-hexo-g"><a href="#Hexo安装：npm-install-hexo-g" class="headerlink" title="Hexo安装：npm install hexo -g"></a>Hexo安装：npm install hexo -g</h4><a id="more"></a>

<p>安装完成后检查：<code>hexo -v</code></p>
<h6 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h6><p>初始化文件夹：<code>hexo init</code></p>
<p>开启服务器：<code>hexo s</code></p>
<p>Ctrl+C为退出服务器，开启服务器后在 <a href="http://localhost:4000/">http://localhost:4000/</a> 中预览博客</p>
<p>清除缓存：<code>hexo clean</code></p>
<p>生成页面：<code>hexo g</code></p>
<p>上传到github：<code>hexo d</code></p>
<p>查看帮助：<code>hexo help</code></p>
<p>查看版本：<code>hexo version</code></p>
<p>新建文章：<code>hexo new "name"</code></p>
<p>新建页面：<code>hexo new page "name"</code></p>
<p>安装插件：<code>npm install --save hexo-admin(插件名)</code></p>
<p>卸载插件：<code>npm uninstall hexo-admin(插件名)</code></p>
<h6 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h6><p>ssh key</p>
<blockquote>
<p>hexo主要配置文件：_config.yml</p>
</blockquote>
<p>首次上传到github安装插件：<code>npm install hexo-deployer-git --save</code></p>
<h6 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h6><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<blockquote>
<p>配置文件：post_asset_folder: true</p>
</blockquote>
<p>坑点：图片链接要写”/“，不要写”"</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之实现点击出现桃心效果</title>
    <url>/post/862b573a.html</url>
    <content><![CDATA[<h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p><font style="font-size:18px;"> 在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。</font></p>
<a id="more"></a>


<p><font style="font-size:18px;"> 代码如下：</font><br>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+=</span><span class="token number">.004</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">-=</span><span class="token number">.013</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">"left:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">"px;top:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">"px;opacity:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">+</span><span class="token string">";transform:scale("</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">") rotate(45deg);background:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onclick<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">&amp;&amp;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"heart"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token operator">:</span>a<span class="token punctuation">,</span>x<span class="token operator">:</span>e<span class="token punctuation">.</span>clientX<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>y<span class="token operator">:</span>e<span class="token punctuation">.</span>clientY<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>scale<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>alpha<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>color<span class="token operator">:</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText<span class="token operator">=</span>e<span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"rgb("</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">}</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">requestAnimationFrame</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>webkitRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1e3</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>
<p><font style="font-size:18px;">在<code>\themes\*\layout\_layout.swig</code>文件末尾添加:</font></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 页面点击小红心 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/src/clicklove.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客实现自动部署阿里云服务器</title>
    <url>/post/dd42c2af.html</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li> 搭建Nginx服务器：</li>

<p>   参考：<a href="/post/69813a0e.html" title="Linux安装Nginx--两种方式">Linux安装Nginx--两种方式</a></p>
<li> 搭建Git环境：</li>

<p>   参考：<a href="/post/4370af2f.html" title="Linux安装Git-两种方式详细教程">Linux安装Git-两种方式详细教程</a></p>
</ol>

<a id="more"></a>    

<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>  在<code>/etc/nginx/vhosts</code>下，新建<code>blog.conf</code>：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span><span class="token punctuation">{</span>
        <span class="token keyword">listen</span>    <span class="token number">80</span><span class="token punctuation">;</span>
        <span class="token keyword">root</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>blog<span class="token punctuation">;</span>
        <span class="token keyword">server_name</span> aliyun<span class="token operator">-</span>ip<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>
        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm <span class="token keyword">index</span><span class="token punctuation">.</span>php default<span class="token punctuation">.</span>html default<span class="token punctuation">.</span>htm default<span class="token punctuation">.</span>php<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token punctuation">)</span>$
        <span class="token punctuation">{</span>
           <span class="token keyword">access_log</span>   off<span class="token punctuation">;</span>
           <span class="token keyword">expires</span>      <span class="token number">1</span>d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token operator">|</span>txt<span class="token operator">|</span>xml<span class="token punctuation">)</span><span class="token operator">?</span>$
        <span class="token punctuation">{</span>
           <span class="token keyword">access_log</span>   off<span class="token punctuation">;</span>
           <span class="token keyword">expires</span>      <span class="token number">12</span>h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">location</span> <span class="token operator">/</span><span class="token punctuation">{</span>
           <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>blog<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log combined<span class="token punctuation">;</span>
        <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>blog<span class="token punctuation">.</span>error<span class="token punctuation">.</span>log warn<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>chown -R git:gitgroup blog</code></p>
<h3 id="GIT账户-组"><a href="#GIT账户-组" class="headerlink" title="GIT账户/组"></a>GIT账户/组</h3><p>  接下来我们 创建一个git用户组和用户，用来运行git服务：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">groupadd gitgroup
useradd git <span class="token operator">-</span>g gitgroup
passwd git
<span class="token string">''''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="禁用shell登录"><a href="#禁用shell登录" class="headerlink" title="禁用shell登录"></a>禁用shell登录</h3><p>  为安全考虑，git用户不允许登录shell，从而只能用 git clone，git push 等登录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells // 查看 git-shell 是否在登录方式里面
<span class="token function">which</span> git-shell // 查看是否安装

<span class="token function">vi</span> /etc/shells
添加上2步显示出来的路径，通常在 /usr/bin/git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  修改<code>/etc/passwd</code>中的权限:</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">vi /etc/passwd

<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> git:x:500:500::/home/git:/bin/bash
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> git:x:500:500::/home/git:/usr/local/git/bin/git-shell</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这样用户用git账户ssh连接后只能使用git命令了.<br>  <b><code>各种配置配完再禁</code></b></p>
<h3 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h3><p>  首先在用户本地主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"aliyun_test_git_id_rsa"</span> -f aliyun_test_git_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  把本地生成的公钥aliyun_test_git_id_rsa.pub，导入到远程服务器<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。<br>  远程服务器如果没有该文件创建它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span>  <span class="token comment"># 这步很重要，不切换用户后面会很麻烦</span>

<span class="token builtin class-name">cd</span> /home/git/
<span class="token function">mkdir</span> .ssh
<span class="token function">chmod</span> <span class="token number">755</span> .ssh
<span class="token function">touch</span> .ssh/authorized_keys
<span class="token function">chmod</span> <span class="token number">644</span> .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  把本地公钥复制到远程服务器（<code>确保相应的权限</code>）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> aliyun_test_git_id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys
<span class="token comment"># 确保权限</span>
<span class="token comment"># chmod 700 ~/.ssh -R;</span>
<span class="token comment"># chmod 600 ~/.ssh/authorized_keys</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="打开-RSA-认证"><a href="#打开-RSA-认证" class="headerlink" title="打开 RSA 认证"></a>打开 RSA 认证</h3><p>  然后就可以去Git服务器上添加你的公钥用来验证你的信息了。在Git服务器上首先需要将<code>/etc/ssh/sshd_config</code>中将RSA认证打开，即：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RSAAuthentication <span class="token function">yes</span>
PubkeyAuthentication <span class="token function">yes</span>
AuthorizedKeysFile .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  保存并重启 sshd 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/rc.d/init.d/sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"leeze"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"leeze0216@163.com"</span>

<span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>  // 禁用自动转换，这个不设置后面上传时会出现警告，如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/dd42c2af/git-warning.jpg" class="" title="warning">

<h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><p>  <code>su git  # 这步很重要，不切换用户后面会很麻烦</code><br>  首先我们选定一个目录作为Git仓库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/git
<span class="token function">mkdir</span> gitrepos
<span class="token comment"># chown git:gitgroup gitrepo/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  在服务器初始化一个远程 Git 裸仓库 (git init –bare)<br>  裸仓库与 git init 初使化的仓库不太一样，裸仓库其实相当于通过克隆来的仓库里的.git文件夹，整个裸仓库中只有git索引（index），不包含工作目录。要实现 Push to Deploy，首先我们需要一个裸仓库，进入/home/USER/repos/，创建如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/git/gitrepos
<span class="token function">git</span> init --bare blog-bare.git <span class="token comment"># Git 裸仓库</span>
<span class="token comment"># chown -R git:gitgroup blog-bare.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="测试git仓库"><a href="#测试git仓库" class="headerlink" title="测试git仓库"></a>测试git仓库</h3><p>  另找空白文件夹，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/gitrepos/blog-bare.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果能把空仓库拉下来，就说明 git 仓库搭建成功了</p>
<h3 id="配置-Git-Hook"><a href="#配置-Git-Hook" class="headerlink" title="配置 Git Hook"></a>配置 Git Hook</h3><ol>

<li> post-update</li>

<p>  将目录切换至 <code>/home/USER/repos/xxx-bare.git/hooks</code>，用 <code>cp post-update.sample post-update</code> 复制并重命名文件后 <code>vim post-update</code> 修改，增加执行脚本:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">unset</span> GIT_DIR
<span class="token assign-left variable">DIR_ONE</span><span class="token operator">=</span>/usr/share/nginx/blog/  <span class="token comment">#此目录为服务器页面展示目录</span>
<span class="token builtin class-name">cd</span> <span class="token variable">$DIR_ONE</span>

<span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin /home/git/gitrepos/blog-bare.git
<span class="token function">git</span> clean -df
<span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <b><code> 注意： 一定要unset GIT_DIR清除变量， 不然会引起remote: fatal: Not a git repository: ‘.’错误。</code></b></p>
<p>  <code>post-update</code>添加执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x post-update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> post-receive</li>

<p>  将目录切换至 <code>/home/USER/repos/xxx-bare.git/hooks</code>，用 <code>cp post-receive.sample post-receive</code> 复制并重命名文件后 <code>vim post-receive</code> 修改，增加执行脚本:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token function">git</span> --work-tree<span class="token operator">=</span>/usr/share/nginx/blog/ --git-dir<span class="token operator">=</span>/home/git/gitrepos/blog-bare.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>post-receive</code>添加执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>  修改Hexo博客根目录下<code>_config.yml</code>文件</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">deploy</span><span class="token punctuation">:</span>
<span class="token attr-name">-</span> <span class="token attr-value">type: git</span>
<span class="token attr-name">  repo</span><span class="token punctuation">:</span> <span class="token attr-value">git@aliyun-ip:/home/git/gitrepos/blog-bare.git</span>
<span class="token attr-name">  branch</span><span class="token punctuation">:</span> <span class="token attr-value">master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>  <code>hexo clean hexo g hexo d</code>后，网站更新了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之静态资源压缩</title>
    <url>/post/2299cf25.html</url>
    <content><![CDATA[<h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><p>在<code>站点目录</code>下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> gulp -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a id="more"></a>

<p>安装<code>gulp</code>插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp-minify-css --save
<span class="token function">npm</span> <span class="token function">install</span> gulp-uglify --save
<span class="token function">npm</span> <span class="token function">install</span> gulp-htmlmin --save
<span class="token function">npm</span> <span class="token function">install</span> gulp-htmlclean --save
<span class="token function">npm</span> <span class="token function">install</span> gulp-imagemin --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>Hexo 站点</code>下新建 <code>gulpfile.js</code>文件，文件内容如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> minifycss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-minify-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlclean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩css文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.css'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">minifycss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩html文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.html'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    removeComments<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    minifyJS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    minifyCSS<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    minifyURLs<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩js文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/**/.js'</span><span class="token punctuation">,</span><span class="token string">'!./public/js/**/*min.js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩 public/demo 目录内图片</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-images'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/demo/**/*.*'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
           optimizationLevel<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span>
           progressive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 无损压缩jpg图片</span>
           interlaced<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>
           multipass<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 默认任务</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">'minify-html'</span><span class="token punctuation">,</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span><span class="token string">'minify-js'</span><span class="token punctuation">,</span><span class="token string">'minify-images'</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g
gulp
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改Logo字体</title>
    <url>/post/6d38bae0.html</url>
    <content><![CDATA[<h2 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h2><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>
<a id="more"></a>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Zitiming<span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/fonts/Zitiming.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.site-title</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 40px <span class="token important">!important</span><span class="token punctuation">;</span>
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Zitiming'</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改访问URL路径</title>
    <url>/post/e9980575.html</url>
    <content><![CDATA[<h2 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h2><p>默认情况下访问URL路径为：<code>domain/2018/10/18/</code>关于本站,修改为 <code>domain/About/</code>关于本站。 编辑 Hexo 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p>
<a id="more"></a>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">permalink</span><span class="token punctuation">:</span> <span class="token attr-value">:category/:title/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之文章加密访问</title>
    <url>/post/78491cc3.html</url>
    <content><![CDATA[<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>下载 <code>hexo-blog-encrypt</code>，它将会被存储在本地浏览器的localStorage中：</p>
<a id="more"></a>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-blog-encrypt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="文章信息头，将-password-字段添加到文章信息头："><a href="#文章信息头，将-password-字段添加到文章信息头：" class="headerlink" title="文章信息头，将 password 字段添加到文章信息头："></a>文章信息头，将 <code>password</code> 字段添加到文章信息头：</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token attr-value">Hello World</span>
<span class="token attr-name">date</span><span class="token punctuation">:</span> <span class="token attr-value">2016-03-30 21:18:02</span>
<span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token attr-value">abcd1234xxx</span>
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token attr-value">Hello World</span>
<span class="token attr-name">tags</span><span class="token punctuation">:</span>
<span class="token attr-name">-</span> <span class="token attr-value">加密文章tag</span>
<span class="token attr-name">date</span><span class="token punctuation">:</span> <span class="token attr-value">2019-10-26 20:22:58</span>
<span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token attr-value">mikemessi</span>
<span class="token attr-name">abstract</span><span class="token punctuation">:</span> <span class="token attr-value">该文章已加密, 请输入密码查看。</span>
<span class="token attr-name">message</span><span class="token punctuation">:</span> <span class="token attr-value">该文章已加密, 请输入密码查看。</span>
<span class="token attr-name">wrong_pass_message</span><span class="token punctuation">:</span> <span class="token attr-value">密码不正确，请重新输入！</span>
<span class="token attr-name">wrong_hash_message</span><span class="token punctuation">:</span> <span class="token attr-value">文章不能被校验, 不过您还是能看看解密后的内容！</span>
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>在本地预览加密的文章。</p>
<h5 id="或者-修改-config-yml"><a href="#或者-修改-config-yml" class="headerlink" title="或者,修改_config.yml"></a><code>或者</code>,修改<code>_config.yml</code></h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">
<span class="token comment"># Security</span>
<span class="token attr-name">encrypt</span><span class="token punctuation">:</span> <span class="token attr-value"># hexo-blog-encrypt</span>
<span class="token attr-name">  abstract</span><span class="token punctuation">:</span> <span class="token attr-value">有东西被加密了, 请输入密码查看.</span>
<span class="token attr-name">  message</span><span class="token punctuation">:</span> <span class="token attr-value">您好, 这里需要密码.</span>
<span class="token attr-name">  tags</span><span class="token punctuation">:</span>
<span class="token attr-name">  -</span> <span class="token attr-value">{name: tagName, password: 密码A}</span>
<span class="token attr-name">  -</span> <span class="token attr-value">{name: tagName, password: 密码B}</span>
<span class="token attr-name">  template</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;div id="hexo-blog-encrypt" data-wpm="{{hbeWrongPassMessage}}" data-whm="{{hbeWrongHashMessage}}"&gt;&lt;div class="hbe-input-container"&gt;&lt;input type="password" id="hbePass" placeholder="{{hbeMessage}}" /&gt;&lt;label&gt;{{hbeMessage}}&lt;/label&gt;&lt;div class="bottom-line"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id="hbeData" type="hbeData" data-hmacdigest="{{hbeHmacDigest}}"&gt;{{hbeEncryptedData}}&lt;/script&gt;&lt;/div&gt;</span>
<span class="token attr-name">  wrong_pass_message</span><span class="token punctuation">:</span> <span class="token attr-value">抱歉, 这个密码看着不太对, 请再试试.</span>
<span class="token attr-name">  wrong_hash_message</span><span class="token punctuation">:</span> <span class="token attr-value">抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注：若文章中采用<code>_config.yml</code>中的全局配置，则文章的tags只能有一个，若有多个tags，则失效。</p>
<p>注：<code>文章信息头</code> &gt;<code> _config.yml</code> (站点根目录下的) &gt; 默认配置</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之显示当前浏览进度</title>
    <url>/post/e28ea32e.html</url>
    <content><![CDATA[<h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p>
<a id="more"></a>


<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Back to top in sidebar</span>
<span class="token attr-name">b2t</span><span class="token punctuation">:</span> <span class="token attr-value">true</span>

<span class="token comment"># Scroll percent label in b2t button</span>
<span class="token attr-name">scrollpercent</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之图片问题</title>
    <url>/post/172c7c2b.html</url>
    <content><![CDATA[<h5 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h5><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save

  <span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save  <span class="token punctuation">(</span>推荐这个<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<a id="more"></a>

<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<pre class="line-numbers language-none"><div class="caption"><span>完整代码</span></div><code class="language-none">'use strict';
var cheerio = require('cheerio');

// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string
function getPosition(str, m, i) {
  return str.split(m, i).join(m).length;
}

var version = String(hexo.version).split('.');
hexo.extend.filter.register('after_post_render', function(data){
  var config = hexo.config;
  if(config.post_asset_folder){
    	var link = data.permalink;
	if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)
	   var beginPos = getPosition(link, '/', 1) + 1;
	else
	   var beginPos = getPosition(link, '/', 3) + 1;
	// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".
	var endPos = link.lastIndexOf('/') + 1;
    link = link.substring(beginPos, endPos);

    var toprocess = ['excerpt', 'more', 'content'];
    for(var i = 0; i &lt; toprocess.length; i++){
      var key = toprocess[i];
 
      var $ = cheerio.load(data[key], {
        ignoreWhitespace: false,
        xmlMode: false,
        lowerCaseTags: false,
        decodeEntities: false
      });

      $('img').each(function(){
		if ($(this).attr('src')){
			// For windows style path, we replace '\' to '/'.
			var src = $(this).attr('src').replace('\\', '/');
			if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
			   !/^\s*\//.test(src)) {
			  // For "about" page, the first part of "src" can't be removed.
			  // In addition, to support multi-level local directory.
			  var linkArray = link.split('/').filter(function(elem){
				return elem != '';
			  });
			  var srcArray = src.split('/').filter(function(elem){
				return elem != '' &amp;&amp; elem != '.';
			  });
			  if(srcArray.length &gt; 1)
				srcArray.shift();
			  src = srcArray.join('/');
			  $(this).attr('src', config.root + link + src);
			  console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src);
			}
		}else{
			console.info&amp;&amp;console.info("no src attr, skipped...");
			console.info&amp;&amp;console.info($(this));
		}
      });
      data[key] = $.html();
    }
  }
});
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开_config.yml文件，修改下述内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="二、问题推测"><a href="#二、问题推测" class="headerlink" title="二、问题推测"></a>二、问题推测</h5><h6 id="一-本地图片没有有效上传至github仓库中，导致引用无效"><a href="#一-本地图片没有有效上传至github仓库中，导致引用无效" class="headerlink" title="(一)本地图片没有有效上传至github仓库中，导致引用无效"></a>(一)本地图片没有有效上传至github仓库中，导致引用无效</h6><pre><code>解决方案：安装插件（回看前文）</code></pre>
<h6 id="（二）本地图片没有存放在同名文件夹中"><a href="#（二）本地图片没有存放在同名文件夹中" class="headerlink" title="（二）本地图片没有存放在同名文件夹中"></a>（二）本地图片没有存放在同名文件夹中</h6><pre><code>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</code></pre>
<h6 id="（三）图片路径出错"><a href="#（三）图片路径出错" class="headerlink" title="（三）图片路径出错"></a>（三）图片路径出错</h6><p>解决方案：打开_config.yml修改下述内容<br><img style="margin-left:30px;" data-src="https://img-blog.csdnimg.cn/20181115112941162.png"></p>
<h6 id="（四）相对路径引用的标签插件"><a href="#（四）相对路径引用的标签插件" class="headerlink" title="（四）相对路径引用的标签插件"></a>（四）相对路径引用的标签插件</h6><pre class="line-numbers language-none"><code class="language-none">通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页
上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的  
发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><small><strong>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</strong></small></p>
<!-- 注释 -->



<blockquote><p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code>，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>
</blockquote>


<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>% asset_img example.jpg This is an example image %<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之博文置顶</title>
    <url>/post/c53d9800.html</url>
    <content><![CDATA[<h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> uninstall hexo-generator-index --save
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<a id="more"></a>

<p>然后在需要置顶的文章的Front-matter中加上<code>top</code>即可：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">2018</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-10-25 16:10:03</span>
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-设置置顶标志"><a href="#2-设置置顶标志" class="headerlink" title="2. 设置置顶标志"></a>2. 设置置顶标志</h4><p>打开：<code>/themes/*/layout/_macro/post.swig</code>或者<code>_partials/post/post-meta.njk</code>，<br>定位到<code>&lt;div class="post-meta"&gt;</code>标签下，插入如下代码：</p>
<pre class="line-numbers language-velocity" data-language="velocity"><code class="language-velocity">{% if post.top %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-thumb-tack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>7D26CD</span><span class="token punctuation">&gt;</span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
{% endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之踩坑</title>
    <url>/post/ad07d2fa.html</url>
    <content><![CDATA[<h3 id="hexo-本身-marldown不好用"><a href="#hexo-本身-marldown不好用" class="headerlink" title="hexo 本身 marldown不好用"></a>hexo 本身 marldown不好用</h3><h5 id="hexo-renderer-markdown-it-插件"><a href="#hexo-renderer-markdown-it-插件" class="headerlink" title="hexo-renderer-markdown-it 插件"></a>hexo-renderer-markdown-it 插件</h5><p>为了更好地写markdown文档</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked --save
<span class="token function">npm</span> i hexo-renderer-markdown-it --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<a id="more"></a>

<p>添加到<code>根目录</code>_config.yml文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span>
<span class="token comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span>
<span class="token key atrule">markdown</span><span class="token punctuation">:</span>
  <span class="token key atrule">render</span><span class="token punctuation">:</span>
    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>
  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sub
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sup
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>emoji  <span class="token comment"># add emoji</span>
  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>
    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'v'</span>
    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor
    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> ¶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之主页文章添加边框阴影效果</title>
    <url>/post/35232b4b.html</url>
    <content><![CDATA[<h2 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h2><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p>
<a id="more"></a>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 主页文章添加阴影效果*/</span>
<span class="token selector">.post</span> <span class="token punctuation">{</span>
   <span class="token property">margin-top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
   <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
   <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
   <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 204<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之修改文章样式</title>
    <url>/post/346628a2.html</url>
    <content><![CDATA[<h4 id="文章样式"><a href="#文章样式" class="headerlink" title="文章样式"></a>文章样式</h4><p>修改<code>themes/next/source/css/_custom/custom.styl</code>文件，加入自定义样式</p>
<a id="more"></a>


<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*******************文章样式*****************************/</span>

<span class="token comment">/*文章*/</span>
<span class="token selector">.post</span> <span class="token punctuation">{</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 45px 36px 36px 36px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 文章标题字体*/</span>
<span class="token selector">.posts-expand .post-title</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章标题动态效果*/</span>
<span class="token selector">.posts-expand .post-title-link::before</span> <span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a166ab 0%<span class="token punctuation">,</span> #ef4e7b 25%<span class="token punctuation">,</span> #f37055 50%<span class="token punctuation">,</span> #ef4e7b 75%<span class="token punctuation">,</span> #a166ab 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章元数据（meta）留白更改*/</span>
<span class="token selector">.posts-expand .post-meta</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0px 20px 0px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章的描述description */</span>
<span class="token selector">.posts-expand .post-meta .post-description</span> <span class="token punctuation">{</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改[Read More]按钮样式</title>
    <url>/post/3f27960.html</url>
    <content><![CDATA[<h4 id="修改-Read-More-按钮样式"><a href="#修改-Read-More-按钮样式" class="headerlink" title="修改[Read More]按钮样式"></a>修改[Read More]按钮样式</h4><p> 修改<code>themes/next/source/css/_custom/custom.styl</code>文件，加入自定义样式</p>
<a id="more"></a>


 <pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">// [Read More]按钮样式
.post-button .btn</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #555 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">transition-property</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0px 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.post-button .btn:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a166ab 0%<span class="token punctuation">,</span> #ef4e7b 25%<span class="token punctuation">,</span> #f37055 50%<span class="token punctuation">,</span> #ef4e7b 75%<span class="token punctuation">,</span> #a166ab 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之网站标题栏背景颜色</title>
    <url>/post/91a443ec.html</url>
    <content><![CDATA[<h2 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h2><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>
<a id="more"></a>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.site-meta</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> //修改为自己喜欢的颜色
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之主题更新问题处理</title>
    <url>/post/58bb50d8.html</url>
    <content><![CDATA[<p>  由于 next 主题经常更新，自己又在本地大量修改主题，更新中会有很多问题，经过很多次折腾及网络上其他朋友的教程，我找到了不错的处理方法。</p>
<a id="more"></a>

<h3 id="进入主题目录并更新"><a href="#进入主题目录并更新" class="headerlink" title="进入主题目录并更新"></a>进入主题目录并更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> themes/next
<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  因为修改了很多的配置项目，所以更新<code>失败</code>了</p>
<h4 id="一，解决更新"><a href="#一，解决更新" class="headerlink" title="一，解决更新"></a>一，解决更新</h4><h5 id="1，将修改储藏到暂存区"><a href="#1，将修改储藏到暂存区" class="headerlink" title="1，将修改储藏到暂存区"></a>1，将修改储藏到暂存区</h5><p>  我们可以通过 <code>git stash</code> 这句命令将对主题文件的修改储存到本地的暂存区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="2，执行更新"><a href="#2，执行更新" class="headerlink" title="2，执行更新"></a>2，执行更新</h5><p>  我们现在需要再次使用 git pull 命令来获取最新的主题文件，别担心，这次不会再有上面的错误了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="3，从暂存区取出修改"><a href="#3，从暂存区取出修改" class="headerlink" title="3，从暂存区取出修改"></a>3，从暂存区取出修改</h5><p>  我们现在要通过执行 git stash pop 这句命令来从暂存区取出修改。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="二，报错"><a href="#二，报错" class="headerlink" title="二，报错"></a>二，报错</h4><p>  如果报错如下内容需要进入提示的文件修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stash pop
Auto-merging _config.yml
CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="1，进入文件"><a href="#1，进入文件" class="headerlink" title="1，进入文件"></a>1，进入文件</h5><p>  可以看到文中 &lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;b8e436 中间是你自己的分支，删掉一个就可以了</p>
<h5 id="2，提交记录"><a href="#2，提交记录" class="headerlink" title="2，提交记录"></a>2，提交记录</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> _config.yml
<span class="token function">git</span> commit -m <span class="token string">"冲突处理"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="3，在更新"><a href="#3，在更新" class="headerlink" title="3，在更新"></a>3，在更新</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote class="blockquote-center">
<p>主题升级成功。</p>

</blockquote><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins之SSH Publishers时踩的坑</title>
    <url>/post/4995ab80.html</url>
    <content><![CDATA[<h4 id="source相对路径问题"><a href="#source相对路径问题" class="headerlink" title="source相对路径问题"></a>source相对路径问题</h4><p><code>source</code>相对路径问题，不是<mark class="label danger">.Jenkins/workspace</mark>，而是<mark class="label success">.jenkins/workspace/[project]/</mark></p>
<a id="more"></a>


<img data-src="/post/4995ab80/jkp.jpeg" class="" title="相对路径示例图"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins之shell 部署脚本</title>
    <url>/post/5f2bf15a.html</url>
    <content><![CDATA[<h4 id="记录一下，以防遗忘。"><a href="#记录一下，以防遗忘。" class="headerlink" title="记录一下，以防遗忘。"></a>记录一下，以防遗忘。</h4><a id="more"></a>

<img data-src="/post/5f2bf15a/shell.jpg" class="" title="部署脚本示例图">
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jira8.x版本安装与破解</title>
    <url>/post/afb30e04.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   JIRA 是 Atlassian 公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。</p>
<a id="more"></a>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li><p>Jdk1.8以上：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">jdk8</a> ，<a href="https://www.oracle.com/java/technologies/javase-downloads.html">其他</a></p>
</li>
<li><p>Mysql驱动：<a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar">mysql-connector-java-5.1.49.jar</a> , <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/">其他</a></p>
</li>
<li><p>JIRA安装包：<a href="https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-8.5.7-x64.bin">atlassian-jira-software-8.5.7-x64.bin</a> , <a href="https://www.atlassian.com/zh/software/jira/download/data-center">其他</a></p>
</li>
<li><p>破解包：<a href="https://gitee.com/pengzhile/atlassian-agent/attach_files/283101/download">atlassian-agent-v1.2.3</a>  , <a href="https://gitee.com/pengzhile/atlassian-agent/releases">其他</a>   </p>
</li>
<li><p>机子分配的内存适当大些。</p>
</li>
</ol>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>   先把上面下载的软件包放到同一目录下，比如<code>/tmp</code>目录下，然后输入下面的命令进行安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf atlassian-agent-v1.2.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./atlassian-jira-software-8.5.7-x64.bin <span class="token comment"># 下面执行的是默认的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/afb30e04/jira-001.png" class="" title="JIRA安装图">

<p>  安装路径：    <code>/opt/atlassian/jira</code><br>  数据存放路径：<code>/var/atlassian/application-data/jira</code><br>  HTTP Port:  <code>8080</code><br>  RMI Port:    <code>8005</code></p>
<h4 id="复制包"><a href="#复制包" class="headerlink" title="复制包"></a>复制包</h4><p>   复制驱动包、破解包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> atlassian-agent-v1.2.3/atlassian-agent.jar /home/jira1/
<span class="token function">cp</span> atlassian-agent-v1.2.3/atlassian-agent.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/
<span class="token function">cp</span> mysql-connector-java-5.1.49.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ol> 
<li>破解：<font color="LightCoral" size="3">修改setenv.sh</font></li>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">vi /opt/atlassian/jira/bin/setenv.sh
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> export JAVA_OPTS # 70行的(其实，不用删的，嘿嘿，我是为了突出修改)
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> export JAVA_OPTS="-javaagent:/home/jira1/atlassian-agent.jar ${JAVA_OPTS}"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div style="height: 10px;"></div>
<li>个人习惯，把Java改了,默认<font color="LightCoral" size="3">OpenJDK</font>,改成<font color="orangered" size="3">Java(TM) SE </font></li>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"># DO NOT remove the following line
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> JAVA_HOME="/usr/java/jdk1.8.0_261-amd64"; export JAVA_HOME
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> JAVA_HOME="/opt/atlassian/jira/jre"; export JAVA_HOME</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div style="height: 10px;"></div>
<li>更改端口（默认8080）</li>
<font color="LightCoral" size="3">lsof -i:8080</font>，<font color="LightCoral" size="3">ss -tanlp </font>, 如果被占用
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/atlassian/jira/conf/server.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
将 <font color="LightCoral" size="3">Server port（8005）</font> and the <font color="LightCoral" size="3">Connector port （8080）</font> 改了。

<div style="height: 10px;"></div>
<li> 配置jira_home（默认不做更改）</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/atlassian/jira/atlassian-jira/WEB-INF/classes/jira-application.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<font color="red" size="2">（路径需根据实际情况配置，而且需要注意此路径配置不能和安装软件同一个目录，否则报错）</font>

</ol>

<h4 id="启动Jira"><a href="#启动Jira" class="headerlink" title="启动Jira"></a>启动Jira</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/atlassian/jira/bin/start-jira.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -f -n <span class="token number">500</span> /opt/atlassian/jira/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h4><p>   访问地址：<a href="http://10.211.55.61:8080/">http://10.211.55.61:8080</a></p>
<img data-src="/post/afb30e04/jira-002.png" class="" title="中文">
<img data-src="/post/afb30e04/jira-003.png" class="" title="自定义">

<p>   创建数据库，如果是选择Mysql，建议使用Mysql5.6或者Mysql5.7，这样不容易出错。另外在创建数据库时建议选择UTF8编码，目前不支持UTF8MB4。<a href="https://confluence.atlassian.com/adminjiraserver085/connecting-jira-applications-to-mysql-5-7-981154582.html">参考</a></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> jiradb <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>   如果，想添加DB用户的话：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> jira<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'jira'</span><span class="token variable">@'%'</span> identifiedby <span class="token string">'jira'</span><span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span><span class="token string">'jira'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>   配置DB数据，并测试，如下图：</p>
<img data-src="/post/afb30e04/jira-004.png" class="" title="DB配置">
<p>   测试OK，点击<code>下一步</code>:</p>
<img data-src="/post/afb30e04/jira-005.png" class="" title="DB配置">
<p>   此时，发现服务停止，<code>tail -f -n 500 /opt/atlassian/jira/logs/catalina.out</code>，后台报错：</p>
<blockquote>
<p>   WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting <code>useSSL=false</code>, or set useSSL=true and provide truststore for server certificate</p>
</blockquote>
<p>   查看<code>/var/atlassian/application-data/jira</code>，新生成<code>dbconfig.xml</code>，<code>原先没有的</code>。</p>
<p>   解决：<a href="https://community.atlassian.com/t5/Jira-Core-questions/JIRA-and-MySql-5-7-with-SSL/qaq-p/1251720">参考1</a> ， <a href="https://community.atlassian.com/t5/Jira-questions/useSSL-false-with-Jira-ServiceDesk/qaq-p/1088212">参考2</a> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /var/atlassian/application-data/jira/dbconfig.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>   DB的URL末尾加上<code>&amp;amp;useSSL=false</code>，我们习惯加<code>&amp;</code>，但是这里却是<code>&amp;amp;</code>。</p>
<img data-src="/post/afb30e04/jira-006.png" class="" title="SSL">

<p>   重新启动：<code>/opt/atlassian/jira/bin/start-jira.sh</code></p>
<img data-src="/post/afb30e04/jira-007.png" class="" title="Title+URL">

<img data-src="/post/afb30e04/jira-008.png" class="" title="KEY">

<p>   根据Server ID 生成license Key：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/atlassian/jira/jre/bin/java -jar /home/jira1/atlassian-agent.jar -p jira -m jira@jira.com -n jira -o https://jira.com -s BFZ0-PD41-I9AX-YXDP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<br>
<div class="note default no-icon"><p>-p jira(安装的是jira产品)，具体的可以根据-p进行参考<br>-m <a href="mailto:jira@jira.com">jira@jira.com</a>(随意写)<br>-n jira(随意写)<br>-o <a href="https://jira.com/">https://jira.com</a> (随意写)<br>-s BFZ0-PD41-I9AX-YXDP (即jira显示的服务器ID)</p>
</div>
<br>

<img data-src="/post/afb30e04/jira-009.png" class="" title="KEY">
<p>   复制生成的KEY，点击<code>Next</code>：</p>
<img data-src="/post/afb30e04/jira-010.png" class="" title="KEY">
<p>   创建账户：</p>
<img data-src="/post/afb30e04/jira-011.png" class="" title="Admin">
<p>   Email配置，跳过</p>
<img data-src="/post/afb30e04/jira-012.png" class="" title="Email">

<p>。。。。。。。。。</p>
<h4 id="重配实例"><a href="#重配实例" class="headerlink" title="重配实例"></a>重配实例</h4><p>   如果页面配置失败或者想要重新配置实例，可以把原来的实例删除：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /var/atlassian/application-data/jira/* -rf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div style="height: 10px;"></div>
   然后再重新进行Web页面配置。



<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>虚拟机装的，原先内存2G，老报memory问题，关闭服务</li>
<div style="height: 10px;"></div>
<div class="note danger"><p>error=’Cannot allocate memory’ </p>
</div>

<p>把本地内存最好调大点,我任性给了6G，哈哈。。。</p>
<img data-src="/post/afb30e04/jira-013.png" class="" title="VM">


<p><code>vi /opt/atlassian/jira/bin/setenv.sh</code></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">JVM_MINIMUM_MEMORY</span><span class="token punctuation">=</span><span class="token attr-value">"768m"</span>
<span class="token attr-name">JVM_MAXIMUM_MEMORY</span><span class="token punctuation">=</span><span class="token attr-value">"4096m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</ol>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><div style="height: 10px;"></div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/atlassian/application-data/jira/dbconfig.xml    <span class="token comment"># DB设置</span>

/opt/atlassian/jira/bin/start-jira.sh                <span class="token comment"># 启动</span>

<span class="token function">tail</span> -f -n <span class="token number">500</span> /opt/atlassian/jira/logs/catalina.out <span class="token comment"># 日志</span>

<span class="token function">vi</span> /opt/atlassian/jira/conf/server.xml               <span class="token comment"># 端口设置</span>

/opt/atlassian/jira/                                 <span class="token comment"># 安装路径</span>

/var/atlassian/application-data/jira                 <span class="token comment"># 数据存放路径</span>

/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/database-defaults
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之hosts主机名不对</title>
    <url>/post/2cf589fe.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h4><div class="note info no-icon"><p>[root@bogon ~]#<br>[root@bogon ~]# hostname<br>bogon</p>
</div>

<a id="more"></a>

<h4 id="查看几个相关文件，都正确"><a href="#查看几个相关文件，都正确" class="headerlink" title="查看几个相关文件，都正确"></a>查看几个相关文件，都正确</h4><div class="note info no-icon"><p>[root@bogon ~]# vi /etc/sysconfig/network</p>
<p>NETWORKING=yes<br>HOSTNAME=localhost.localdomain</p>
<p>[root@bogon ~]# vi /etc/hosts</p>
<p>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</p>
</div>

<h4 id="继续，dns的的配置"><a href="#继续，dns的的配置" class="headerlink" title="继续，dns的的配置"></a>继续，dns的的配置</h4><div class="note info no-icon"><p>[root@bogon logs]# vi /etc/resolv.conf<br>#Generated by NetworkManager<br>search com (大爷的，这行不知道咋来的，删不掉)<br>nameserver 10.211.55.1</p>
</div>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><div class="note success no-icon"><p>[root@bogon ~]# hostname localhost<br>[root@localhost logs]# hostname<br>localhost</p>
</div>

<h4 id="又变回去"><a href="#又变回去" class="headerlink" title="又变回去"></a>又变回去</h4><p>若4操作后重启发现hostname又变回去了，如下操作</p>
<div class="note default"><p><code>vi /etc/hosts</code>，追加 本机IP localhost</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</span>
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 10.211.55.12 localhost（追加的）</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</div>

<hr>
<h3 id="centos6修改主机名"><a href="#centos6修改主机名" class="headerlink" title="centos6修改主机名"></a>centos6修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">第一种方式：临时修改
临时修改主机名，但是重启后又会恢复
修改方式如下：
shell#hostname &lt;主机名&gt;
第二种方式：永久修改
修改配置文件，使其永久生效
shell# sed -i “s/HOSTNAME=localhost/HOSTNAME=&lt;主机名&gt;/g” /etc/sysconfig/network
意思就是修改配置文件/etc/sysconfig/network文件，将新的主机名加入到配置文件里面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="centos7修改主机名"><a href="#centos7修改主机名" class="headerlink" title="centos7修改主机名"></a>centos7修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">第一种方式：临时修改
这个和centos6一样，都是直接在命令行敲hostname +新的主机名，eg：hostname &lt;主机名&gt;
第二种方式： 永久修改
这种方式和centos6有所不同，我们看一下如何操作
shell# hostnamectl set-hostname &lt;主机名&gt;
还可以直接修改配置文件/etc/hostname直接将新的主机名加入到配置文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之安装jdk及环境配置</title>
    <url>/post/2aaf08ad.html</url>
    <content><![CDATA[<h4 id="一、Linux下JDK安装"><a href="#一、Linux下JDK安装" class="headerlink" title="一、Linux下JDK安装"></a>一、Linux下JDK安装</h4><h5 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h5><p><code>通过yum安装的默认路径为：/usr/lib/jvm</code></p>
<a id="more"></a>

<ol>
<li>首先执行以下命令查看可安装的jdk版本</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y list java*
or
yum search jdk
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<li>选择自己需要的jdk版本进行安装，比如这里安装1.8，执行以下命令：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y java-1.8.0-openjdk-devel.x86_64
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>等待安装完成即可。</p>
<li>安装完成之后，查看安装的jdk版本，输入以下指令：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -version
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
此处便可以看到自己安装的jdk版本信息。
你如果好奇这个自动安装把jdk安装到哪里去了，其实你可以在usr/lib/jvm下找到它们。
ok，完成！

<li>卸载</li>

<p> 检测是否已经安装JDK<br> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>
<p> 卸载系统自带jdk</p>
<p> 删除系统自带JDK的命令，两种方法都可以：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -e –nodeps java-1.6.0-openjdk-1.6.0.0-1.41.1.10.4.e16.x86_64
OR
yum -y remove  java-1.6.0-openjdk-1.6.0.0-1.41.1.10.4.el6.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p> 继续用第一步的命令检测，或者用：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> gcj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> 然后再用上面删除的方法把libgcj和java-gcj的文件删掉.</p>
</ol>

<h5 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h5><ol>
<li>获取文件权限</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> -R <span class="token number">777</span>    /storage/sdc-data/software/jdk-8u65-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li>安装JDK</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh  /storage/sdc-data/software/jdk-8u65-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该命令默认将jdk安装到了/usr/java目录下。</p>
<li>移动安装目录</li>

<p> 将jdk安装目录，重命名并且移动到目录/usr/local/下。并查看是否移动成功。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /usr/java/jdk1.8.0_45 /usr/local/jdk1.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <li>rpm包的卸载</li>

<p>   输入命令查看rpm包安装信息，如果第一条未出现信息，可以使用第二条命令查看，如果都没  有可能是未安装或者是tar包安装的<br>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  我用上述rpm包安装之后，用命令查看，提示如下：<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master100 local<span class="token punctuation">]</span><span class="token comment"># rpm -qa | grep jdk</span>
jdk1.8-1.8.0_181-fcs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  知道安装的rpm包名后就可以卸载了，卸载命令如下：<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -e --nodeps jdk1.8-1.8.0_181-fcs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  卸载完成后删除环境变量<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile
<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br> <p></p></ol><p></p>
<h5 id="tar包安装"><a href="#tar包安装" class="headerlink" title="tar包安装"></a>tar包安装</h5> <ol>

 <li>下载 jdk-8u231-linux-x64.tar.gz</li>

 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://download.oracle.com/otn/java/jdk/8u231-b11/5b13a193868b4bf28bcb45c792fce896/jdk-8u231-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <li>解压文件，命令如下，输入后会出现一长串的提示：</li>

 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf /usr/local/jdk-8u231-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

 <li>解压后文件夹名为：jdk1.8.0_231</li>

<p> 在这里修改一下文件名，将jdk1.8.0_231改成java，方便我们后面配置环境变量，在这也可以不修改，在配置环境变量时要注意文件名不能写错，修改文件名命令如下：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">mv</span> /usr/local/jdk1.8.0_231 /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

 <li>tar包的卸载</li>

<p> 将安装包删除，然后把配置文件内添加的环境变量删除</p>
<p> 删除安装包的命令如下：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> 修改配置文件的方法和上述配置环境变量一样</p>
 </ol>

<h4 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h4> <ol>

  <li>用vi命令 打开文件,打开后默认是命令模式,输入a或i可进入编辑模式</li>

  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <li>在文件最后配置如下变量,编辑完成按ESC键退出编辑,然后输入:wq或者:x保存退出.</li>

  <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">set</span> <span class="token attr-value">java environment</span>
<span class="token attr-name">JAVA_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/java/jdk1.8.0_231        </span>
<span class="token attr-name">JRE_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/java/jdk1.8.0_231/jre     </span>
<span class="token attr-name">CLASS_PATH</span><span class="token punctuation">=</span><span class="token attr-value">.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span>
<span class="token attr-name">PATH</span><span class="token punctuation">=</span><span class="token attr-value">$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span>
<span class="token attr-name">export</span> <span class="token attr-value">JAVA_HOME JRE_HOME CLASS_PATH PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

  <li>然后输入source /etc/profile命令，使配置文件生效。</li>

   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

   <li>建立软连接</li>

<p>   <code>tar形式</code></p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/java/jdk1.8.0_231/bin/java /usr/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <li>检测配置是否成功</li>

   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  </ol>

<p>  <code>有问题参考：</code><a href="/post/4824a74d.html" title="linux之使用alternatives 切换Java版本">linux之使用alternatives 切换Java版本</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 打包将 system 的文件添加到 war 中</title>
    <url>/post/63dee017.html</url>
    <content><![CDATA[<h4 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h4><div class="note info no-icon"><p>   在个人的工作中使用了百度的编辑器的jar文件，但是在阿里云的maven镜像中是没有这个文件的，以前自己的私服里面有这个文件。<br>后面使用，<scope>system</scope> 添加后发现不能打包的war文件中。<br>对于国内的互联网的资料，我个人的意见是能用 English 的还是用这样的方式去查询吧。</p>
</div>

<a id="more"></a>

<h4 id="基础姿势"><a href="#基础姿势" class="headerlink" title="基础姿势"></a>基础姿势</h4><div class="note info no-icon"><p>个人在网络上寻找到的资料很多都是使用 spring-boot-maven-plugin 的 plugin ，首先我们来了解下作用域：</p>
<ul>
<li>compile 默认的scope，表示 dependency 都可以在生命周期中使用。而且，这些dependencies 会传递到依赖的项目中。适用于所有阶段，会随着项目一起发布</li>
<li>provided 跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet AP和一些Java EE APIs。这个scope 只能作用在编译和测试时，同时没有传递性。</li>
<li>runtime 表示dependency不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段。</li>
<li>test 表示dependency作用在测试时，不作用在运行时。 只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li>
<li>system 跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。</li>
</ul>
</div>

<br>

<blockquote>
<p>下面添加一个解决依赖冲突的办法，这个是题外话。</p>
</blockquote>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 这里是举个栗子，我们在添加别人写好的工具类的时候，会自动依赖很多jar，并且和项目本身的jar有冲突，用这个可以解决。其他是本地一定有引用这个jar文件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><blockquote>
<p>这边先给出spring-boot-maven-plugin的配置，至于能不能将本地 jar 打入 war 中自己测试（实践出真知）：</p>
</blockquote>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>以下是我本地使用的百度的UE编辑器的jar</p>
</blockquote>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 百度的编辑器，这个在自己的私服上面，如果要使用的话需要配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ueditor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${project.basedir}/libs/ueditor-1.1.2.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 记得这个地方要添加版本的，反正我很奇怪没有添加版本是正常运行了 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webResources</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.basedir}/libs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>WEB-INF/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webResources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>linux之使用alternatives 切换Java版本</title>
    <url>/post/4824a74d.html</url>
    <content><![CDATA[<p> xception in thread “main” java.lang.UnsupportedClassVersionError: M : Unsupported major.minor version</p>
<p>在linux上编译的java程序，在运行的时候报这个错误。</p>
<a id="more"></a>

<p>经过查找原来是javac的版本和java的版本不一致导致的，</p>
<p>因为我机器上安装了系统自带的java-1.5.0-gcj和1.7.0的openjdk，另外我还自己安装了1.8.0的Oracle 官方的jdk</p>
<p>导致编译器的版本和运行器的版本不一致。</p>
<p>解决这个问题的方法是使用alternatives 切换默认的java命令</p>
<p>这个工具的大概原理是</p>
<p>在/usr/bin目录下创建一个符号链接，指向/etc/alternatives/ 下的的文件，而该文件依然是一个符号链接，举个栗子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 mec<span class="token punctuation">]</span><span class="token comment"># ll /usr/bin/java</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">22</span> <span class="token number">4</span>月  <span class="token number">16</span> <span class="token number">16</span>:06 /usr/bin/java -<span class="token operator">&gt;</span> /etc/alternatives/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 mec<span class="token punctuation">]</span><span class="token comment"># ll  /etc/alternatives/java</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">26</span> <span class="token number">4</span>月  <span class="token number">16</span> <span class="token number">16</span>:06 /etc/alternatives/java -<span class="token operator">&gt;</span> /usr/java/default/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>/etc/alternatives/java会指向最终的可执行文件，如果你有3个版本的java</p>
<p>就需要运行 </p>
<pre class="line-numbers language-none"><code class="language-none">[root@node1 mec]# alternatives --config java

共有 3 个程序提供“java”。

  选择    命令
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
*  2           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java
 + 3           /usr/java/default/bin/java

按 Enter 来保存当前选择[+]，或键入选择号码：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后选择你想要选择的选项保存就好了</p>
<p>如果这个列表里面没有你想要的而且已经安装了的程序，就需要添加 命令为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alternatives --install /usr/bin/java java /usr/java/default/bin/java <span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个命令实际操作的是 /var/lib/alternatives目录下对应的文件</p>
<p>alternatives的安装删除显示等操作都是通过读取和修改这个目录下的文件实现的，而且是文本文件，感兴趣的可以取阅读一下</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven打包跳过test测试类</title>
    <url>/post/454608c3.html</url>
    <content><![CDATA[<h3 id="记录一下，有两种方式："><a href="#记录一下，有两种方式：" class="headerlink" title="记录一下，有两种方式："></a>记录一下，有两种方式：</h3><ol>
<li><p>传统方式</p>
<p>命令带上参数 <code>mvn install -Dmaven.test.skip=true</code> 即可</p>
<a id="more"></a>
</li>
<li><p>plugin方式</p>
<p>在 pom 文件中加入一个 plugin</p>
</li>
</ol>
   <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Meting漂亮的背景音乐播放器</title>
    <url>/post/c1dab809.html</url>
    <content><![CDATA[<div class="note success no-icon"><p> 以前就很想给网站加上一个背景音乐播放器！并且这个播放器要简洁大气，Meting完美的阐释了这句话！</p>
</div>

<img data-src="/post/c1dab809/meting.png" class="" title="Meting">

<a id="more"></a>

<!-- require APlayer -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>
<!-- require MetingJS -->
<script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script>

<p><meting-js server="netease" type="playlist" list-folded="true" theme="#eb7aab" id="14721111"><br></meting-js></p>
<p>  在Github的开源地址：<a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a></p>
<p>  如果你想在你的网站上添加Meting你可以这么做，找到一个公共的页面在底部添加上下面的代码:</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meting-js</span> <span class="token attr-name">server</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>netease<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playlist<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2287227122<span class="token punctuation">"</span></span> <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>random<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#eb7aab<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meting-js</span><span class="token punctuation">&gt;</span></span>



<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/meting@2.0.1/dist/Meting.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> meting_api <span class="token operator">=</span> <span class="token string">'https://service-opb3o3ky-1251733603.gz.apigw.tencentcs.com/release/Meting?server=:server&amp;type=:type&amp;id=:id&amp;r=:r'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meting-js</span> <span class="token attr-name">auto</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://music.163.com/#/playlist?id=2287227122<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>random<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0073aa<span class="token punctuation">"</span></span> <span class="token attr-name">list-folded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meting-js</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<p>  这样你的网站就会有一个在左下角收缩的播放器了！如果你想换歌单可以在meting-js标签中修改id属性！这样就完成了是不是很简单！</p>
<p><meting-js auto="https://music.163.com/#/playlist?id=2287227122" order="random" theme="#0073aa" list-folded="true"></meting-js></p>
<br>

<blockquote>
<p>其他播放器<br><a href="https://yy.mosq.cn/">漫音乐播放器</a><br><a href="https://player.hexiongbiao.cn/">宅音乐播放器</a></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Meting</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下mongo启动关闭重启方法</title>
    <url>/post/91eed2.html</url>
    <content><![CDATA[<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>  启动<code>mongodb</code>首先要指定mongo的<code>数据</code>目录和<code>日志</code>文件路径，如:  <code>/data/mongodb/</code>,<code>/var/log/mongodb/mongodb.log</code><br>  启动命令： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongdb/bin/mongod -port <span class="token number">27017</span> --dbpath /data/mongodb/ --logpath /var/mongodb/mongodb.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a id="more"></a>

<h4 id="通过配置文件配置："><a href="#通过配置文件配置：" class="headerlink" title="通过配置文件配置："></a>通过配置文件配置：</h4><p>  <code>vim mongodb.conf </code>   </p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#数据库路径</span>
<span class="token attr-name">dbpath</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/mongodb/data/</span>

<span class="token comment">#日志输出文件路径</span>
<span class="token attr-name">logpath</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/mongodb/log/mongodb.log</span>

<span class="token comment">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span>
<span class="token attr-name">logappend</span><span class="token punctuation">=</span><span class="token attr-value">true</span>

<span class="token comment">#启用日志文件，默认启用</span>
<span class="token attr-name">journal</span><span class="token punctuation">=</span><span class="token attr-value">true</span>

<span class="token comment">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span>
<span class="token attr-name">quiet</span><span class="token punctuation">=</span><span class="token attr-value">false</span>

<span class="token comment">#是否后台启动，有这个参数，就可以实现后台运行</span>
<span class="token attr-name">fork</span><span class="token punctuation">=</span><span class="token attr-value">true</span>

<span class="token comment">#端口号 默认为27017</span>
<span class="token attr-name">port</span><span class="token punctuation">=</span><span class="token attr-value">27017</span>

<span class="token comment">#远程连接</span>
<span class="token attr-name">bind_ip</span> <span class="token punctuation">=</span> <span class="token attr-value">0.0.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  启动命令： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/loca/mongodb/bin/mongod -f mongodb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><ol>
<li> 使用<font color="LightCoral" size="4"><b>--fork</b></font> 选项将会通知 mongod 在后台运行   </li> 

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongodb/bin/mongod  -port <span class="token number">10001</span> --dbpath /data/mongodb/ --logpath /var/mongodb/mongodb.log --fork  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<li> 使用<font color="LightCoral" size="4"><b>&amp;</b></font>后台启动      </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongodb/bin/mongod  -port <span class="token number">10001</span> --dbpath /data/mongodb/ --logpath /var/mongodb/mongodb.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><ol>
<li> pkill mongod</li>

<li> 进入mongo shell，运行： </li>

<pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span><span class="token function">shuidownServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>连接 MySQL 8.0 时，加密方式不兼容的解决方法</title>
    <url>/post/170d9336.html</url>
    <content><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><div class="note info no-icon"><p>报错如下： “Authentication plugin ‘caching_sha2_password’ cannot be loaded”。</p>
</div>

<p><escape><a id="more"></a></escape></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><div class="note info no-icon"><p>问题的原因：是从<code>MySQL8.0 </code>开始，默认的加密规则使用的是 <code>caching_sha2_password</code>。</p>
</div>


<ol>
<li>首先找到当前数据库用户root的加密规则</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span> 
mysql<span class="token operator">&gt;</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> plugin <span class="token keyword">from</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<img data-src="/post/170d9336/mysqlpassword1.png" class="" title="USER">

<ol start="2">
<li>修改加密规则为“mysql_native_password”</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code>注： password 替换为 root 的密码； 或者直接更新这一行 pluggin字段 的值为 “mysql_native_password”</code></p>
<p>  修改my.cnf配置文件，加入</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  default-authentication-plugin=mysql_native_password</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  但是这个配置参数只对新的用户起作用，对于老的，比如root那就要重新设置一下密码</p>
<p>  对与那个用户使用了哪种认证插件，你可以去mysql的用户表去查看plugin字段</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
<span class="token keyword">use</span> mysql
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  接着我们修改root的认证插件</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  之后就好了.</p>
<p>  完成后效果如下：</p>
<img data-src="/post/170d9336/mysqlpassword2.png" class="" title="PASS">

<h3 id="更为优雅的解决方案"><a href="#更为优雅的解决方案" class="headerlink" title="更为优雅的解决方案"></a>更为优雅的解决方案</h3><p>   又重新回到了 MySQL 官方在docker的仓库中，仔细的阅读了一遍官方的说明。<br> 其实，我们在启动MySQL 容器的时候，是可以修改一些设置的。主要有2种方式。</p>
<ol>
<li>自定义配置文件，并 mount 到 container里。这样在MySQL启动时，会加载我们的配置文件。 </li>
<li>启动MySQL容器是传入CMD，通过命令修改默认加密规则（下面绿色部分）</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -e <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>weather_db -p <span class="token number">3307</span>:3306 --name test-mysql --restart always -v  /home/ct/mysql/data:/var/lib/mysql  
mysql:8.0.12  --default-authentication-plugin<span class="token operator">=</span>mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6 安装 MySQL 8.0.+</title>
    <url>/post/577cb4e8.html</url>
    <content><![CDATA[<h3 id="一、Linux下MySQL安装-YUM"><a href="#一、Linux下MySQL安装-YUM" class="headerlink" title="一、Linux下MySQL安装(YUM)"></a>一、Linux下MySQL安装(YUM)</h3><h4 id="1、检查并删除已经安装的MySql"><a href="#1、检查并删除已经安装的MySql" class="headerlink" title="1、检查并删除已经安装的MySql"></a>1、检查并删除已经安装的MySql</h4><ul>
<li>检查MariaDB</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mariadb
mariadb-server-5.5.60-1.el7_5.x86_64
mariadb-5.5.60-1.el7_5.x86_64
mariadb-libs-5.5.60-1.el7_5.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><escape><a id="more"></a></escape></p>
<ul>
<li>删除mariadb</li>
</ul>
<p>  如果不存在（上面检查结果返回空）则跳过步骤</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -e --nodeps mariadb-server
shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -e --nodeps mariadb
shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -e --nodeps mariadb-libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>  其实yum方式安装是可以不用删除mariadb的，安装MySQL会覆盖掉之前已存在的mariadb</p>
<ul>
<li>检查MySQL</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>删除MySQL</li>
</ul>
<p>  如果不存在（上面检查结果返回空）则跳过步骤</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -e --nodeps xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -e --nodeps <span class="token variable"><span class="token variable">`</span><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2、添加MySQL-Yum-Repository"><a href="#2、添加MySQL-Yum-Repository" class="headerlink" title="2、添加MySQL Yum Repository"></a>2、添加MySQL Yum Repository</h4><blockquote>
<p>从CentOS 7开始，MariaDB成为Yum源中默认的数据库安装包。<br>也就是说在CentOS 7及以上的系统中使用yum安装MySQL默认安装的会是MariaDB（MySQL的一个分支）。<br>如果想安装官方MySQL版本，需要使用MySQL提供的Yum源。</p>
</blockquote>
<ul>
<li>下载MySQL源</li>
</ul>
<p>  官网地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p>
<ul>
<li>查看系统版本：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release -a   查看系统版本
getconf LONG_BIT 查看系统位数

查看系统版本
<span class="token function">cat</span> /etc/redhat-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>选择对应的版本进行下载</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://repo.mysql.com//mysql80-community-release-el6-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>安装MySQL源</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh  mysql80-community-release-el6-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>检查是否安装成功</li>
</ul>
<p>  执行成功后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code>及 <code>mysql-community-source.repo</code></p>
<p>  并且通过yum repolist可以看到mysql相关资源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span>
<span class="token operator">!</span>mysql-connectors-community/x86_64 MySQL Connectors Community                <span class="token number">108</span>
<span class="token operator">!</span>mysql-tools-community/x86_64      MySQL Tools Community                      <span class="token number">90</span>
<span class="token operator">!</span>mysql80-community/x86_64          MySQL <span class="token number">8.0</span> Community Server                <span class="token number">113</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3、选择MySQL版本"><a href="#3、选择MySQL版本" class="headerlink" title="3、选择MySQL版本"></a>3、选择MySQL版本</h4><blockquote>
<p>使用MySQL Yum Repository安装MySQL，<br>默认会选择当前最新的稳定版本，例如通过上面的MySQL源进行安装的话，默安装会选择MySQL 8.0版本，<br>如果就是想要安装该版本，可以直接跳过此步骤，<br>如果不是，比如我这里希望安装MySQL5.7版本，就需要“切换一下版本”：</p>
</blockquote>
<ul>
<li>查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>切换版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --disable mysql80-community
shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --enable mysql57-community<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  除了使用yum-config-manager之外，还可以直接编辑<code>/etc/yum.repos.d/mysql-community.repo</code>文件</p>
<p>  enabled=0禁用</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysql80-community]
<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">MySQL 8.0 Community Server</span>
<span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://repo.mysql.com/yum/mysql-8.0-community/el/7/$basearch/</span>
<span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  enabled=1启用</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Enable to use MySQL 5.7</span>
[mysql57-community]
<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">MySQL 5.7 Community Server</span>
<span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span>
<span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>检查当前启用的MySQL仓库</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  如果同时启用了多个仓库，安装时会选择最新版本</p>
<h4 id="4、安装MySQL"><a href="#4、安装MySQL" class="headerlink" title="4、安装MySQL"></a>4、安装MySQL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  该命令会安装MySQL服务器 (mysql-community-server) 及其所需的依赖、相关组件，包括mysql-community-client、mysql-community-common、mysql-community-libs等</p>
<p>  如果带宽不够，这个步骤时间会比较长，请耐心等待~</p>
<p>  或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="5、查询是否安装成功"><a href="#5、查询是否安装成功" class="headerlink" title="5、查询是否安装成功"></a>5、查询是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqladmin -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="6、启动MySQL"><a href="#6、启动MySQL" class="headerlink" title="6、启动MySQL"></a>6、启动MySQL</h4><p>  启动前<code>最好</code>修改<code>/etc/my.cnf</code>配置文件</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">vi</span> <span class="token attr-value">/etc/my.cnf</span>

 添加：

<span class="token comment"># leeze</span>
<span class="token attr-name">port</span> <span class="token punctuation">=</span> <span class="token attr-value">3306</span>
<span class="token attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span>
<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
<span class="token attr-name">default_authentication_plugin</span><span class="token punctuation">=</span><span class="token attr-value">mysql_native_password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> <span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>其他命令：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld status
<span class="token function">service</span> mysqld stop
<span class="token function">service</span> mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="7、修改密码"><a href="#7、修改密码" class="headerlink" title="7、修改密码"></a>7、修改密码</h4><ul>
<li>初始密码</li>
</ul>
<p>  MySQL第一次启动后会创建超级管理员账号root@localhost，初始密码存储在日志文件中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>修改默认密码</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>修改密码</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Cn@12345678'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <code>这里会遇到一个问题</code>，mysql默认的密码规则必须包含特殊字符、大写字母、小写字母、数字、一定长度<br>  并且对密码要求严格，至少8位，包含大小写等，</p>
<p>  密码策略的所有参数</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.policy%'</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.length%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  若想设置成123456，则要以下两条命令：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">#设置为弱口令</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">#密码最小长度为1</span>

<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="8、允许root远程访问"><a href="#8、允许root远程访问" class="headerlink" title="8、允许root远程访问"></a>8、允许root远程访问</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#任何主机</span>
mysql<span class="token operator">&gt;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'root'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment">#指定主机</span>
mysql<span class="token operator">&gt;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'xxxx'</span>@’xx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xx’ IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'xxxx'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment"># 然后刷新权限</span>
mysql<span class="token operator">&gt;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>首先查看用户表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>plugin <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  发现登录主机是localhost，当然不能登录，把root用户的localhost设置为%，这样任意主机都可以连接。</p>
<p>  修改连接权限(%表示所有ip，如果只指定某台电脑，则改成相应的ip)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>更改加密方式</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> plugin<span class="token operator">=</span><span class="token string">'mysql_native_password'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>授权远程连接</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> root<span class="token variable">@'%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>执行刷新权限</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>为MySQL数据库分配指定用户</title>
    <url>/post/409d24a5.html</url>
    <content><![CDATA[<blockquote>
<p>日常语句</p>
</blockquote>
<p><escape><a id="more"></a></escape></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> kanyme identified <span class="token keyword">by</span> <span class="token string">'kanyme'</span><span class="token punctuation">;</span>

<span class="token comment">-- 授权</span>
<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> kanyme_db<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> kanyme<span class="token variable">@'%'</span><span class="token punctuation">;</span>
<span class="token comment">-- 刷新权限</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看权限</span>
<span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'kanyme'</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改密码</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> password <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'kanyme_new'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'kanyme'</span> <span class="token operator">and</span> host <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>

<span class="token comment">-- 新版</span>
<span class="token keyword">alter</span> <span class="token keyword">user</span><span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'kanyme_new'</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除用户</span>
<span class="token keyword">drop</span> <span class="token keyword">user</span> kanyme<span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改Root用户密码</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span><span class="token string">"kanyme_new"</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<br>
<div class="note info no-icon"><p>mysql 5.7.9 之后取消了password 函数，authentication_string=password(“123456”) 会报错</p>
</div><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的基本配置--示例</title>
    <url>/post/a81ceb57.html</url>
    <content><![CDATA[<h3 id="配置文件语法"><a href="#配置文件语法" class="headerlink" title="配置文件语法"></a>配置文件语法</h3><p>  nginx是模块化的系统，整个系统是分成一个个模块的。每个模块负责不同的功能。如果不用某个模块的话，也可以去掉，可以让nginx更加轻量化。</p>
<p>  要用的模块已经被编译进nginx了，成为nginx的一部分了，那要怎么用这些模块呢？那就得通过配置文件，这跟传统的linux服务差不多，都是通过配置文件来改变功能。nginx的模块是通过一个叫指令(directive)的东西来用的。整个配置文件都是由指令来控制的。nginx也有自己内置的指令，比如events, http, server, 和 location等，下面会进行详细解释。</p>
<a id="more"></a>

<p>  如果是包管理方式安装的，配置文件默认在<code>/etc/nginx/nginx.conf</code>；如果是源码安装的，配置文件则在<code>configure</code>的时候指定的<code>--conf-path</code>下。</p>
<p>  nginx的配置文件分为两类。一类是主配置文件，用来设定nginx的基本和通用配置。域名的配置文件放在指定的目录下，避免主配置文件逻辑过于复杂，也方便对域名的配置文件进行管理。</p>
<h3 id="配置文件变量详解"><a href="#配置文件变量详解" class="headerlink" title="配置文件变量详解"></a>配置文件变量详解</h3><table>
<tbody><tr>
<th>变量</th>
<th>解释</th>
</tr>
<tr>
<td>$remote_addr</td>
<td>获取客户端ip</td>
</tr>
<tr>
<td>$binary_remote_addr</td>
<td>客户端ip（二进制)</td>
</tr>
<tr>
<td>$remote_port</td>
<td>客户端port，如：50472</td>
</tr>
<tr>
<td>$remote_user</td>
<td>已经经过Auth Basic Module验证的用户名</td>
</tr>
<tr>
<td>$host</td>
<td>请求主机头字段，否则为服务器名称，如:blog.xiaosige.com</td>
</tr>
<tr>
<td>$request</td>
<td>用户请求信息，如：GET ?a=1&amp;b=2 HTTP/1.1</td>
</tr>
<tr>
<td>$request_filename</td>
<td>当前请求的文件的路径名，由root或alias和URI request组合而成，如：/2013/81.html</td>
</tr>
<tr>
<td>$status</td>
<td>请求的响应状态码,如:200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>响应时送出的body字节数数量。即使连接中断，这个数据也是精确的,如：40</td>
</tr>
<tr>
<td>$content_length</td>
<td>等于请求行的“Content_Length”的值</td>
</tr>
<tr>
<td>$content_type</td>
<td>等于请求行的“Content_Type”的值</td>
</tr>
<tr>
<td>$http_referer</td>
<td>引用地址</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>客户端agent信息,如：Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.76 Safari/537.36</td>
</tr>
<tr>
<td>$args</td>
<td>与$query_string相同 等于当中URL的参数(GET)，如a=1&amp;b=2</td>
</tr>
<tr>
<td>$document_uri</td>
<td>与uri相同 这个变量指当前的请求URI，不包括任何参数(见args) 如:/2013/81.html</td>
</tr>
<tr>
<td>$document_root</td>
<td>针对当前请求的根路径设置值</td>
</tr>
<tr>
<td>$hostname</td>
<td>如：centos53.localdomain</td>
</tr>
<tr>
<td>$http_cookie</td>
<td>客户端cookie信息</td>
</tr>
<tr>
<td>$cookie_COOKIE</td>
<td>cookie COOKIE变量的值</td>
</tr>
<tr>
<td>$is_args</td>
<td>如果有$args参数，这个变量等于”?”，否则等于”"，空值，如?</td>
</tr>
<tr>
<td>$limit_rate</td>
<td>这个变量可以限制连接速率，0表示不限速</td>
</tr>
<tr>
<td>$query_string</td>
<td>与$args相同 等于当中URL的参数(GET)，如a=1&amp;b=2</td>
</tr>
<tr>
<td>$request_body</td>
<td>记录POST过来的数据信息</td>
</tr>
<tr>
<td>$request_body_file</td>
<td>客户端请求主体信息的临时文件名</td>
</tr>
<tr>
<td>$request_method</td>
<td>客户端请求的动作，通常为GET或POST,如：GET</td>
</tr>
<tr>
<td>$request_uri</td>
<td>包含请求参数的原始URI，不包含主机名，如：/2013/81.html?a=1&amp;b=2</td>
</tr>
<tr>
<td>$scheme</td>
<td>HTTP方法（如http，https）,如：http</td>
</tr>
<tr>
<td>$uri</td>
<td>这个变量指当前的请求URI，不包括任何参数(见$args) 如:/2013/81.html</td>
</tr>
<tr>
<td>$request_completion</td>
<td>如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)，如：OK</td>
</tr>
<tr>
<td>$server_protocol</td>
<td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1，如：HTTP/1.1</td>
</tr>
<tr>
<td>$server_addr</td>
<td>服务器IP地址，在完成一次系统调用后可以确定这个值</td>
</tr>
<tr>
<td>$server_name</td>
<td>服务器名称，如：blog.xiaosige.com</td>
</tr>
<tr>
<td>$server_port</td>
<td>请求到达服务器的端口号,如：80</td>
</tr>
</tbody></table>

<h3 id="主配置文件总览"><a href="#主配置文件总览" class="headerlink" title="主配置文件总览"></a>主配置文件总览</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#定义运行nginx的用户</span>
<span class="token keyword">user</span> nobody<span class="token punctuation">;</span>
<span class="token comment">#启动进程,通常设置成和cpu的数量相等</span>
<span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span>
 
<span class="token comment">#全局错误日志及PID文件</span>
<span class="token comment">#日志的级别debug info notice warn error crit alert emerg 递增--&gt;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>
 
<span class="token comment">#pid        logs/nginx.pid;</span>
 
<span class="token comment">#工作模式及连接数上限</span>
<span class="token keyword">events</span> <span class="token punctuation">{</span>
    <span class="token comment">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span>
    <span class="token comment">#仅用于linux2.6以上内核,可以大大提高nginx的性能</span>
    <span class="token keyword">use</span>   epoll<span class="token punctuation">;</span> 
 
    <span class="token comment">#单个后台worker process进程的最大并发链接数    </span>
    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>
 
    <span class="token comment"># 并发总数是 worker_processes 和 worker_connections 的乘积</span>
    <span class="token comment"># 即 max_clients = worker_processes * worker_connections</span>
    <span class="token comment"># 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span>
    <span class="token comment"># 为什么上面反向代理要除以4，应该说是一个经验值</span>
    <span class="token comment"># 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span>
    <span class="token comment"># worker_connections 值的设置跟物理内存大小有关</span>
    <span class="token comment"># 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span>
    <span class="token comment"># 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span>
    <span class="token comment"># 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span>
    <span class="token comment"># $ cat /proc/sys/fs/file-max</span>
    <span class="token comment"># 输出 34336</span>
    <span class="token comment"># 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span>
    <span class="token comment"># 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span>
    <span class="token comment"># 使得并发总数小于操作系统可以打开的最大文件数目</span>
    <span class="token comment"># 其实质也就是根据主机的物理CPU和内存进行配置</span>
    <span class="token comment"># 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span>
    <span class="token comment"># ulimit -SHn 65535</span>
 
<span class="token punctuation">}</span>
 
<span class="token comment">#负责HTTP服务器相关属性的配置 </span>
<span class="token keyword">http</span> <span class="token punctuation">{</span>
    <span class="token comment">#设定mime类型,类型由mime.type文件定义</span>
    <span class="token keyword">include</span>    mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>
    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>
    <span class="token comment">#设定日志格式</span>
    <span class="token punctuation">(</span>默认格式<span class="token punctuation">)</span>
    <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>
                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>
                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>
 
    <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>
 
    <span class="token comment">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span>
    <span class="token comment">#对于普通应用，必须设为 on,</span>
    <span class="token comment">#如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span>
    <span class="token comment">#以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span>
    <span class="token keyword">sendfile</span>     on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
 
    <span class="token comment">#连接超时时间</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token keyword">tcp_nodelay</span>     on<span class="token punctuation">;</span>
    <span class="token comment">#包含/etc/nginx/sites-enabled下的所有以.conf结尾的配置文件</span>
    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>sites<span class="token operator">-</span>enabled<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>
    <span class="token comment">#包含/etc/nginx/conf.d下的所有配置文件</span>
    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>
    <span class="token comment">#开启gzip压缩</span>
    <span class="token keyword">gzip</span>  on<span class="token punctuation">;</span>
    <span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]."</span><span class="token punctuation">;</span>
 
    <span class="token comment">#设定请求缓冲</span>
    <span class="token keyword">client_header_buffer_size</span>    <span class="token number">128</span>k<span class="token punctuation">;</span>
    <span class="token keyword">large_client_header_buffers</span>  <span class="token number">4</span> <span class="token number">128</span>k<span class="token punctuation">;</span>
 
    <span class="token comment">#负载均衡模块 weight(权重)模式  默认模式</span>
    <span class="token keyword">upstream</span> project1<span class="token punctuation">{</span>
        <span class="token comment">#按权重将请求代理至指定服务的指定端口，weight数值越大接受的请求越多</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">82</span> weight<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">83</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> blog<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">84</span> weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 ip_hash模式</span>
    <span class="token keyword">upstream</span> project2<span class="token punctuation">{</span>
        <span class="token comment">#按照ip的hash结果分配服务器，该ip会固定访问同一个后端服务器，可以解决动态网页存在的session共享问题</span>
        <span class="token keyword">ip_hash</span>；
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span>port1 <span class="token punctuation">;</span>
        <span class="token comment"># 当前服务暂时不参加负载均衡</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>com<span class="token punctuation">:</span>port1 down<span class="token punctuation">;</span>
        <span class="token comment"># 作为预留备份机器，当其它机器都忙或者故障的时候才会启用</span>
        <span class="token keyword">server</span> blog<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span>port1 backup<span class="token punctuation">;</span>
        <span class="token comment"># 可定义最大失败次数和失败时间</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span>port1 max_fails<span class="token operator">=</span><span class="token number">3</span>  fail_timeout<span class="token operator">=</span><span class="token number">20</span>s<span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 fair模式  需要安装upstream_fair模块</span>
    <span class="token keyword">upstream</span> project3<span class="token punctuation">{</span>
        fair<span class="token punctuation">;</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">8082</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 url_hash模式  需要安装url_hash模块</span>
    <span class="token keyword">upstream</span> project4<span class="token punctuation">{</span>
        <span class="token keyword">server</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.10</span><span class="token punctuation">:</span><span class="token number">7777</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.11</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token punctuation">;</span>
        hash <span class="token variable">$request_uri</span><span class="token punctuation">;</span>
        hash_method crc32<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#设定虚拟主机配置</span>
    <span class="token keyword">server</span> <span class="token punctuation">{</span>
        <span class="token comment">#侦听80端口</span>
        <span class="token keyword">listen</span>    <span class="token number">80</span><span class="token punctuation">;</span>
        <span class="token comment">#定义使用 www.do90.cn访问</span>
        <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>do90<span class="token punctuation">.</span>cn<span class="token punctuation">;</span>
 
        <span class="token comment">#定义服务器的默认网站根目录位置</span>
        <span class="token keyword">root</span> html<span class="token punctuation">;</span>
 
        <span class="token comment">#设定本虚拟主机的访问日志</span>
        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>nginx<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>
 
        <span class="token comment">#默认请求</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
            
            <span class="token comment">#定义首页索引文件的名称</span>
            <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>   
 
        <span class="token punctuation">}</span>
 
        <span class="token comment"># 定义错误提示页面</span>
        <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#静态文件，nginx自己处理</span>
        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">^</span><span class="token operator">/</span><span class="token punctuation">(</span>images<span class="token operator">|</span>javascript<span class="token operator">|</span>js<span class="token operator">|</span>css<span class="token operator">|</span>flash<span class="token operator">|</span>media<span class="token operator">|</span>static<span class="token punctuation">)</span><span class="token operator">/</span> <span class="token punctuation">{</span>
            
            <span class="token comment">#过期30天，静态文件不怎么更新，过期可以设大一点，</span>
            <span class="token comment">#如果频繁更新，则可以设置得小一点。</span>
            <span class="token keyword">expires</span> <span class="token number">30</span>d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span>
        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>
            <span class="token keyword">fastcgi_pass</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>
            <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
            <span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
            <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#禁止访问 .htxxx 文件</span>
            <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">.</span>ht <span class="token punctuation">{</span>
            <span class="token keyword">deny</span> all<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="域名配置文件"><a href="#域名配置文件" class="headerlink" title="域名配置文件"></a>域名配置文件</h3><p>  在主配置文件中会有include参数，include /etc/nginx/sites-enabled/*.conf;这个文件夹中的所有以.conf结尾的，都会被nginx作为配置文件。下方有几个例子。</p>
<ol>
<li><p>正常html访问</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span>
    <span class="token punctuation">{</span>
            <span class="token keyword">listen</span>    <span class="token number">80</span><span class="token punctuation">;</span>
            <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
              <span class="token keyword">index</span>   <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
              <span class="token keyword">root</span>  <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token punctuation">;</span>
          <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>jdnn_access<span class="token punctuation">.</span>log combined<span class="token punctuation">;</span>
          <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>jdnn_error<span class="token punctuation">.</span>log warn<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置php请求转发</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>
    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span> m<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
    <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span><span class="token punctuation">;</span>
    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">/</span>$<span class="token number">1</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span>\<span class="token punctuation">.</span>php<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$
    <span class="token punctuation">{</span>
                <span class="token keyword">fastcgi_pass</span>  unix<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>php5<span class="token operator">-</span>fpm<span class="token punctuation">.</span>sock<span class="token punctuation">;</span>
                <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
                <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span>
                <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
                <span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>admin_access<span class="token punctuation">.</span>log combined<span class="token punctuation">;</span>
    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>admin_error<span class="token punctuation">.</span>log warn<span class="token punctuation">;</span>

    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span> http2<span class="token punctuation">;</span>
    <span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>fullchain<span class="token punctuation">.</span>pem<span class="token punctuation">;</span> 
    <span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>pkgame<span class="token punctuation">.</span>net<span class="token operator">/</span>privkey<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>options<span class="token operator">-</span><span class="token keyword">ssl</span><span class="token operator">-</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>
    <span class="token keyword">ssl_dhparam</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">-</span>dhparams<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置python后端请求转发</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>  
        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>  
        <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>  
            <span class="token keyword">root</span>   html<span class="token punctuation">;</span>
            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
            <span class="token keyword">include</span> uwsgi_params<span class="token punctuation">;</span><span class="token comment">#加载uWSGI配置参数</span>
            uwsgi_pass <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3031</span><span class="token punctuation">;</span><span class="token comment">#请求转发至”127.0.0.1:3031″端口上，即uWSGI服务器</span>
         <span class="token punctuation">}</span>  
         <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>www_access<span class="token punctuation">.</span>log combined<span class="token punctuation">;</span>
         <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>www_error<span class="token punctuation">.</span>log warn<span class="token punctuation">;</span>

       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx负载均衡的几种常见策略</title>
    <url>/post/e3076ab.html</url>
    <content><![CDATA[<p>  负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。<br>  简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</p>
<a id="more"></a>

<h3 id="RR-默认"><a href="#RR-默认" class="headerlink" title="RR(默认)"></a>RR(默认)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</span>

<span class="token keyword">upstream</span> test <span class="token punctuation">{</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">server</span> <span class="token punctuation">{</span>
　　<span class="token keyword">listen</span>       <span class="token number">81</span><span class="token punctuation">;</span>                                                         
　　<span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>                                               
　　<span class="token keyword">client_max_body_size</span> <span class="token number">1024</span>M<span class="token punctuation">;</span>

　　<span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
　　　　<span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>test<span class="token punctuation">;</span>
　　　　<span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><b><code>Remark:</code></b><br>  这里我配置了2台服务器，实际上也可能只有一台，只是端口不一样而已，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</span>

<span class="token keyword">upstream</span> test <span class="token punctuation">{</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span> weight<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">upstream</span> test <span class="token punctuation">{</span>
    <span class="token keyword">ip_hash</span><span class="token punctuation">;</span>
    <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
    <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><b><code>Remark:</code></b><br>  上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>
<h3 id="fair-第三方"><a href="#fair-第三方" class="headerlink" title="fair(第三方)"></a>fair(第三方)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配</span>

<span class="token keyword">upstream</span> backend <span class="token punctuation">{</span> 
        fair<span class="token punctuation">;</span> 
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="url-hash-第三方"><a href="#url-hash-第三方" class="headerlink" title="url_hash(第三方)"></a>url_hash(第三方)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">
<span class="token comment"># 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 </span>
<span class="token comment"># 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span>

<span class="token keyword">upstream</span> backend <span class="token punctuation">{</span> 
        hash <span class="token variable">$request_uri</span><span class="token punctuation">;</span> 
        hash_method crc32<span class="token punctuation">;</span> 
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>
        <span class="token keyword">server</span> localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过<code>fair</code>和<code>url_hash</code>需要<code>安装第三方模块</code>才能使用</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac正确的安装和使用nvm</title>
    <url>/post/c0a81ac4.html</url>
    <content><![CDATA[<h3 id="了解nvm"><a href="#了解nvm" class="headerlink" title="了解nvm"></a>了解nvm</h3><p>  目前主流的node版本管理工具有两种，nvm和n。两者差异挺大的。</p>
<p>  总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。</p>
<a id="more"></a>


<h3 id="认识nvm、node、npm"><a href="#认识nvm、node、npm" class="headerlink" title="认识nvm、node、npm"></a>认识nvm、node、npm</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol>

<li>nvm：nodejs 版本管理工具。</li>
  也就是说：一个 nvm 可以管理很多 node 版本和 npm 版本。

<p>  这个技术出现的原因， 是由于不同的项目node版本也不同，有的是5.0.1， 有的是6.3.2。 如果node出现版本不对，运行 某个应用时，很可能就会遇到各种莫名其妙的问题 。</p>
<li>nodejs：在项目开发时的所需要的代码库。</li>
<li>npm：nodejs 包管理工具。</li>
  在安装的 nodejs 的时候，npm 也会跟着一起安装，它是包管理工具。

<p>  npm 管理 nodejs 中的第三方插件。他的作用与Ruby中的 bundler及Java中的maven相同，都是对第三方依赖进行管理的。</p>
</ol>

<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>     nvm 管理 nodejs 和 npm 的版本</p>
<p>     npm 可以管理 nodejs 的第三方插件</p>
   <img data-src="/post/c0a81ac4/nvmMac001.png" class="" title="nvm、node、npm关系图">


<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  这里主要介绍mac的安装(linux可以参照),windows系统的话可以参考<a href="https://cnodejs.org/topic/5338c5db7cbade005b023c98">windows</a></p>
<h4 id="不推荐的安装方法"><a href="#不推荐的安装方法" class="headerlink" title="不推荐的安装方法"></a>不推荐的安装方法</h4><p>  一开始我是使用homebrew来安装的,安装命令如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> nvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装完后，为了让你可以直接在shell使用nvm指令，必须在你的<code> .bash_profile</code> 加入以下这行（习惯把设定放在.bashrc的人可以把以下的.bash_profile改成.bashrc）(注:如果没有这个文件,可以touch创建)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token variable"><span class="token variable">$(</span>brew --prefix nvm<span class="token variable">)</span></span>/nvm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  或者直接输入以下这行来加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"source <span class="token variable"><span class="token variable">$(</span>brew --prefix nvm<span class="token variable">)</span></span>/nvm.sh"</span> <span class="token operator">&gt;&gt;</span> .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  记得重新source你的 .bash_profile 来让设定生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">.</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  OK，以上就完成了nvm的安裝。</p>
<p>  我们来装一下 node v5.12.0</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装成功后,使用nvm use 来切换版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use v5.12.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如，出现错误如下:</p>
 <div class="note danger no-icon"><p>nvm is not compatible with the npm config “prefix” option: currently set to “/Users/fabian/.nvm/versions/node/v0.12.7”<br>Run <code>nvm use --delete-prefix v4.6.2</code> to unset it.</p>
</div>

<p>  所以只能安装提示,使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use --delete-prefix v4.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  成功切换。</p>
<p>  至于为什么用homebrew安装会出现上面的问题,可参考Github上的一个<a href="https://github.com/nvm-sh/nvm/issues/855">issue</a>。</p>
<p>  查看<a href="https://github.com/nvm-sh/nvm">nvm文档</a>发现:文档中Installation 那一小节倒数第二行有一句Homebrew installation is not supported.，由此可见，没事儿还是要多看看文档。</p>
<h4 id="推荐的安装方法"><a href="#推荐的安装方法" class="headerlink" title="推荐的安装方法"></a>推荐的安装方法</h4><h5 id="卸载已安装到全局的-node-npm"><a href="#卸载已安装到全局的-node-npm" class="headerlink" title="卸载已安装到全局的 node/npm"></a><strong><em>卸载已安装到全局的 node/npm</em></strong></h5><p>  如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>
<p>  node 命令在 <code>/usr/local/bin/node</code> ，</p>
<p>  npm 命令在全局 <code>node_modules</code> 目录中，具体路径为 <code>/usr/local/lib/node_modules/npm</code></p>
<p>  安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> -g --depth<span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span>

<span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/local/lib/node_modules <span class="token comment">#删除全局 node_modules 目录</span>
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/node <span class="token comment">#删除 node</span>
<span class="token builtin class-name">cd</span>  /usr/local/bin <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> -l <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"../lib/node_modules/"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$9</span>}'</span><span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span> <span class="token comment">#删除全局 node 模块注册的软链</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a><strong><em>安装 nvm</em></strong></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <code>如果报错</code>，解决办法：通过修改<mark> hosts </mark>解决此问题。</p>
<p>  查询真实IP，在 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询 raw.githubusercontent.com 的真实IP。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改hosts</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts

<span class="token comment">#添加如下内容：</span>
<span class="token number">199.232</span>.28.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  安装完成后请重新打开终端环境，Mac 下推荐使用 oh-my-zsh 代替默认的 bash shell。 安装完成后,发现使用 <strong><mark class="label danger">nvm install stable 安装node速度很慢</mark></strong> ,原因嘛,大概大家都知道我大天朝的国情。 接下来介绍如何使用国内镜像快速安装node: 把环境变量 <code>NVM_NODEJS_ORG_MIRROR</code>, 那么我建议你加入到<code> .bash_profile</code> 文件中:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nvm</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  然后你可以继续非常方便地安装各个版本的 node 了.</p>
<p><mark>查看</mark><font color="LightCoral" size="4"> node  </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm ls-remote     <span class="token comment"># 远端版本</span>
nvm <span class="token function">ls</span>            <span class="token comment"># 本地已安装的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p><mark>安装</mark><font color="LightCoral" size="4"> node </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> node                            <span class="token comment"># 安装最新版本</span>
nvm <span class="token function">install</span> <span class="token number">6.14</span>.4 <span class="token comment"># or 10.10.0, 8.9.1, etc # 安装指定版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p><mark>使用</mark><font color="LightCoral" size="4"> node </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use node    <span class="token comment"># 使用最新版本</span>
nvm use <span class="token number">12.13</span>.0 <span class="token comment"># 使用指定版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><mark>查看</mark><font color="LightCoral" size="4"> node  </font>版本 <em><mark class="label warning">安装位置</mark></em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">which</span> <span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用-cnpm-加速-npm"><a href="#使用-cnpm-加速-npm" class="headerlink" title="使用 cnpm 加速 npm"></a><strong><em>使用 cnpm 加速 npm</em></strong></h5><p>  同理 nvm , npm 默认是从国外的源获取和下载包信息, 不慢才奇怪. 可以通过简单的 —registry 参数, 使用国内的镜像 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> :</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org <span class="token function">install</span> koa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  于是屏幕又哗啦哗啦地一大片输出</p>
<div class="note default no-icon"><p>$ npm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> install koa<br>npm http GET <a href="https://registry.npm.taobao.org/koa">https://registry.npm.taobao.org/koa</a><br>npm http 200 <a href="https://registry.npm.taobao.org/koa">https://registry.npm.taobao.org/koa</a><br>…<br>npm http 200 <a href="https://registry.npm.taobao.org/negotiator">https://registry.npm.taobao.org/negotiator</a><br>npm http 200 <a href="https://registry.npm.taobao.org/keygrip">https://registry.npm.taobao.org/keygrip</a><br>koa<a href="/user/0">@0</a>.5.2 node_modules/koa<br>├── koa-compose<a href="/user/2">@2</a>.2.0<br>├── statuses<a href="/user/1">@1</a>.0.2<br>├── finished<a href="/user/1">@1</a>.1.1<br>├── escape-html<a href="/user/1">@1</a>.0.1<br>├── only<a href="/user/0">@0</a>.0.2<br>├── debug<a href="/user/0">@0</a>.8.0<br>├── fresh<a href="/user/0">@0</a>.2.2<br>├── type-is<a href="/user/1">@1</a>.0.1<br>├── delegates<a href="/user/0">@0</a>.0.3<br>├── mime<a href="/user/1">@1</a>.2.11<br>├── co<a href="/user/3">@3</a>.0.5<br>├── accepts<a href="/user/1">@1</a>.0.1 (negotiator<a href="/user/0">@0</a>.4.2)<br>└── cookies<a href="/user/0">@0</a>.4.0 (keygrip<a href="/user/1">@1</a>.0.0)</p>
</div>

<p>  但是毕竟镜像跟官方的 npm 源还是会有一个同步时间差异, 目前 cnpm 的默认同步时间间隔是 15 分钟. 如果你是模块发布者, 或者你想马上同步一个模块, 那么推荐你安装 cnpm cli:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org <span class="token function">install</span> cnpm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  通过 cnpm 命令行, 你可以快速同步任意模块:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm <span class="token function">sync</span> koa connect mocha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  呃, 我就是不想安装 cnpm cli 怎么办? 哈哈, 早就想到你会这么懒了, 于是我们还有一个 web 页面:</p>
<p>  例如我想马上同步 koa, 直接打开浏览器: <a href="https://npm.taobao.org/sync/koa">https://npm.taobao.org/sync/koa</a></p>
<p>  或者你是命令行控, 通过 open 命令打开:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">open</span> https://npm.taobao.org/sync/koa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果你安装的模块依赖了 C++ 模块, 需要编译, 肯定会通过 node-gyp 来编译, node-gyp 在第一次编译的时候, 需要依赖 node 源代码, 于是又会去 node dist 下载, 于是大家又会吐槽, 怎么 npm 安装这么慢…</p>
<p>  好吧, 于是又要提到 <code>--disturl</code> 参数, 通过七牛的镜像来下载:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org --disturl<span class="token operator">=</span>https://npm.taobao.org/mirrors/node <span class="token function">install</span> microtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  再次要提到 cnpm cli, 它已经默认将 –registry 和 –disturl 都配置好了, 谁用谁知道 如果不想使用cnpm cli，可以</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org --global
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist --global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  查看npm的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token function">ls</span> <span class="token comment"># npm的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="nvm常用命令"><a href="#nvm常用命令" class="headerlink" title="nvm常用命令"></a>nvm常用命令</h3><ol>
<li>nvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</version></li>
<li>nvm uninstall <version> ## 删除已安装的指定版本，语法与install类似</version></li>
<li>nvm use <version> ## 切换使用指定的版本node</version></li>
<li>nvm ls ## 列出所有安装的版本</li>
<li>nvm ls-remote ## 列出所以远程服务器的版本（官方node version list）</li>
<li>nvm current ## 显示当前的版本</li>
<li>nvm alias <name> <version> ## 给不同的版本号添加别名</version></name></li>
<li>nvm unalias <name> ## 删除已定义的别名</name></li>
<li>nvm reinstall-packages <version> ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li>
</ol>
<h3 id="附-MAC-的-bash-profile"><a href="#附-MAC-的-bash-profile" class="headerlink" title="附: MAC 的 .bash_profile"></a>附: MAC 的 <code>.bash_profile</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>
<span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment"># This loads nvm</span>
<span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment"># This loads nvm bash_completi    on</span>
 
<span class="token comment"># nvm 改为国内node镜像</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7 安装 event 扩展</title>
    <url>/post/c42ce648.html</url>
    <content><![CDATA[<div class="note success no-icon"><p>  Libevent 是一个用C语言编写的、轻量级的开源高性能I/O框架，支持多种 I/O 多路复用技术： epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。PHP提供了对应的扩展 libevent、 Event 。</p>
<p>  相比 libevent ext, event ext 拥有更好的性能表现和更全面的API，可以让我们更友好的使用 Libevent。</p>
</div>

<a id="more"></a>

<h4 id="安装-Libevent-库"><a href="#安装-Libevent-库" class="headerlink" title="安装 Libevent 库"></a>安装 Libevent 库</h4><p>   php event 扩展 依赖 Libevent 库，需要先编译安装（注意是 Libevent 库，非 libevent 扩展）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --depth<span class="token operator">=</span><span class="token number">1</span> https://github.com/nmathewson/Libevent.git
<span class="token builtin class-name">cd</span> Libevent
./autogen.sh

./configure --prefix<span class="token operator">=</span>/usr/local/libevent
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装-Event-扩展"><a href="#安装-Event-扩展" class="headerlink" title="安装 Event 扩展"></a>安装 Event 扩展</h4><p>   可以直接使用 pecl 安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl <span class="token function">install</span> event
downloading event-2.5.3.tgz <span class="token punctuation">..</span>.
Starting to download event-2.5.3.tgz <span class="token punctuation">(</span><span class="token number">140,913</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>done: <span class="token number">140,913</span> bytes
<span class="token number">50</span> <span class="token builtin class-name">source</span> files, building
running: phpize
Configuring for:
PHP Api Version:         <span class="token number">20180731</span>
Zend Module Api No:      <span class="token number">20180731</span>
Zend Extension Api No:   <span class="token number">320180731</span>
Enable internal debugging <span class="token keyword">in</span> Event <span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> 
Enable sockets support <span class="token keyword">in</span> Event <span class="token punctuation">[</span>yes<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> 
libevent installation prefix <span class="token punctuation">[</span>/usr<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> /usr/local/libevent
<span class="token punctuation">..</span>.
Build process completed successfully
Installing <span class="token string">'/usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/event.so'</span>
<span class="token function">install</span> ok: channel://pecl.php.net/event-2.5.3
Extension event enabled <span class="token keyword">in</span> php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>   查看安装结果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># php --ri event</span>

event

Event support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Sockets support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Debug support <span class="token operator">=</span><span class="token operator">&gt;</span> disabled
Extra functionality support including HTTP, DNS, and RPC <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
OpenSSL support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Thread safety support <span class="token operator">=</span><span class="token operator">&gt;</span> disabled
Extension version <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2.5</span>.3
libevent2 headers version <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2.2</span>.0-alpha-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>   1,<code>问题</code>，<code>pecl install event</code>连不上，下载失败。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update pecl.php.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   2,<code>问题</code>，<code>pecl channel-update pecl.php.net 失败</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update pecl.php.net

Updating channel <span class="token string">"pecl.php.net"</span>
Error: No version number found <span class="token keyword">in</span> <span class="token operator">&lt;</span>channel<span class="token operator">&gt;</span> tag
Invalid channel.xml <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>
   解决方案：

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update https://pecl.php.net/channel.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>centos系统之部署ShowDoc</title>
    <url>/post/ef6fd2ef.html</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><div class="note info no-icon"><p>  showdoc是一个php语言编写的API文档系统，专为程序员设计，界面布局简单功能强大，支持在线和私服部署。</p>
</div>

<a id="more"></a>

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li>支持markdown语法</li>
<li>支持多用户协作，你可以在项目下面随意添加多个用户一起完成api文档的写作。</li>
<li>可以分享并导出项目，生成需要的文档格式如doc，可以离线浏览</li>
<li>支持响应式，手机电脑同样精彩</li>
<li>支持项目转让</li>
<li>支持模版插入</li>
<li>支持历史版本，你可以把操作恢复到以前的版本。</li>
<li>showdoc完全开源</li>
<li>可以部署到自己的服务器</li>
<li>如果在线使用，可以设置自己的个性域名，也可以对文档进行加密，浏览者需要密码才能访问</li>
<li>可以通过一个在线测试api的工具，直接生成markdown，你几乎不用写代码就能过所有的参数自动生成</li>
</ol>
<br>

<p>   下载地址：<a href="https://github.com/star7th/showdoc">https://github.com/star7th/showdoc</a><br>   官网地址：<a href="https://www.showdoc.cc/">https://www.showdoc.cc</a></p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>   showdoc需要运行在<code>php</code>环境上，因此需要安装好<code>nginx</code>和<code>php</code><br>   nginx和php的安装步骤这里不再赘述，网上相关安装教程数不胜数</p>
<p>   <code>注意php版本最好5.4以上</code></p>
<h4 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h4><p>   <a href="https://github.com/star7th/showdoc">https://github.com/star7th/showdoc</a></p>
<p>   将zip包传到部署好的nginx和php所在服务器<br>   放到nginx默认的网站目录html下解压</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> showdoc-master.zip 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>   请确保nginx和php对源码包下这5个目录可写权限：<br>   /Application/Runtime 、 /Public/Uploads 、 /Sqlite 、 /Sqlite、showdoc.db.php</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R nginx.nginx  /usr/local/nginx/html/showdoc-master
<span class="token comment"># nginx.nignx表示属主和属组，主与组的名字取决于nginx和php的启动用户是谁</span>
<span class="token comment"># 如果不太理解，也可以直接chmod 777 -R 对以上的几个目录分别授予写入权限</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> showdoc-master/

<span class="token function">chmod</span> <span class="token number">777</span> -R server/
<span class="token function">chmod</span> <span class="token number">777</span> -R Public/Uploads/
<span class="token function">chmod</span> <span class="token number">777</span> -R install/
<span class="token function">chmod</span> <span class="token number">777</span> -R Sqlite/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装showdoc"><a href="#安装showdoc" class="headerlink" title="安装showdoc"></a>安装showdoc</h4><p>   showdoc采用web安装方式，非常人性化<br>   检查nginx和php是否启动成功，配置好nginx虚拟主机目录指向showdoc目录并关联php</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#配置nginx虚拟主机目录指向showdoc源码包目录</span>
<span class="token keyword">server</span> <span class="token punctuation">{</span>
    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span> showdoc<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span>com<span class="token punctuation">;</span>
    <span class="token keyword">root</span>  <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>showdoc<span class="token operator">-</span>master<span class="token punctuation">;</span>
    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
   
<span class="token comment">#配置nginx关联php</span>
    <span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>
        <span class="token keyword">fastcgi_pass</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
        <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME  <span class="token variable">$DOCUMENT_ROOT</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   在浏览器访问 <a href="http://showdoc.***.com/install/">http://showdoc.***.com/install/</a> 按步骤安装即可。</p>
<p>   。。。</p>
<p>   按网页中提示删除install目录(防止重装)：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf  /usr/local/nginx/html/showdoc-master/install/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   安装完毕后可使用 <a href="http://showdoc.***.com/index.php">http://showdoc.***.com/index.php</a> 访问登录首页，默认账号showdoc（密码：123456）登录，也可以自行注册账户）</p>
<p>   <code>至此showdoc部署完成，尽情探索吧</code></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>API文档系统</category>
      </categories>
      <tags>
        <tag>ShowDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置logback.xml日志信息</title>
    <url>/post/4d8e6ca2.html</url>
    <content><![CDATA[<p>由于<code>Spring Boot</code> 默认的日志框架 <code>Logback</code>,直接在resource下创建<code>logback-spring.xml</code><br>创建logback-spring.xml文件</p>
<a id="more"></a>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span>  <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span>
    <span class="token comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span>
    <span class="token comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span>
    <span class="token comment">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">&gt;</span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:/data/edu<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- 彩色日志 --&gt;</span>
    <span class="token comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span>
    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>
    <span class="token comment">&lt;!-- boldMagenta:粗红--&gt;</span>
    <span class="token comment">&lt;!-- cyan:青色 --&gt;</span>
    <span class="token comment">&lt;!-- white:白色 --&gt;</span>
    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>
              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>


    <span class="token comment">&lt;!--输出到控制台--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span>
        <span class="token comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 设置字符集 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--输出到文件--&gt;</span>

    <span class="token comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 此处设置字符集 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 此处设置字符集 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--
        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。
        &lt;logger&gt;仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              如果未设置此属性，那么当前logger将会继承上级的级别。
    --&gt;</span>
    <span class="token comment">&lt;!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把&lt;root level="INFO"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：
     --&gt;</span>
    <span class="token comment">&lt;!--开发环境:打印控制台--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.guli<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

        <span class="token comment">&lt;!--
            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG
            可以包含零个或多个appender元素。
        --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--生产环境:输出到文件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>applicationyml</code>配置环境</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##环境设置</span>
 <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
   <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>控制台输入彩色,然后去日志存储目录中分表有log_error.log log_info.log log_warn.log 3个文件</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目配置多数据源</title>
    <url>/post/a810e572.html</url>
    <content><![CDATA[<p>  由于对接的项目比较老，要与其数据库进行交互，而且数据库类型不一致，所以我们的项目需要支持多数据源（接口平台），这个还是非常好配置的，SpringBoot给我们提供了多数据源配置的方案，并且每个数据源对应一个JdbcTemplate，这样就方便很多，具体配置如下：</p>
<a id="more"></a>

<h4 id="application-properties文件内配置多数据源信息"><a href="#application-properties文件内配置多数据源信息" class="headerlink" title="application.properties文件内配置多数据源信息"></a>application.properties文件内配置多数据源信息</h4><p>  首先在application.properties或者yml文件内配置多数据源信息，具体配置如下：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># ds1数据源配置</span>
<span class="token attr-name">spring.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token attr-name">spring.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span>
<span class="token attr-name">spring.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/zz?useUnicode=true&amp;characterEncoding=utf8</span>
<span class="token attr-name">spring.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token attr-value">zz</span>
<span class="token attr-name">spring.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token attr-value">zz</span>

<span class="token comment"># ds2数据源配置</span>
<span class="token attr-name">spring.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">oracle.jdbc.driver.OracleDriver</span>
<span class="token attr-name">spring.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:oracle:thin:@localhost:1521:orcl</span>
<span class="token attr-name">spring.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token attr-value">system</span>
<span class="token attr-name">spring.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token attr-value">050508</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="指定数据源与配置信息"><a href="#指定数据源与配置信息" class="headerlink" title="指定数据源与配置信息"></a>指定数据源与配置信息</h4><p>  上面我们配置好了数据源，但是已经不是SpringBoot默认的数据源配置信息了，所以我们还要指定不同的数据源实例对应哪个配置信息，配置如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 多数据源配置
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">/**
   * ds1数据源配置
   *
   * @return 配置信息
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1DataSourceProperties"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.ds1"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">ds1DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds1数据源
   *
   * @param dataSourceProperties 配置信息
   * @return 数据源实例
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1DataSource"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">ds1DataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1DataSourceProperties"</span><span class="token punctuation">)</span> <span class="token class-name">DataSourceProperties</span> dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds2数据源配置
   *
   * @return 配置信息
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2DataSourceProperties"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.ds2"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">ds2DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds2数据源
   *
   * @param dataSourceProperties 配置信息
   * @return 数据源实例
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2DataSource"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">ds2DataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2DataSourceProperties"</span><span class="token punctuation">)</span> <span class="token class-name">DataSourceProperties</span> dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="配置JdbcTemplate与数据源关系"><a href="#配置JdbcTemplate与数据源关系" class="headerlink" title="配置JdbcTemplate与数据源关系"></a>配置JdbcTemplate与数据源关系</h4><p>  配置完数据源信息，我们想直接用不同的JdbcTemplate来操作不同的数据库，所以我们还要创建几个<code>JdbcTemplate</code>实例，并且这些实例与不同的数据源进行绑定，配置信息如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * JdbcTemplate 多数据源配置
 *
 * @author 明山
 * @see DataSourceConfig
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateDataSourceConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">/**
   * ds1 JdbcTemplate 配置
   *
   * @param dataSource 数据源
   * @return JdbcTemplate
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1JdbcTemplate"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   *ds2 JdbcTemplate 配置
   *
   * @param dataSource 数据源
   * @return JdbcTemplate
   */</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2JdbcTemplate"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">hdwmsJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用JdbcTemplate"><a href="#使用JdbcTemplate" class="headerlink" title="使用JdbcTemplate"></a>使用JdbcTemplate</h4><p>  配置完后，我们可以直接在具体的类中使用了，使用方式如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1JdbcTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> ds1JdbcTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2JdbcTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> ds2JdbcTemplate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目添加外部Jar包</title>
    <url>/post/afccf6ff.html</url>
    <content><![CDATA[<p>  SpringBoot项目引入外部jar包是非常方便的。</p>
<p>  1，首先在src同级目录建一个lib文件夹，将第三方jar包放到这个文件内，比如我将ojdbc6.jar 这个jar包放到这个地方。<br>  2，接着我们需要在pom.xml文件里配置jar的maven坐标，不过这个坐标比较特殊，我们需要直接定位到我们上一步添加的文件，而不是从Maven仓库里面去下载，以ojdbc6.jar为例，配置依赖如下：</p>
<a id="more"></a>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.oracle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ojdbc6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>12.1.0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${project.basedir}/lib/ojdbc6.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这里比较特殊的是<code>systemPath</code>，常见的Maven坐标是没有这个的，这里面直接指定该jar的相对路径（相对项目的根目录），这样Maven在编译的时候就不会从中央仓库里面去下载该jar包了。但只配置这个还不行，还需要配置SpringBoot编译时插件属性<code>includeSystemScope</code>，具体如下：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  上面配置完毕，我们就可以直接执行<code>mvn clean install</code>进行打包，然后我们查看打好的jar包里面包含的jar包，会发现ojdbc6.jar这个包已经正确被包含进去了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot之统一包装响应</title>
    <url>/post/88151b22.html</url>
    <content><![CDATA[<p>  SpringBoot 中可以基于 <code>ControllerAdvice</code> 和 <code>HttpMessageConverter</code> 实现对数据返回的包装。</p>
<p>  实现如下，先来写一个 POJO 来定义一下返回格式：</p>
<a id="more"></a>


<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">ErrorCode</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>


<pre><code>这里用到了lombok，lombok的使用介绍不在本文范围内。</code></pre>
<p>用一个 ResponseBodyAdvice 类的实现包装 Controller 的返回值：<br>以下是我以前的实现方式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatResponseBodyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">FormatResponseBodyAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Object</span> wrapperBody <span class="token operator">=</span> body<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    wrapperBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    wrapperBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request uri path: {}, format response body error"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> wrapperBody<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note primary no-icon"><p>为什么要对返回类型是 String 时进行特殊处理呢？因为如果直接返回 new Response&lt;&gt;(body) 的话，在使用时返回 String 类型的话，会报类型转换异常，当时也没有理解什么原因导致的，所以最后使用了 jackson 对 Response 又做了一次序列化。</p>
</div>

<p>今天找到了导致这个异常的原因：</p>
<div class="note primary no-icon"><p>因为在所有的 HttpMessageConverter 实例集合中，StringHttpMessageConverter 要比其它的 Converter 排得靠前一些。我们需要将处理 Object 类型的 HttpMessageConverter 放得靠前一些，这可以在 Configuration 类中完成：</p>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后 FormatResponseBodyAdvice 就可以修改为如下实现：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatResponseBodyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span>
                                  <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> body<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比之前的实现方式优雅了很多而且不用再处理 jackson 的异常了。</p>
<p>写一个 Controller 来尝试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>请求这个端点得到结果：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"hello world!"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>说明我们的配置是成功的，同时可以在相应头中看到：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">content-type</span><span class="token punctuation">:</span> <span class="token attr-value">application/json;charset=UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果是之前的实现方式，这里的值就是：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">content-type</span><span class="token punctuation">:</span> <span class="token attr-value">html/text</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也不太符合 <code>restful</code> 规范.</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置静态资源不重启即时生效</title>
    <url>/post/f3f7b1c5.html</url>
    <content><![CDATA[<p>在项目中，用到了模板引擎,每次修改一个 html，要重启才生效,配置不重启也实时生效,可以提供开发效率</p>
<a id="more"></a>

<p>在<code>pom</code>中直接引入依赖<code>spring-boot-devtools</code></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>automatically.properties</code> 中 <code>开启application.properties</code> 开启页面热价值</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#页面热加载</span>
<span class="token attr-name">spring.thymeleaf.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>点击<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Build-Execution-Deplyment</code> -&gt; <code>Compiler</code>，选中打勾 <code>Build project</code></p>
<img data-src="/post/f3f7b1c5/springbootstatic.png" class="" title="设置开启实时生效"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-key生成密钥及SSH无密码登录</title>
    <url>/post/16d9a840.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="首先什么是SSH"><a href="#首先什么是SSH" class="headerlink" title="首先什么是SSH"></a>首先什么是SSH</h3>  <div class="note success no-icon"><p>  Secure Shell (SSH) 是一个允许两台电脑之间通过安全的连接进行数据交换的网络协议。通过加密保证了数据的保密性和完整性。SSH采用公钥加密技术来验证远程主机，以及(必要时)允许远程主机验证用户。</p>
</div>

  <a id="more"></a>

<h3 id="SSH的好处"><a href="#SSH的好处" class="headerlink" title="SSH的好处"></a>SSH的好处</h3>  <div class="note success no-icon"><ul>
<li>传统的FTP、Telnet是再网络中明文传送数据、用户帐号和密码，很容易受到中间人攻击。而通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了， 而且也能够防止DNS和IP欺骗。</li>
<li>传输的数据是经过压缩的，所以可以加快传输的速度。 </li>
</ul>
</div>
<h3 id="怎么实现SSH的好处呢？"><a href="#怎么实现SSH的好处呢？" class="headerlink" title="怎么实现SSH的好处呢？"></a>怎么实现SSH的好处呢？</h3>  <div class="note success no-icon"><p>  SSH利用SSH Key来进行前面提到的基于密钥的安全验证。</p>
</div>
<h3 id="SSH-Key是什么？"><a href="#SSH-Key是什么？" class="headerlink" title="SSH-Key是什么？"></a>SSH-Key是什么？</h3>  <div class="note success no-icon"><ul>
<li>SSH-Key 就是一对密钥对。【一个是公钥，一个是私钥】</li>
<li>公钥是给别人用的。私钥是给自己用的。</li>
<li>别人是谁？可以是GitLab服务器。<br> 自己是谁？可以是本地。</li>
<li>举个例子<ul>
<li>本地想要使用git从gitHub/gitlab上拉取代码。</li>
<li>给GitHub/GitLab配置公钥，公钥就可以作为一个加密的箱子，将代码放在箱子里。</li>
<li>被本地拉取到后，使用私钥将加密的箱子打开。就能拿到代码了。</li>
<li>整个过程中，都没有用户名/密码在网络中传输，所以不会给他人拦截到，破解你的数据。</li>
</ul>
</li>
<li>所以，SSH-Key的直观作用，就是【让你方便的登录到 SSH 服务器，而无需输入密码】</li>
</ul>
</div>
<h3 id="SSH-Key的密钥类型"><a href="#SSH-Key的密钥类型" class="headerlink" title="SSH-Key的密钥类型"></a>SSH-Key的密钥类型</h3>  <div class="note success no-icon"><p>  有<code>RSA</code>和<code>DSA</code>两种认证密钥。</p>
</div>

<h2 id="SSH-Key生成"><a href="#SSH-Key生成" class="headerlink" title="SSH-Key生成"></a>SSH-Key生成</h2><h3 id="是否已存在SSH-Key"><a href="#是否已存在SSH-Key" class="headerlink" title="是否已存在SSH-Key"></a>是否已存在SSH-Key</h3>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -al ~/.ssh <span class="token comment"># 用户目录.ssh文件,是否有id_rsa/id_rsa.pub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <div style="height: 10px;"></div>

<p>     <code>id_rsa</code> （私钥，要保存好，放在本地，私钥可以生产公钥，反之不行。）<br>     <code>id_rsa.pub</code> (公钥，可以用于发送到其他服务器，或者git上。)</p>
<h3 id="新生成SSH-key"><a href="#新生成SSH-key" class="headerlink" title="新生成SSH-key"></a>新生成SSH-key</h3>  <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">ssh-keygen</span> <span class="token attr-value">-t rsa -C "leeze0216@163.com"</span>

-b：指定密钥长度；
-e：读取openssh的私钥或者公钥文件；
-C：添加注释；
-f：指定用来保存密钥的文件名；
-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；
-l：显示公钥文件的指纹数据；
-N：提供一个新密语；
-P：提供（旧）密语；
-q：静默模式；
-t：指定要创建的密钥类型（如：rsa,dsa)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>     键入命令后，会让你输入密码用来保护你的密钥等，总共三次需要输入的，你都直接三次回车就好！！<br>    【关键是，设置了你自己以后忘了就得重新生成】<br>    【-C 是给你的密钥设置注释，你不想设置为邮箱，设置成别的也行】</p>
<p>     生成后，当前<code>用户的目录</code>下，生成一个<code>.ssh</code>隐藏目录，目录中会有【<code>id_rsa</code>】和【<code>id_rsa.pub</code>】两个文件，一个是<code>私钥</code>，一个是<code>公钥</code>。你现在就可以复制使用了。</p>
<h3 id="上传公钥到服务器"><a href="#上传公钥到服务器" class="headerlink" title="上传公钥到服务器"></a>上传公钥到服务器</h3>  <div class="note no-icon"><p>把<code>id_rsa.pub （公钥）</code>内容，写到服务器上的<code>~/.ssh/authorized_keys</code>文件里</p>
</div>

  <ol>

  <li>上传方式</li>

<p>  <strong><mark class="label danger">方式一：</mark></strong><br>     这里测试用的服务器地址为：<code>10.211.55.61</code>，用户为：<code>root</code><br>  </p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">ssh-copy-id</span> <span class="token attr-value">-i ~/.ssh/id_rsa.pub root@10.211.55.61</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>
<p>  <strong><mark class="label danger">方式二：</mark></strong><br>     将之前在本地生成的公钥<code>id_rsa.pub</code>,发送到需要<code>无密码登录的服务器</code>，然后将id_rsa.pub的内容追加到服务器的<code>~/.ssh/authorized_keys</code>文件中即可。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">&gt;&gt;</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <li>重启SSH服务 </li>

  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <li> 测试免密登录服务器</li>

  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@10.211.55.61<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <li> 设置ssh无密码访问git仓库</li>

  <div class="note no-icon"><p>将本地<code>id_rsa.pub</code>的内容添加到git仓库的 <code>SSH公钥 </code>中。</p>
</div>
<p>  测试ssh无密码访问git仓库：<code>ssh -T git@gitee.com</code></p>
  </ol>

<h2 id="Git配置多个SSH-Key"><a href="#Git配置多个SSH-Key" class="headerlink" title="Git配置多个SSH-Key"></a>Git配置多个SSH-Key</h2><ol>

<li> 生成 gitee SSH-Key </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">$</span> <span class="token attr-value">ssh-keygen -t rsa -C 'git@gitee.com' -f ~/.ssh/gitee_id_rsa</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 生成 github SSH-Key </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">$</span> <span class="token attr-value">ssh-keygen -t rsa -C 'git@github.com' -f ~/.ssh/github_id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 添加配置文件，在 ~/.ssh 目录下新建一个 config 文件 </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># gitee</span>
<span class="token attr-name">Host</span> <span class="token attr-value">gitee.com</span>
<span class="token attr-name">HostName</span> <span class="token attr-value">gitee.com</span>
<span class="token attr-name">PreferredAuthentications</span> <span class="token attr-value">publickey</span>
<span class="token attr-name">IdentityFile</span> <span class="token attr-value">~/.ssh/gitee_id_rsa</span>
<span class="token comment"># github</span>
<span class="token attr-name">Host</span> <span class="token attr-value">github.com</span>
<span class="token attr-name">HostName</span> <span class="token attr-value">github.com</span>
<span class="token attr-name">PreferredAuthentications</span> <span class="token attr-value">publickey</span>
<span class="token attr-name">IdentityFile</span> <span class="token attr-value">~/.ssh/github_id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置文件参数</span>
 <span class="token key atrule">Host</span> <span class="token punctuation">:</span> Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）
 <span class="token key atrule">HostName</span> <span class="token punctuation">:</span> 要登录主机的主机名（建议与Host一致）
 <span class="token key atrule">User</span> <span class="token punctuation">:</span> 登录名（如gitlab的username）
 <span class="token key atrule">IdentityFile</span> <span class="token punctuation">:</span> 指明上面User对应的identityFile路径
 <span class="token key atrule">Port</span><span class="token punctuation">:</span> 端口号（如果不是默认22号端口则需要指定）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<li> 测试 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@gitee.com
$ <span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</ol><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>谢谢你来看我的博客</title>
    <url>/post/a8863134.html</url>
    <content><![CDATA[<iframe width="100%" height="230px" id="iframeid" scrolling="no" frameborder="0" src="/zone/top/index.html"></iframe>
<div style="text-align: center;display: none;">

<p><a href="/welfare">我的收藏</a> <a href="/covid19">疫情图</a></p>
</div>


<style>
.post-block:first-child{
padding: 2px;
border-radius:unset !important;
}
#iframeid{
margin-bottom: 0px;
}
</style><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>Yarn安装与镜像设置</title>
    <url>/post/2dcb4b.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  <a href="https://yarn.bootcss.com/">Yarn</a> 就是一个类似于 npm 的包管理工具，它是由 facebook 推出并开源。<br>  与 npm 相比，yarn 有着众多的优势，主要的优势在于：速度快、离线模式、版本控制。</p>
<a id="more"></a>

<p><img data-src="/post/2dcb4b/yarn.png" title="" style="width: 90%; height: 200;" class="zoom-in-cursor" width="400" vspace="0" hspace="0" height="179" border="0"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  macOS有几种安装yarn的方式，如下：</p>
<ol>
<li><p>使用homebrew安装yarn<br>  使用homebrew安装，如果node.js没有安装，那么它会自动安装node.js</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果你用的是 <code>nvm</code> 或类似工具，你需要确保 <code>PATH</code> 变量中列出的 nvm 版本的路径在 Homebrew 安装的 Node.js 路径之前。</p>
</li>
<li><p>使用MacPorts安装yarn<br>  你可以通过 <a href="https://www.macports.org/">MacPorts</a> 安装 Yarn 。 如果你还未安装 Node.MacPorts 会自动为你安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> port <span class="token function">install</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>使用脚本安装yarn<br>  macOS属于Unix系统的分支，在Unix环境下，使用脚本安装是很方便。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- -L https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装指定版本的yarn</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- -L https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span> -s -- --version <span class="token number">1.19</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>通过tarball手动安装<br>  你可以通过<a href="https://yarn.bootcss.com/latest.tar.gz">下载tarball</a>并在任何地方提取它来安装yarn。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt
<span class="token function">wget</span> https://yarnpkg.com/latest.tar.gz
<span class="token function">tar</span> zvxf latest.tar.gz
<span class="token comment"># Yarn is now in /opt/yarn-[version]/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在提取yarn之前，建议您使用GPG验证tarball：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://dl.yarnpkg.com/debian/pubkey.gpg <span class="token operator">|</span> gpg --import
<span class="token function">wget</span> https://yarnpkg.com/latest.tar.gz.asc
gpg --verify latest.tar.gz.asc
<span class="token comment"># Look for "Good signature from 'Yarn Packaging'" in the output</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>npm来安装(<code>推荐</code>)<br>  虽然安装 <code>yarn</code> 可以不依赖 <code>npm</code>，但这里还是建议你使用 <code>npm</code> 来安装吧，快速而简洁：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -s
<span class="token function">npm</span> <span class="token function">install</span> <span class="token function">yarn</span> -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


</li>
</ol>
<h3 id="Yarn-换源"><a href="#Yarn-换源" class="headerlink" title="Yarn 换源"></a>Yarn 换源</h3><p>  Yarn 源仓库包下载不稳定</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 yarn 配置</span>
<span class="token function">yarn</span> config get registry
或者
<span class="token function">yarn</span> config list

<span class="token operator">&gt;</span> registry: <span class="token string">'https://registry.yarnpkg.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置为淘宝镜像</span>
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token comment"># 设置为官方镜像</span>
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org --global
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist --global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<p>  我们使用<code>yrm</code>来做<code>yarn</code>的镜像管理器；首先需要下载，使用如下命令下载安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i yrm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  之后可以通过以下命令来查看所提供的镜像地址</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yrm <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  可以看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*  <span class="token function">npm</span> ---- https://registry.npmjs.org/
  cnpm --- http://r.cnpmjs.org/
  taobao - https://registry.npm.taobao.org/
  nj ----- https://registry.nodejitsu.com/
  rednpm - http://registry.mirror.cqupt.edu.cn/
  npmMirror  https://skimdb.npmjs.com/registry/
  edunpm - http://registry.enpmjs.org/
  <span class="token function">yarn</span> --- https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  所示的是我们现在的源地址是<code>npm</code>，让我们来切换镜像源吧，使用<code>yrm use 镜像名</code>，如我们切换成淘宝镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  可以看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YARN Registry has been <span class="token builtin class-name">set</span> to: https://registry.npm.taobao.org/

NPM Registry has been <span class="token builtin class-name">set</span> to: https://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>  有新版时，Yarn 会给你提示。 如需升级 Yarn ，仍然可以通过 Homebrew 来升级。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew upgrade <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  通过如下命令测试 Yarn 是否安装成功： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>  我们选择 yarn 的主要原因是依赖安装速度快，默认生成的 yarn.lock 会保证所有成员的模块依赖目录能够很好的保持一致。<br>  yarn install 和 yarn upgrade 的执行逻辑，可以让你可以很清晰的管理本地依赖的版本更新时机，又能很好的让所有开发人员的本地依赖保持一致性。<br>  使用 npm install 则有些乱，当你不想写死版本号依赖时，它总会安装依赖包最新可用的版本，但这在有时候并不是你想要的。<br>  在 yarn 之前，我们使用的是 npm+淘宝仓库方案，也会使用 cnpm。在国内，cnpm 的依赖安装速度比 yarn 还要快，但 cnpm 在 windows 下通过创建链接引用的方式管理包依赖，可能会带来一些问题。<br>  现在我们会默认使用淘宝仓库，使用 npm 管理全局依赖，使用 yarn 管理具体项目内的依赖。<br>  在一个新的项目中使用 yarn，我们会这么来做：</p>
<ol>
<li>写好 package.json，写入初始的第三方依赖</li>
<li>执行 yarn 命令，初始化安装项目依赖，生成 yarn.lock 文件</li>
<li>后续通过执行 yarn add xxx 添加更多需要的依赖（也可直接在 package.json 文件中写入）</li>
<li>当确定需要更新依赖模块到其最新版本时，执行 yarn upgrade 命令</li>
<li>配置项目启动命令执行前，先执行 yarn 命令，以保证当 yarn.lock 被更新时，本地依赖也及时得到更新。例如，在 package.json 的 script 部分中配置 start 命令： “start”: “yarn &amp;&amp; yarn run build:dev”</li>
</ol>
<br>

<blockquote>
<blockquote>
</blockquote>
<p><a href="https://neveryu.github.io/2018/07/20/yarn/">yarn安装</a><br><a href="https://docs.npmjs.com/">npm</a><br><a href="https://yarnpkg.com/">yarn</a></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之搭建个人博客</title>
    <url>/post/dfea82e5.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。hexo 博客在 Linux 系统中搭建是非常简单的，在 WIN 系统中比较复杂，我们接触的手机📱永远要比电脑的时间要多那么我们可以在安卓手机上使用 termux 来搭建，这样随时随地都可以写做和发表文章。</p>
  <a id="more"></a> 

<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><div class="note success no-icon"><ol>
<li> 注册 <font color="LightCoral" size="4">github</font> 账号 </li>
<li> 添加 <font color="LightCoral" size="4">username.github.io</font> 仓库 </li>
<li> 搭建 <font color="LightCoral" size="4">git</font> 环境 </li>
<li> 配置 <font color="LightCoral" size="4">ssh</font> </li>
<li> 连接 <font color="LightCoral" size="4">github</font> </li>
<li> 安装 <font color="LightCoral" size="4">Node.js</font> </li>
<li> 搭建 <font color="LightCoral" size="4">Hexo</font> 环境 </li>
</ol>
</div>



<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li> <mark class="label danger">Node</mark> 环境安装：</li>

<p>   参考：<a href="/post/c0a81ac4.html" title="Mac正确的安装和使用nvm">Mac正确的安装和使用nvm</a></p>
<li> <mark class="label danger">Hexo</mark> 环境安装：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>   安装完成之后，新建一个文件夹(例如: <code>blog</code>)，执行以下命令进行初始化：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> blog
$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装核心组件"><a href="#安装核心组件" class="headerlink" title="安装核心组件"></a>安装核心组件</h3><p>   安装 npm 核心组件支持</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>   新建完成后，<code>cd blog</code>，查看文件夹目录<br> </p><div class="note primary no-icon"><p>_config.yml 文件是网站的配置文件，可以在其中配置网站的大部分参数。<br>package.json 文件是应用程序的信息。<br>source 是资源文件夹，是用来存放 xxxu 用户资源的地方。<br>themes 是主题文件夹，Hexo 会根据主题来生成不同的静态页面。<br>scaffolds 是模板件夹，当新建文章的时候，Hexo 会根据模板来建立文件。</p>
</div><p></p>
<h3 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h3><ol>

<li>下载主题：</li>

<p>   <a href="https://hexo.io/">Hexo</a> 的主题非常丰富可以去<a href="https://hexo.io/themes/">官方主题</a>下载；下面有演示我使用的主题 <a href="https://github.com/theme-next/hexo-theme-next">next</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<li>修改主配置文件：</li>


<p>   在<code>站点</code>配置文件<code>_config.yml</code> 开启 next 主题，修改<code>theme</code>属性，注意 <code>theme: </code>后要加<code>空格</code>，具体的站点和主题信息配置请自行去 <a href="https://hexo.io/zh-cn/">hexo</a> 和 <a href="http://theme-next.iissnan.com/">next 主题</a>文档查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">vi</span> _config.yml

theme: next <span class="token comment"># 找到 theme</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<li>修改主题配置文件：</li>

<p>   在<code>blog</code>文件夹下，新建<code>_config.next.yml</code>，存放主题修改内容。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">touch</span> _config.next.yml  <span class="token comment"># themes/next/_config.yml 中需要修改的，放在这里。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</ol>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 生成静态页面，生成的内容在public文件夹下</span>
hexo s <span class="token comment"># 启动本地服务，进行文章预览调试。hexo s --debug 命令可以用来调试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><p>   配置 ssh 密钥及 github 或者 gitee 部署</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
ssh-key <span class="token punctuation">..</span><span class="token punctuation">..</span>
省略。。。
$ <span class="token function">git</span> config --global user.name <span class="token string">"your name"</span>
$ <span class="token function">git</span> config --global user.email <span class="token string">"email@email.com"</span>
省略。。。
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li>安装 <font color="LightCoral" size="3">hexo-deployer-git</font> 插件</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li>打开 Hexo 主文件夹下的<font color="LightCoral" size="3">_config.yml</font>，设置其中的 <font color="hotpink" size="3">deploy</font> 参数</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">vi</span> _config.yml

deploy:
    type: <span class="token function">git</span> 
    repo: git@github.com:leeze2012/leeze2012.github.io.git
    branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li>安装完成插件之后，<font color="LightCoral" size="3">blog</font> 目录下使用以下命令部署</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d -g <span class="token comment"># 在部署前先生成</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</ol>


<h3 id="Next-常用命令"><a href="#Next-常用命令" class="headerlink" title="Next 常用命令"></a>Next 常用命令</h3><div style="height: 10px;"></div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean     <span class="token comment"># 清理之前生成的内容，即public文件</span>
$ hexo g         <span class="token comment"># 生成静态文件</span>
$ hexo d         <span class="token comment"># 部署</span>
$ hexo s         <span class="token comment"># 启动本地服务，可以通过http://localhost:4000查看</span>
$ hexo s --debug <span class="token comment"># 使用debug模式启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>

<li>在 github 新建一个叫 blog 的仓库。</li>

<li>在本地博客文件夹创建 git 版本库，如果没有安装 git 必须先安装 git。</li>

<li>进入需要备份 blog 目录。</li>

<li>创建版本库。</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>这个时候 blog 的版本库已经创建好了。<br>验证是否成功，如果有一个 <font color="hotpink" size="4"> .git </font> 的隐藏文件就说明创建成功。<br>查看隐藏文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 连接上面 github 创建的仓库</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin github.com:leeze2012/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 添加备份文件 </li>

<p><code>source/</code> <code>scripts/</code> <code>themes/</code> <code>_config.yml</code> <code>_config.next.yml</code> <code>scaffolds/</code> <code>package.json</code> <code>.gitignore</code> 这些文件需要备份</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> source/ scripts/ themes/ _config.yml _config.next.yml scaffolds/ package.json .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>修改.gitignore文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> .gitignore

   .DS_Store
   themes/
   db.json
   *.log
   node_modules/
   public/
   .deploy*/
   .idea/

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 注释备份内容，明确的注释可以回退版本</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"博客备份"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 第一次强制上传文件到 github 仓库</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>
这样博客就备份成功了，之后备份直接前面 <mark class="label danger">6</mark> 、<mark class="label danger">7</mark> 步，第 <font color="green" size="4">8</font> 部直接使用下面命令就可以了

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 安装<font color="LightCoral" size="4">shelljs</font>模块,实现自动备份。</li>

<div style="height: 10px;"></div>

<p>  要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> shelljs --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>
编写自动备份脚本

<p>待到模块安装完成，在<code>Hexo根目录</code>的<code>scripts</code>文件夹下新建一个<code>js文件</code>，文件名<code>随意取</code>。</p>
<p>如果没有<code>scripts</code>目录，请新建一个。</p>
<p>然后在脚本中，写入以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">'shelljs/global'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

try <span class="token punctuation">{</span>
	hexo.on<span class="token punctuation">(</span><span class="token string">'deployAfter'</span>, <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>//当deploy完成后执行备份
		run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> catch <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console.log<span class="token punctuation">(</span><span class="token string">"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>which<span class="token punctuation">(</span><span class="token string">'git'</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>
		echo<span class="token punctuation">(</span><span class="token string">'Sorry, this script requires git'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		echo<span class="token punctuation">(</span><span class="token string">"======================Auto Backup Begin==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cd<span class="token punctuation">(</span><span class="token string">'~/git/blog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //此处修改为Hexo根目录路径
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">'git add --all'</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			echo<span class="token punctuation">(</span><span class="token string">'Error: Git add failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">'git commit -am "Form auto backup script\'s commit"'</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			echo<span class="token punctuation">(</span><span class="token string">'Error: Git commit failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">'git push origin master'</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			echo<span class="token punctuation">(</span><span class="token string">'Error: Git push failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span>
		echo<span class="token punctuation">(</span><span class="token string">"==================Auto Backup Complete============================"</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<ul>
<li><p>其中，需要修改第<code>17</code>行的<code>~/git/blog</code>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</p>
</li>
<li><p>如果你的Git远程仓库名称不为<code>origin</code>的话，还需要修改第<code>28</code>行执行的push命令，修改成自己的远程仓库名和相应的分支名。</p>
</li>
<li><p>保存脚本并退出，然后执行hexo deploy命令，将会得到类似以下结果:</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  Deploying: <span class="token function">git</span>
INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.
INFO  Copying files from public folder<span class="token punctuation">..</span>.
INFO  Copying files from extend dirs<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>master 2fd18b4<span class="token punctuation">]</span> Site updated: <span class="token number">2020</span>-03-02 <span class="token number">13</span>:46:34
 <span class="token number">4</span> files changed, <span class="token number">42</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">4</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
枚举对象: <span class="token number">19</span>, 完成.
对象计数中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">19</span>/19<span class="token punctuation">)</span>, 完成.
使用 <span class="token number">8</span> 个线程进行压缩
压缩对象中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">8</span>/8<span class="token punctuation">)</span>, 完成.
写入对象中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">10</span>/10<span class="token punctuation">)</span>, <span class="token number">4.25</span> KiB <span class="token operator">|</span> <span class="token number">1.06</span> MiB/s, 完成.
总共 <span class="token number">10</span> （差异 <span class="token number">7</span>），复用 <span class="token number">0</span> （差异 <span class="token number">0</span>）
remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7</span>/7<span class="token punctuation">)</span>, completed with <span class="token number">7</span> <span class="token builtin class-name">local</span> objects.
To github.com:leeze2012/leeze2012.github.io.git
   42f1ef1<span class="token punctuation">..</span>2fd18b4  HEAD -<span class="token operator">&gt;</span> master
分支 <span class="token string">'master'</span> 设置为跟踪来自 <span class="token string">'git@github.com:leeze2012/leeze2012.github.io.git'</span> 的远程分支 <span class="token string">'master'</span>。
INFO  Deploy done: <span class="token function">git</span>
INFO  Deploying: baidu_url_submitter
INFO  Submitting urls
https://blog.xiaosige.com/post/c1dab809.html
https://blog.xiaosige.com/post/73879c7f.html
<span class="token punctuation">{</span><span class="token string">"remain"</span>:99984,<span class="token string">"success"</span>:2<span class="token punctuation">}</span>
INFO  Deploy done: baidu_url_submitter
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Auto Backup <span class="token assign-left variable">Begin</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token punctuation">[</span>master af0e0a8<span class="token punctuation">]</span> Form auto backup script's commit
 <span class="token number">2</span> files changed, <span class="token number">75</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> scripts/.bc.js.swo
To github.com:leeze2012/blog.git
   49dd62c<span class="token punctuation">..</span>af0e0a8  master -<span class="token operator">&gt;</span> master
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Auto Backup <span class="token assign-left variable">Complete</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦</p>
</ol>

<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><ol>

<li> git clone 自己备份的博客源代码克隆备份的 bolg 源文件地址是你自己的地址这里不做演示</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>版本库的网址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地目录名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> bolg
hexo init
<span class="token punctuation">..</span>.
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 安装相应插件：</li>

<p>   本人<code>package.json</code>，<a href="#pkJson">参考</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb --save
<span class="token function">npm</span> <span class="token function">install</span> valine --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-symbols-count-time --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-blog-encrypt --save

<span class="token function">npm</span> uninstall hexo-generator-index --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save

<span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save  <span class="token punctuation">(</span>推荐这个<span class="token punctuation">)</span> 

<span class="token comment">## 以下参考选择</span>

<span class="token function">npm</span> <span class="token function">install</span> hexo-tag-aplayer --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-tag-dplayer --save

<span class="token function">npm</span> <span class="token function">install</span> hexo-hide-posts --save
<span class="token comment">#二选一</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-spoiler --save

<span class="token comment">## 代码主题不用highlight，改用prismjs时，可以扩展prismjs的主题</span>
<span class="token comment">## npm i -S hexo-prism-plugin </span>
<span class="token comment">## 参考：https://theme-next.js.org/highlight/</span>
<span class="token function">npm</span> <span class="token function">install</span> prism-themes 

<span class="token comment"># 添加 RSS 订阅支持（可选的）atom/rss2</span>
<span class="token function">npm</span> <span class="token function">install</span> --save hexo-generator-feed

<span class="token comment"># 添加 emoji 表情支持（可选的）</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p><strong><code>注：</code></strong> ，使用<code>hexo-asset-image</code>，参考：<a href="/post/172c7c2b.html" title="hexo之图片问题">hexo之图片问题</a></p>
<div class="note warning no-icon"><p><strong>在 npm 5 之前的版本</strong></p>
<p>   使用 <code>npm install</code> 默认选项安装包时，仅仅会把包下载到 <code>node_modules/</code> 中，并<code>不会</code>同时修改 <code>package.json</code>。而使用 <code>--save</code> 选项就可以在安装包的同时，<code>修改</code> <code>package.json</code> 文件。</p>
<p><strong>在 npm 5 之后的版本</strong></p>
<p>   <code>npm install</code> 安装包时，默认便<code>会修改</code> <code>package.json</code> 文件，所以 <code>--save</code> 选项已经<code>不再需要</code>了。</p>
</div>

<p><strong><em><font color="orangered" size="4">注：一些东西摘自网上，未亲自验证。</font></em></strong></p>
<li> package.json：</li>

<div id="pkJson"></div>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">{
<span class="token attr-name">  "name"</span><span class="token punctuation">:</span> <span class="token attr-value">"hexo-site",</span>
<span class="token attr-name">  "version"</span><span class="token punctuation">:</span> <span class="token attr-value">"0.0.0",</span>
<span class="token attr-name">  "private"</span><span class="token punctuation">:</span> <span class="token attr-value">true,</span>
<span class="token attr-name">  "scripts"</span><span class="token punctuation">:</span> <span class="token attr-value">{</span>
<span class="token attr-name">    "build"</span><span class="token punctuation">:</span> <span class="token attr-value">"hexo generate",</span>
<span class="token attr-name">    "clean"</span><span class="token punctuation">:</span> <span class="token attr-value">"hexo clean",</span>
<span class="token attr-name">    "deploy"</span><span class="token punctuation">:</span> <span class="token attr-value">"hexo deploy",</span>
<span class="token attr-name">    "server"</span><span class="token punctuation">:</span> <span class="token attr-value">"hexo server"</span>
  },
<span class="token attr-name">  "hexo"</span><span class="token punctuation">:</span> <span class="token attr-value">{</span>
<span class="token attr-name">    "version"</span><span class="token punctuation">:</span> <span class="token attr-value">"5.2.0"</span>
  },
<span class="token attr-name">  "dependencies"</span><span class="token punctuation">:</span> <span class="token attr-value">{</span>
<span class="token attr-name">    "hexo"</span><span class="token punctuation">:</span> <span class="token attr-value">"^5.2.0",</span>
<span class="token attr-name">    "hexo-abbrlink"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.2.1",</span>
<span class="token attr-name">    "hexo-asset-image"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-baidu-url-submit"</span><span class="token punctuation">:</span> <span class="token attr-value">"0.0.6",</span>
<span class="token attr-name">    "hexo-blog-encrypt"</span><span class="token punctuation">:</span> <span class="token attr-value">"^3.0.13",</span>
<span class="token attr-name">    "hexo-cake-moon-menu"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.3.1",</span>
<span class="token attr-name">    "hexo-deployer-git"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.1.0",</span>
<span class="token attr-name">    "hexo-filter-github-emojis"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.1.0",</span>
<span class="token attr-name">    "hexo-generator-archive"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-generator-baidu-sitemap"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.1.9",</span>
<span class="token attr-name">    "hexo-generator-category"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-generator-feed"</span><span class="token punctuation">:</span> <span class="token attr-value">"^3.0.0",</span>
<span class="token attr-name">    "hexo-generator-index-pin-top"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.2.2",</span>
<span class="token attr-name">    "hexo-generator-searchdb"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.3.3",</span>
<span class="token attr-name">    "hexo-generator-sitemap"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.1.0",</span>
<span class="token attr-name">    "hexo-generator-tag"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-hide-posts"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.1.1",</span>
<span class="token attr-name">    "hexo-inject"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-neat"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.9",</span>
<span class="token attr-name">    "hexo-related-popular-posts"</span><span class="token punctuation">:</span> <span class="token attr-value">"^5.0.1",</span>
<span class="token attr-name">    "hexo-renderer-ejs"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-renderer-marked"</span><span class="token punctuation">:</span> <span class="token attr-value">"^3.3.0",</span>
<span class="token attr-name">    "hexo-renderer-pug"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.0.0",</span>
<span class="token attr-name">    "hexo-renderer-stylus"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.0.1",</span>
<span class="token attr-name">    "hexo-server"</span><span class="token punctuation">:</span> <span class="token attr-value">"^2.0.0",</span>
<span class="token attr-name">    "hexo-sliding-spoiler"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.2.1",</span>
<span class="token attr-name">    "hexo-symbols-count-time"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.7.1",</span>
<span class="token attr-name">    "hexo-tag-friends"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.3.4",</span>
<span class="token attr-name">    "prismjs"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.21.0",</span>
<span class="token attr-name">    "shelljs"</span><span class="token punctuation">:</span> <span class="token attr-value">"^0.8.4",</span>
<span class="token attr-name">    "valine"</span><span class="token punctuation">:</span> <span class="token attr-value">"^1.4.14"</span>
  }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</ol>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><p>  <a href="https://realfavicongenerator.net/">网站图标生成网站</a></p>
<p>  只要把<code>png</code>图片放进去（尺寸不能太大）</p>
<p>  就可以生成一套图标（苹果手机桌面图标，网页图标，win磁贴图标等等）</p>
<img data-src="/post/dfea82e5/faviconbuild.png" class="" title="示例图">
<p>  下载之后放到<code>blog\source\my_images</code>文件夹中</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /my_images/favicon<span class="token punctuation">-</span>16x16.png
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /my_images/favicon<span class="token punctuation">-</span>32x32.png
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /my_images/apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png
  <span class="token key atrule">safari_pinned_tab</span><span class="token punctuation">:</span> /my_images/safari<span class="token punctuation">-</span>pinned<span class="token punctuation">-</span>tab.svg
  <span class="token key atrule">android_manifest</span><span class="token punctuation">:</span> /my_images/site.webmanifest
  <span class="token key atrule">ms_browserconfig</span><span class="token punctuation">:</span> /my_images/browserconfig.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="一键部署插件"><a href="#一键部署插件" class="headerlink" title="一键部署插件"></a>一键部署插件</h3><p>  插件：<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后修改<code>站点配置文件</code> 中的配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
    <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>constown/constown.github.io.git
    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="back2top"><a href="#back2top" class="headerlink" title="back2top"></a>back2top</h3><p>  Hexo 修改 <code>back2top</code> 标签： <a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu">hexo-cake-moon-menu</a></p>
<p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cake-moon-menu --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  然后在站点配置文件<code>_config.yml</code> 中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">moon_menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">back2top</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>chevron<span class="token punctuation">-</span>up
    <span class="token key atrule">func</span><span class="token punctuation">:</span> back2top
    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>
  <span class="token key atrule">back2bottom</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>chevron<span class="token punctuation">-</span>down
    <span class="token key atrule">func</span><span class="token punctuation">:</span> back2bottom
    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="减少出站链接"><a href="#减少出站链接" class="headerlink" title="减少出站链接"></a>减少出站链接</h3><p>  减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 <code>nofollow</code> 标签的插件。</p>
<p>  首先安装 <code>hexo-filter-nofollow</code> 插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-nofollow --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们在站点的配置文件<code>_config.yml</code> 中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 外部链接优化</span>
<span class="token key atrule">nofollow</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> site
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'exclude1.com'</span>
    <span class="token punctuation">-</span> <span class="token string">'exclude2.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  其中 <code>exclude</code>（例外的链接，比如友链）将不会被加上 <code>nofollow</code> 属性。 </p>
<h3 id="hexo-本地搜索"><a href="#hexo-本地搜索" class="headerlink" title="hexo 本地搜索"></a>hexo 本地搜索</h3><p>  NexT 主题已经实现这个功能，它用了 Hexo 的拓展包 hexo-generator-searchdb，预先生成了一个文本库 search.xml，然后传到了网站里面。在本地搜索的时候，NexT 直接用 javascript 调用了这个文件，从而实现了静态网站的本地搜索。</p>
<p>  安装插件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们修改站点配置<code>_config.yml</code> 文件，添加如下内容：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 本地搜索</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>path：索引文件的路径，相对于站点根目录</li>
<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>
<li>limit：限制搜索的条目数</li>
</ul>
<p>  然后修改<code>主题配置</code>文件<code>_config.yml</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Local Search</span>
<span class="token comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span>
local_search:
  enable: <span class="token boolean">true</span>
  <span class="token comment"># If auto, trigger search by changing input.</span>
  <span class="token comment"># If manual, trigger search by pressing enter key or search button.</span>
  trigger: auto
  <span class="token comment"># Show top n results per article, show all results by setting to -1</span>
  top_n_per_article: <span class="token number">1</span>
  <span class="token comment"># Unescape html strings to the readable one.</span>
  unescape: <span class="token boolean">false</span>
  <span class="token comment"># Preload the search data when the page loads.</span>
  preload: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Rss-订阅"><a href="#Rss-订阅" class="headerlink" title="Rss 订阅"></a>Rss 订阅</h3><p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在站点配置文件<code>_config.yml</code> 中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom
  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>
  <span class="token key atrule">hub</span><span class="token punctuation">:</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span>
  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>
  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date
  <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon.png
  <span class="token key atrule">autodiscovery</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  template<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="增加阅读时间和字数统计"><a href="#增加阅读时间和字数统计" class="headerlink" title="增加阅读时间和字数统计"></a>增加阅读时间和字数统计</h3><p>  首先安装 <code>hexo-symbols-count-time</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-symbols-count-time --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果之前安装了<code>hexo-wordcount</code>就要卸载掉npm uninstall hexo-wordcount，因为它只适用于老版本，网页也有教程是这个，<br>  修改站点配置文件<code>_config.yml</code>，没有就添加:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span> 
  <span class="token key atrule">symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#文章内是否显示</span>
  <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 网页底部是否显示</span>
  <span class="token key atrule">total_time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude_codeblock</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">awl</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">wpm</span><span class="token punctuation">:</span> <span class="token number">275</span>
  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> <span class="token string">'mins.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  其中awl（Average Word Length）的数值是设定多少字符统计为一个字(word)，中文博客需要设置为 2。wpm（Words Per Minute）是你的阅读速度，多少字（word）统计为阅读时长一分钟。以下是官方文档里的一些阅读速度参考数据：</p>
<ul>
<li>慢速：200</li>
<li>中速：275（默认）</li>
<li>快速：350</li>
</ul>
<p>  然后修改主题配置文件<code>next/_config.yml</code>，</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">item_text_post</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">item_text_total</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  最后需要<code>hexo clean</code>然后重新生成，否则可能会出现阅读时间NaN字样，参考官方</p>
<h3 id="永久链接插件"><a href="#永久链接插件" class="headerlink" title="永久链接插件"></a>永久链接插件</h3><p>  插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p>
<p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们可以在<code>站点配置</code>文件中修改为：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.juanertu.com
<span class="token key atrule">root</span><span class="token punctuation">:</span> /
<span class="token key atrule">permalink</span><span class="token punctuation">:</span> archives/<span class="token punctuation">:</span>abbrlink.html
<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span>
<span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>
  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>
  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32 <span class="token comment"># 算法：crc16(default) and crc32</span>
  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex <span class="token comment"># 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="百度主动推送"><a href="#百度主动推送" class="headerlink" title="百度主动推送"></a>百度主动推送</h3><p>  插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在<code>站点配置文件</code>中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度主动推送</span>
<span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>
  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">## 提交最新的1个链接</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> tding.top <span class="token comment">## 百度站长平台中注册的域名</span>
  <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token comment">## 准入秘钥</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment">## 文本文档的地址， 新链接会保存在此文本文档里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><ol>
<li>通用站点地图<br>  地址：<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a><br>  安装配置：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  然后我们需要在 Hexo <code>站点配置文件</code>中加入 sitemap 插件：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用站点地图</span>
<span class="token key atrule">sitemap</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>百度站点地图<br>  地址：<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">hexo-generator-baidu-sitemap</a><br>  安装配置：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  具体配置类似通用站点地图，当然也可以看官方提供的教程，下面是一个简单的配置，我们在 Hexo <code>站点配置文件</code>中添加：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度站点地图</span>
<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="文章置顶插件"><a href="#文章置顶插件" class="headerlink" title="文章置顶插件"></a>文章置顶插件</h3><p>  地址：<a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-generator-index --save <span class="token comment">#卸载原来的插件</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  在需要置顶的文章的 <code>Front-matter</code> 中加上 <code>top: true</code> 或者 <code>top: 任意数字</code>，比如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 谢谢你来看我的博客
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">header</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> a8863134
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-02-01 12:10:10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>注意：top 中数字越大，文章越靠前。</code><br>  设置置顶图标:<br>  更新为将此代码放置到 <code>hexo/source/_data/post-meta.swig</code> 文件中:</p>
<pre class="line-numbers language-none"><code class="language-none">{# 添加置顶显示 #}
{%- if post.top &gt; 0 %}
    &lt;span class="post-meta-item"&gt;
        &lt;span class="post-meta-item-icon post-sticky-flag"&gt;
          &lt;i class="fa fa-thumbtack" style="color:Tomato"&gt;&lt;/i&gt;
        &lt;/span&gt;
        &lt;span class="post-meta-item-text" style="color:Tomato;font-weight:bold;"&gt;
          &lt;i class="article-topping"&gt;{{ __('post.sticky') }}&lt;/i&gt;
        &lt;/span&gt;
    &lt;/span&gt;
{%- endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>_config.next.yml</code> 设置:</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">custom_file_path:
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  #postMeta: source/_data/post-meta.swig
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  postMeta: source/_data/post-meta.swig</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="静态资源压缩插件"><a href="#静态资源压缩插件" class="headerlink" title="静态资源压缩插件"></a>静态资源压缩插件</h3><p>  地址:<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们需要在<code>站点配置</code>文件中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 博文压缩</span>
<span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># 压缩html</span>
<span class="token key atrule">neat_html</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
<span class="token comment"># 压缩css</span>
<span class="token key atrule">neat_css</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span>
<span class="token comment"># 压缩js</span>
<span class="token key atrule">neat_js</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">output</span><span class="token punctuation">:</span>
  <span class="token key atrule">compress</span><span class="token punctuation">:</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/jquery.fancybox.pack.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/index.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/fireworks.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="推荐文章插件"><a href="#推荐文章插件" class="headerlink" title="推荐文章插件"></a>推荐文章插件</h3><p>  地址:<a href="https://github.com/tea3/hexo-related-popular-posts">hexo-related-popular-posts</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-related-popular-posts --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  我们只需要在<code>主题配置</code>文件中修改：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">related_posts</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 相关文章推荐 <span class="token comment"># Custom header, leave empty to use the default one</span>
  <span class="token key atrule">display_in_home</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">params</span><span class="token punctuation">:</span>
    <span class="token key atrule">maxCount</span><span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token key atrule">PPMixingRate</span><span class="token punctuation">:</span> <span class="token number">0.25</span>
    <span class="token key atrule">isDate</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">isImage</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">isExcerpt</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="emoji-表情支持"><a href="#emoji-表情支持" class="headerlink" title="emoji 表情支持"></a>emoji 表情支持</h3><p>  地址:<a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a><br>  <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">图标</a><br>  安装插件: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  站点配置文件 <code>.config.yml</code> 中增加：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">emoji</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji
  <span class="token key atrule">styles</span><span class="token punctuation">:</span>
  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  或者</p>
<p><code>hexo-filter-github-emojis</code></p>
<h3 id="加密插件"><a href="#加密插件" class="headerlink" title="加密插件"></a>加密插件</h3><p>  地址：<a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a><br>  我们需要在文章开头添加：</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">---</span>
title: 射频微波基础知识（二）
declare: true
toc: true
tags:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> - 射频电路
</span></span>categories:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> - RF
</span><span class="token prefix unchanged"> </span><span class="token line"> - 射频电路
</span></span>mathjax: true
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">password: 
</span><span class="token prefix inserted">+</span><span class="token line">abstract: 有东西被加密了，请输入密码查看
</span><span class="token prefix inserted">+</span><span class="token line">message: 请输入密码
</span></span><span class="token coord">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="侧栏头像动画"><a href="#侧栏头像动画" class="headerlink" title="侧栏头像动画"></a>侧栏头像动画</h3><p>  先从简单的开始吧！修改头像其实很简单，直接把头像放进 <code>next/source/images/</code> 下，然后再主题配置文件中，找到以下部分：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sidebar Avatar</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span>
  <span class="token comment"># In theme directory (source/images): /images/avatar.gif</span>
  <span class="token comment"># In site directory (source/uploads): /uploads/avatar.gif</span>
  <span class="token comment"># You can also use other linking images.</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.jpg
  <span class="token comment"># If true, the avatar would be dispalyed in circle.</span>
  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span>
  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment"># If true, the avatar would be rotated with the cursor.</span>
  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在 <code>url</code> 处指定头像文件即可，头像可以是网络图片，只需要把本地路径替换为网络图片的网址即可。另外，当打开了 <code>rotated</code> 后，鼠标移到头像处会逆时针旋转半圈，鼠标移开又转回来，不过这个效果看起来好像也比较普通，如果你想让鼠标一过去头像就控记不住记几鬼畜疯狂旋转，就像这样：</p>
<img data-src="/post/dfea82e5/avatar_rotate_hover.gif" class="" title="hover">
<p>  请找到这个文件并愤怒地打开它：<code>source/_data/styles.styl</code>，然后做如下部分修改：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">if hexo-config('avatar.rotated')</span> <span class="token punctuation">{</span>
  <span class="token selector">.site-author-image</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform 1.0s ease-out<span class="token punctuation">;</span>
    <span class="token comment">/*animation: rotate 5s linear infinite;*/</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*@keyframes rotate{from{transform: rotate(0deg)}
  to{transform: rotate(360deg)}
  }*/</span>

  <span class="token comment">/* 原本只是简单地逆时针旋转 180°
  .site-author-image:hover {
    transform: rotateZ(-180deg);
  }
  */</span>
  <span class="token selector">.site-author-image:hover</span> <span class="token punctuation">{</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> rotate 0.15s linear infinite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span><span class="token punctuation">{</span><span class="token selector">from</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token selector">to</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>.site-author-image:hover</code> 就是鼠标覆盖上去时的代码，代码的意思就是：动画是 rotate，时间是 0.15 秒（也即 0.15 秒转一圈），动画速度是线性，动画重复无限次，在下方定义了旋转的角度是从 0 ~ 360°，其中正数是顺时针旋转，负数是逆时针旋转。设置完了以后别忘了 Hexo 三连一下试试效果。如果你不想这么鬼畜，想走文艺路线，就换一下注释并且让它转的缓慢一点唱片式旋转，变成：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">if hexo-config('avatar.rotated')</span> <span class="token punctuation">{</span>
  <span class="token selector">.site-author-image</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform 1.0s ease-out<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> rotate 5s linear infinite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span><span class="token punctuation">{</span><span class="token selector">from</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token selector">to</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.site-author-image:hover</span> <span class="token punctuation">{</span>
    <span class="token comment">/*animation: rotate 0.15s linear infinite;*/</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*@keyframes rotate{from{transform: rotate(0deg)}
  to{transform: rotate(360deg)}
  }*/</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/dfea82e5/avatar_rotate_normal.gif" class="" title="hover">

<h3 id="languages-yml"><a href="#languages-yml" class="headerlink" title="languages.yml"></a>languages.yml</h3><p>  我们原来是通过配置主题下的 <code>languages</code> 目录中的 <code>zh-CN.yml</code> 文件来对菜单等进行中文翻译的，现在我们可以通过在 <code>hexo/source/_data/</code> 下新建数据文件 <code>languages.yml</code>，配置如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">zh-CN</span><span class="token punctuation">:</span>
  <span class="token key atrule">menu</span><span class="token punctuation">:</span>
    <span class="token key atrule">home</span><span class="token punctuation">:</span> 首页
    <span class="token key atrule">archives</span><span class="token punctuation">:</span> 归档
    <span class="token key atrule">categories</span><span class="token punctuation">:</span> 分类
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> 标签
    <span class="token key atrule">about</span><span class="token punctuation">:</span> 关于
    <span class="token key atrule">search</span><span class="token punctuation">:</span> 搜索
    <span class="token key atrule">schedule</span><span class="token punctuation">:</span> 日程表
    <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> 站点地图
    <span class="token key atrule">commonweal</span><span class="token punctuation">:</span> 公益 404
    <span class="token key atrule">message</span><span class="token punctuation">:</span> 留言
    <span class="token key atrule">links</span><span class="token punctuation">:</span> 友情链接

  <span class="token key atrule">reward</span><span class="token punctuation">:</span>
    <span class="token key atrule">donate</span><span class="token punctuation">:</span> 打赏
    <span class="token key atrule">wechatpay</span><span class="token punctuation">:</span> 微信支付
    <span class="token key atrule">alipay</span><span class="token punctuation">:</span> 支付宝
    <span class="token key atrule">paypal</span><span class="token punctuation">:</span> 贝宝
    <span class="token key atrule">bitcoin</span><span class="token punctuation">:</span> 比特币<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<hr>

<blockquote>
<p>其他博客<br><a href="https://www.simon96.online/">遇见西门</a><br><a href="https://zhousiwei.gitee.io/">試毅-思伟</a><br><a href="https://blog.dlzhang.com/">班班碎碎念</a><br><a href="https://me.idealli.com/">小红鸡</a></p>
</blockquote>
<hr>

<blockquote>
<p>其他相关链接<br><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">[持续更新]最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a><br><a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a><br><a href="https://www.hojun.cn/2018/01/25/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E2%80%94%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%8B%85%E5%BF%83%E4%BD%A0%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/">Hexo博客备份</a><br><a href="https://notes.doublemine.me/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html">Doublemine</a><br><a href="https://www.dazhuanlan.com/2019/10/25/5db2632c401b8/">大专栏</a></p>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Nginx--两种方式</title>
    <url>/post/69813a0e.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Nginx是一个高性能的Web和反向代理服务器,它具有有很多非常优越的特性:<br>  <b>作为Web服务器</b>: 相比Apache，Nginx 使用更少的资源，支持更多 的并发连接，体现更高的效率，这点使Nginx尤其受到虚拟主机提供商的欢迎。能够支持高达50,000个并发连接数的响应，感谢Nginx为我们选择了epoll and kqueue作为开发模型.</p>
<a id="more"></a>
<p>  <b>作为负载均衡服务器</b>: Nginx 既可以在内部直接支持Rails和PHP，也可以支持作为HTTP代理服务器对外进行服务。Nginx 用C编写,不论是系统资源开销还是CPU使用效率都比Perlbal要好的多。<br>  <b>作为邮件代理服务器</b>: Nginx 同时也是一个非常优秀的邮件代理服务器(最早开发这个产品的目的之一也是作为邮件代理服务器)，Last.fm 描述了成功并且美妙的使用经验。<br>  <b>Nginx安装非常的简单，配置文件非常简洁(还能够支持perl语法)，Bugs非常少的服务器</b>: Nginx启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下进行软件版本的升级。</p>
<h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><h4 id="yum仓库配置"><a href="#yum仓库配置" class="headerlink" title="yum仓库配置"></a>yum仓库配置</h4><p>  在<code>/etc/yum.repos.d/</code>下新建一个nginx.repo，加入<a href="http://nginx.org/en/linux_packages.html">nginx官方提供的源</a> , <a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/">Installing NGINX Open Source</a></p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>
name<span class="token operator">=</span>nginx repo
baseurl<span class="token operator">=</span><span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>packages<span class="token operator">/</span><span class="token operator">&lt;</span>OS<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&lt;</span>OSRELEASE<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token variable">$basearch</span><span class="token operator">/</span>
gpgcheck<span class="token operator">=</span><span class="token number">0</span>
enabled<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  注意其中的<code>&lt;OS&gt;</code> 为系统名，<code>&lt;OSRELEASE&gt;</code>为系统大版本</p>
<ol>
<li>CentOS7<br><code>vi /etc/yum.repos.d/nginx.repo</code><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>
name<span class="token operator">=</span>nginx repo
baseurl<span class="token operator">=</span><span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>packages<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span><span class="token variable">$basearch</span><span class="token operator">/</span>
gpgcheck<span class="token operator">=</span><span class="token number">0</span>
enabled<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>CentOS6<br><code>vi /etc/yum.repos.d/nginx.repo</code><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>
name<span class="token operator">=</span>nginx repo
baseurl<span class="token operator">=</span><span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>packages<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">6</span><span class="token operator">/</span><span class="token variable">$basearch</span><span class="token operator">/</span>
gpgcheck<span class="token operator">=</span><span class="token number">0</span>
enabled<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ol>
<li>直接安装会安装当前的最新版本<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>该源仓库下有多个版本的nginx可供安装，可以用如下命令查看<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum --showduplicates list nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>选择其中一个版本安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y nginx-版本号
<span class="token comment"># 如下</span>
yum <span class="token function">install</span> -y <span class="token number">1.18</span>.0-1.el6.ngx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h4 id="禁止更新"><a href="#禁止更新" class="headerlink" title="禁止更新"></a>禁止更新</h4><p>  我们在安装之后，为了能够正常运行，我们一般会禁止Nginx进行更新。因为在yum更新了Nginx之后，Nginx会自动重启。这对于我们来说是没有必要的，所以我们可以屏蔽更新。我们可以这样，将下列指定放到你的<code>/etc/yum.conf</code>文件中：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">exclude</span><span class="token punctuation">=</span><span class="token attr-value">nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="更新Nginx"><a href="#更新Nginx" class="headerlink" title="更新Nginx"></a>更新Nginx</h4><p>  一般在生产环境，我们都是禁用更新的。所以说，这里只是作为一个参考<br>  我们需要执行的命令就是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code> 注意： 在使用 yum 更新之后，Nginx会自动重启。</code></p>
<h4 id="命令管理"><a href="#命令管理" class="headerlink" title="命令管理"></a>命令管理</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginx   <span class="token comment"># 启动</span>
systemctl restart nginx <span class="token comment"># 重启</span>
nginx -t                <span class="token comment"># 测试配置文件语法是否正确</span>
systemctl reload nginx  <span class="token comment"># 重载配置文件</span>
systemctl stop nginx    <span class="token comment"># 停止</span>
systemctl <span class="token builtin class-name">enable</span> nginx  <span class="token comment"># 启动开机启动</span>
systemctl diasble nginx <span class="token comment"># 禁止开机启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="源代码安装"><a href="#源代码安装" class="headerlink" title="源代码安装"></a>源代码安装</h3><p>  如果已安装，则remove掉<code>yum remove nginx</code></p>
<h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>  安装wget并下载nginx源码包， 去 <a href="http://nginx.org/download/">http://nginx.org/download/</a> 可以找到历史版本的包</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> http://nginx.org/download/nginx-1.19.2.tar.gz

<span class="token function">tar</span> -zxvf nginx-1.19.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">groupadd</span> www
<span class="token function">useradd</span> -g www www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p> useradd -g www -s /sbin/nologin -M www</p>
</blockquote>
<h4 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h4><ol>
<li>安装gcc<br>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境。安装指令如下：<br>安装gcc<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y <span class="token function">install</span> gcc automake autoconf libtool <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
安装g++<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装PCRE pcre-devel<br>Nginx的Rewrite模块和HTTP核心模块会使用到PCRE正则表达式语法。这里需要安装两个安装包pcre和pcre-devel。第一个安装包提供编译版本的库，而第二个提供开发阶段的头文件和编译项目的源代码。安装指令如下：<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装zlib<br>zlib库提供了开发人员的压缩算法，在Nginx的各种模块中需要使用gzip压缩。安装指令如下:<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装Open SSL<br>nginx不仅支持 http协议，还支持 https（即在 ssl 协议上传输 http），如果使用了 https，需要安装 OpenSSL 库。安装指令如下：<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
环境结束.</li>
</ol>
<h4 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h4><p>没有特别配置，直接<code>./configure</code>就好了。安装完成后可以通过<code>nginx -V</code>查看选择的模块。</p>
<p>部分编译参数说明</p>
<table>
<tbody><tr>
<th>参数</th>
<th>描述</th>
</tr>
<tr>
<td>--prefix</td>
<td>定义nginx安装路径</td>
</tr>
<tr>
<td>--sbin-path</td>
<td>定义nginx可执行文件路径</td>
</tr>
<tr>
<td>--modules-path</td>
<td>nginx模块路径</td>
</tr>
<tr>
<td>--conf-path</td>
<td>nginx配置文件路径</td>
</tr>
<tr>
<td>--error-log-path、--http-log-path</td>
<td>错误和访问日志路径</td>
</tr>
<tr>
<td>--with-openssl</td>
<td>定义编译使用的openssl，默认为系统自带openssl</td>
</tr>
<tr>
<td>--with-http_ssl_module</td>
<td>ssl模块</td>
</tr>
</tbody></table>

<br>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/nginx \</span>
--sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">\</span>
--modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules <span class="token punctuation">\</span>
--conf-path<span class="token operator">=</span>/usr/local/nginx/nginx.conf <span class="token punctuation">\</span>
--error-log-path<span class="token operator">=</span>/usr/local/nginx/error.log <span class="token punctuation">\</span>
--http-log-path<span class="token operator">=</span>/usr/local/nginx/access.log <span class="token punctuation">\</span>
--pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid <span class="token punctuation">\</span>
--lock-path<span class="token operator">=</span>/usr/local/nginx/nginx.lock <span class="token punctuation">\</span>
--http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/client_temp <span class="token punctuation">\</span>
--http-proxy-temp-path<span class="token operator">=</span>/usr/local/nginx/proxy_temp <span class="token punctuation">\</span>
--http-fastcgi-temp-path<span class="token operator">=</span>/usr/local/nginx/fastcgi_temp <span class="token punctuation">\</span>
--http-uwsgi-temp-path<span class="token operator">=</span>/usr/local/nginx/uwsgi_temp <span class="token punctuation">\</span>
--http-scgi-temp-path<span class="token operator">=</span>/usr/local/nginx/scgi_temp <span class="token punctuation">\</span>
--user<span class="token operator">=</span>www <span class="token punctuation">\</span>
--group<span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-compat <span class="token punctuation">\</span>
--with-file-aio <span class="token punctuation">\</span>
--with-threads <span class="token punctuation">\</span>
--with-http_addition_module <span class="token punctuation">\</span>
--with-http_auth_request_module <span class="token punctuation">\</span>
--with-http_dav_module <span class="token punctuation">\</span>
--with-http_flv_module <span class="token punctuation">\</span>
--with-http_gunzip_module <span class="token punctuation">\</span>
--with-http_gzip_static_module <span class="token punctuation">\</span>
--with-http_mp4_module <span class="token punctuation">\</span>
--with-http_random_index_module <span class="token punctuation">\</span>
--with-http_realip_module <span class="token punctuation">\</span>
--with-http_secure_link_module <span class="token punctuation">\</span>
--with-http_slice_module <span class="token punctuation">\</span>
--with-http_ssl_module <span class="token punctuation">\</span>
--with-http_stub_status_module <span class="token punctuation">\</span>
--with-http_sub_module <span class="token punctuation">\</span>
--with-http_v2_module <span class="token punctuation">\</span>
--with-mail <span class="token punctuation">\</span>
--with-mail_ssl_module <span class="token punctuation">\</span>
--with-stream <span class="token punctuation">\</span>
--with-stream_realip_module <span class="token punctuation">\</span>
--with-stream_ssl_module <span class="token punctuation">\</span>
--with-stream_ssl_preread_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<img data-src="/post/69813a0e/nginx-001.png" class="" title="nginx编译输出">

<p>上面的编译是使用了系统默认的openssl，如果想使用更高版本的openssl进行编译的话。可以加上<code>--with-openssl=openssl安装路径</code>来自定义。高版本的openssl安装可以参考 <a href="https://www.jianshu.com/p/bf5a55a0a814">这篇文章</a>。</p>
<p><code>--with-openssl</code> 参数虽然可以指定 OpenSSL 路径，但只支持 OpenSSL 的源代码，不支持已编译好的 OpenSSL。每回更新 nginx 都要重新编译 OpenSSL 很麻烦 。以下是解决方案<br>打开nginx源码解压目录下的<code>auto/lib/openssl/conf</code>,找到所有带<code>.openssl</code>的行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">CORE_INCS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_INCS</span> <span class="token variable">$OPENSSL</span>/.openssl/include"</span>
<span class="token assign-left variable">CORE_DEPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_DEPS</span> <span class="token variable">$OPENSSL</span>/.openssl/include/openssl/ssl.h"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/.openssl/lib/libssl.a"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/.openssl/lib/libcrypto.a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>改成下面的样子，去掉<code>.openssl/</code></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">CORE_INCS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_INCS</span> <span class="token variable">$OPENSSL</span>/include"</span>
<span class="token assign-left variable">CORE_DEPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_DEPS</span> <span class="token variable">$OPENSSL</span>/include/openssl/ssl.h"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/lib/libssl.a"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/lib/libcrypto.a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进行编译</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/nginx \</span>
--sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">\</span>
--modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules <span class="token punctuation">\</span>
--conf-path<span class="token operator">=</span>/usr/local/nginx/nginx.conf <span class="token punctuation">\</span>
--error-log-path<span class="token operator">=</span>/usr/local/nginx/error.log <span class="token punctuation">\</span>
--http-log-path<span class="token operator">=</span>/usr/local/nginx/access.log <span class="token punctuation">\</span>
--pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid <span class="token punctuation">\</span>
--lock-path<span class="token operator">=</span>/usr/local/nginx/nginx.lock <span class="token punctuation">\</span>
--http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/client_temp <span class="token punctuation">\</span>
--http-proxy-temp-path<span class="token operator">=</span>/usr/local/nginx/proxy_temp <span class="token punctuation">\</span>
--http-fastcgi-temp-path<span class="token operator">=</span>/usr/local/nginx/fastcgi_temp <span class="token punctuation">\</span>
--http-uwsgi-temp-path<span class="token operator">=</span>/usr/local/nginx/uwsgi_temp <span class="token punctuation">\</span>
--http-scgi-temp-path<span class="token operator">=</span>/usr/local/nginx/scgi_temp <span class="token punctuation">\</span>
--user<span class="token operator">=</span>www <span class="token punctuation">\</span>
--group<span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-compat <span class="token punctuation">\</span>
--with-file-aio <span class="token punctuation">\</span>
--with-threads <span class="token punctuation">\</span>
--with-http_addition_module <span class="token punctuation">\</span>
--with-http_auth_request_module <span class="token punctuation">\</span>
--with-http_dav_module <span class="token punctuation">\</span>
--with-http_flv_module <span class="token punctuation">\</span>
--with-http_gunzip_module <span class="token punctuation">\</span>
--with-http_gzip_static_module <span class="token punctuation">\</span>
--with-http_mp4_module <span class="token punctuation">\</span>
--with-http_random_index_module <span class="token punctuation">\</span>
--with-http_realip_module <span class="token punctuation">\</span>
--with-http_secure_link_module <span class="token punctuation">\</span>
--with-http_slice_module <span class="token punctuation">\</span>
--with-http_ssl_module <span class="token punctuation">\</span>
--with-http_stub_status_module <span class="token punctuation">\</span>
--with-http_sub_module <span class="token punctuation">\</span>
--with-http_v2_module <span class="token punctuation">\</span>
--with-mail <span class="token punctuation">\</span>
--with-mail_ssl_module <span class="token punctuation">\</span>
--with-stream <span class="token punctuation">\</span>
--with-stream_realip_module <span class="token punctuation">\</span>
--with-stream_ssl_module <span class="token punctuation">\</span>
--with-openssl<span class="token operator">=</span>/usr/local/openssl <span class="token punctuation">\</span>
--with-stream_ssl_preread_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<img data-src="/post/69813a0e/nginx-002.png" class="" title="nginx编译输出">


<p>部分编译参数说明</p>
<table>
<tbody><tr>
<th>参数选项</th>
<th>基本解释</th>
</tr>
<tr>
<td>–help</td>
<td>打印帮助信息</td>
</tr>
<tr>
<td>–prefix=PATH</td>
<td>Nginx安装部署后的根目录 默认为/usr/local/nginx目录。注意：这个目标的设置会影响其他参数中的相对目录。例如，如果设置了–sbin-path=sbin/nginx，那么实际上可执行文件会被放到/usr/local/nginx/sbin/nginx中</td>
</tr>
<tr>
<td>–sbin-path=PATH</td>
<td>可执行文件的放置路径 &lt;prefix&gt;/sbin/nginx </td>
</tr>
<tr>
<td>–conf-path=PATH</td>
<td>配置文件的放置路径 &lt;prefix&gt;/conf/nginx.conf</td>
</tr>
<tr>
<td>–error-log-path=PATH</td>
<td>error日志文件的放置路径。error日志用于定位问题，可输出多种级别（包括debug调试级别）的日志。它的配置非常灵活，可以在nginx.conf里配置为不同请求的日志并输出到不同的log文件中。这里是默认的Nginx核心日志路径 &lt;prefix&gt;/logs/error.log</td>
</tr>
<tr>
<td>–pid-path=PATH</td>
<td>pid文件的存放路径。这个文件里仅以ASC II码存放着Nginx master的进程ID，有了这个进程ID，在使用命令行（例如nginx -s reload）通过读取master进程ID向master进程发送信号时，才能对运行中的Nginx服务产生作用 &lt;prefix&gt;/logs/nginx.pid</td>
</tr>
<tr>
<td>–lock-path=PATH</td>
<td>lock文件的放置路径 &lt;prefix&gt;/logs/nginx.lock</td>
</tr>
<tr>
<td>–user=USER</td>
<td>指定Nginx worker进程运行时所属的用户。注意：不要将启动worker进程的用户设为root，在worker进程出问题时master进程要具备停止/启动worker进程的能力</td>
</tr>
<tr>
<td>–group=GROUP</td>
<td>指定Nginx worker进程运行时所属的组</td>
</tr>
<tr>
<td>–build=NAME</td>
<td>configure执行时与编译期间产生的临时文件名称</td>
</tr>
<tr>
<td>–builddir=DIR</td>
<td>configure执行时与编译期间产生的临时文件放置的目录，包括产生的Makefile、C源文件、目标文件、可执行文件等 &lt;nginx source path&gt;/objs</td>
</tr>
<tr>
<td>–with-rtsig_module</td>
<td>使用rtsig module处理事件驱动 默认情况下，Nginx是不安装rtsig module的，即不会把rtsig module编译进最终的Nginx二进制程序中</td>
</tr>
<tr>
<td>–with-select_module</td>
<td>使用select module处理事件驱动 select是Linux提供的一种多路复用机制，在epoll调用没有诞生前，例如在Linux 2.4及其之前的内核中，select用于支持服务器提供高并发连接 默认情况下，Nginx是不安装select module的，但如果没有找到其他更好的事件模块，该模块将会被安装</td>
</tr>
<tr>
<td>–without-select_module</td>
<td>不安装select module</td>
</tr>
<tr>
<td>–with-poll_module</td>
<td>使用poll module处理事件驱动 poll的性能与select类似，在大量并发连接下性能都远不如epoll。默认情况下，Nginx是不安装poll</td>
</tr>
<tr>
<td>–without-poll_module</td>
<td>不安装poll module</td>
</tr>
<tr>
<td>–with-file-aio</td>
<td>使用AIO方式处理事件驱动 (IO异步大幅度提升性能，需要内核 2.6.22 以上的版本)</td>
</tr>
<tr>
<td>–with-ipv6</td>
<td>使Nginx支持IPv6</td>
</tr>
<tr>
<td>–with-https_ssl_module</td>
<td>安装https ssl module。该模块使Nginx支持SSL协议，提供HTTPS服务。 注意：该模块的安装依赖于OpenSSL开源软件，即首先应确保已经在之前的参数中配置了OpenSSL需要安装 OpenSSL library yum install openssl-devel | # apt-get install libssl-dev</td>
</tr>
<tr>
<td>–with-https_spdy_module</td>
<td>开启 ngx_https_spdy_module 模块。是Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强</td>
</tr>
<tr>
<td>–with-https_realip_module</td>
<td>开启 ngx_https_realip_module 模块 。此模块支持显示真实来源IP地址，主要用于NGINX做前端负载均衡服务器使用。</td>
</tr>
<tr>
<td>–with-https_addition_module</td>
<td>开启 https addtion module。该模块可以在返回客户端的HTTP包体头部或者尾部增加内容。作为一个输出过滤器，支持不完全缓冲，分部分响应请求，游戏服务器不必安装，门户网站可以安装，有利于被搜索引擎收录页面信息。</td>
</tr>
<tr>
<td>–with-https_xslt_module</td>
<td>开启 ngx_https_xslt_module 模块 这个模块可以使XML格式的数据在发给客户端前加入XSL渲染，0.7.8后面版本才可以使用。</td>
</tr>
<tr>
<td>–with-https_image_filter_module</td>
<td>开启 ngx_https_image_filter_module 模块 。这个模块将符合配置的图片实时压缩为指定大小（width*height）的缩略图再发送给用户，目前支持JPEG、PNG、GIF格式。 注意：这个模块依赖于开源的libgd库，在安装前确保操作系统已经安装了libgd，是nginx提供的集成图片处理模块，支持nginx-0.7.54以后的版本，在网站访问量不是很高磁盘有限不想生成多余的图片文件的前提下可，就可以用它实时缩放图片，旋转图片，验证图片有效性以及获取图片宽高以及图片类型信息，由于是即时计算的结果，所以网站访问量大的话，不建议使用。</td>
</tr>
<tr>
<td>–with-https_geoip_module</td>
<td>开启 ngx_https_geoip_module 模块，这个模块基于客户端的IP地址创建一些ngx_https_geoip_module变量，并与MaxMindGeoIP文件进行匹配，该模块仅用于0.7.63和0.8.6版本之后。 需要安装 yum install geoip-devel | apt-get install geoip-bin geoip-database libgeoip-dev</td>
</tr>
<tr>
<td>–with-https_sub_module</td>
<td>开启 ngx_https_sub_module 。该模块可以在Nginx返回客户端的HTTP响应包中将指定的字符串替换为自己需要的字符串 例如，在HTML的返回中，将替换为<script language="”javascript”" src="”$script”"></script></td>
</tr>
<tr>
<td>–with-https_dav_module</td>
<td>开启 ngx_https_dav_module 模块。这个模块可以让Nginx支持Webdav标准，如支持Webdav协议中的PUT、DELETE、COPY、MOVE、MKCOL等请求 默认情况下为关闭，需编译开启,如果开启WebDAV扩展动作模块，（可为文件和目录指定权限）</td>
</tr>
<tr>
<td>–with-https_flv_module</td>
<td>开启 ngx_https_flv_module 模块 ，这个模块可以在向客户端返回响应时，对FLV格式的视频文件在header头做一些处理，使得客户端可以观看、拖动FLV视频</td>
</tr>
<tr>
<td>–with-https_mp4_module</td>
<td>开启 ngx_https_mp4_module 模块，该模块使客户端可以观看、拖动MP4视频</td>
</tr>
<tr>
<td>–with-https_gunzip_module</td>
<td>开启 ngx_https_gunzip_module 模块，是一个过滤器， 它为不支持“gzip”编码方法的客户端解压具有“Content-Encoding: gzip”头的响应。 当希望存储压缩后的数据以节省空间和减少I/O开销，又不希望对那些不支持gzip压缩的客户端造成不利影响时， 此模块会派上用途</td>
</tr>
<tr>
<td>–with-https_gzip_static_module</td>
<td>开启 ngx_https_gzip_static_module 模块 ，允许发送以“.gz”作为文件扩展名的预压缩文件，防止文件被重复压缩，以替代发送普通文件。如果采用gzip模块把一些文档进行gzip格式压缩后再返回给客户端，那么对同一个文件每次都会重新压缩，这是比较消耗服务器CPU资源的。</td>
</tr>
<tr>
<td>–with-https_auth_request_module</td>
<td>开启 ngx_https_auth_request_module 模块</td>
</tr>
<tr>
<td>–with-https_random_index_module</td>
<td>开启 ngx_https_random_index_module 模块 ，该模块在客户端访问某个目录时，随机返回该目录下的索引文件</td>
</tr>
<tr>
<td>–with-https_secure_link_module</td>
<td>开启 ngx_https_secure_link_module ，该模块提供一种验证请求是否有效的机制。例如，它会验证URL中需要加入的token参数是否属于特定客户端发来的，以及检查时间戳是否过期（计算和检查要求所需的安全链接网址（防盗链））</td>
</tr>
<tr>
<td>–with-https_degradation_module</td>
<td>开启 ngx_https_degradation_module 模块，该模块针对一些特殊的系统调用（如sbrk）做一些优化，允许在内存不足的情况下返回204或444码。</td>
</tr>
<tr>
<td>–with-https_stub_status_module</td>
<td>开启 ngx_https_stub_status_module 模块，该模块可以让运行中的Nginx提供性能统计页面，获取相关的并发连接、请求的信息</td>
</tr>
<tr>
<td>–without-https_charset_module</td>
<td>关闭 https charset module。这个模块可以将服务器发出的HTTP响应重编码</td>
</tr>
<tr>
<td>–without-https_gzip_module</td>
<td>关闭 ngx_https_gzip_module模块，在服务器发出的HTTP响应包中，这个模块可以按照配置文件指定的content-type对特定大小的HTTP响应包体执行gzip压缩</td>
</tr>
<tr>
<td>–without-https_ssi_module</td>
<td>关闭 ngx_https_ssi_module模块，该模块可以在向用户返回的HTTP响应包体中加入特定的内容，如HTML文件中固定的页头和页尾</td>
</tr>
<tr>
<td>–without-https_userid_module</td>
<td>关闭 ngx_https_userid_module模块，这个模块可以通过HTTP请求头部信息里的一些字段认证用户信息，以确定请求是否合法</td>
</tr>
<tr>
<td>–without-https_access_module</td>
<td>关闭 访问模块，这个模块可以根据IP地址限制能够访问服务器的客户端</td>
</tr>
<tr>
<td>–without-https_auth_basic_module</td>
<td>禁用基本的认证模块，这个模块可以提供最简单的用户名/密码认证</td>
</tr>
<tr>
<td>–without-https_autoindex_module</td>
<td>禁用自动索引模块，该模块提供简单的目录浏览功能</td>
</tr>
<tr>
<td>–without-https_geo_module</td>
<td>禁用Geo模块，这个模块可以定义一些变量，这些变量的值将与客户端IP地址关联，这样Nginx针对不同的地区的客户端（根据IP地址判断）返回不一样的结果，例如不同地区显示不同语言的网页</td>
</tr>
<tr>
<td>–without-https_map_module</td>
<td>禁用Map模块，这个模块可以建立一个key/value映射表，不同的key得到相应的value，这样可以针对不同的URL做特殊处理。例如，返回302重定向响应时，可以期望URL不同时返回的Location字段也不一样</td>
</tr>
<tr>
<td>–without-https_split_clients_module</td>
<td>切割客户端IP，该模块会根据客户端的信息，例如IP地址、header头、cookie等，来区分处理，nginx 的 Split Clients（切割客户端IP）的作用是使用 MurmurHash2 哈希算法对客户端的IP进行运算，得到一个32位的整数，这个数值范围从 0~4294967296，匹配不同的区间位置，得到不同的值赋予某个变量。最后根据这变量的不同，作不同的逻辑处理。</td>
</tr>
<tr>
<td>–without-https_referer_module</td>
<td>该模块可以根据请求中的referer字段来拒绝请求</td>
</tr>
<tr>
<td>–without-https_rewrite_module</td>
<td>禁用Rewrite模块，该模块提供HTTP请求在Nginx服务内部的重定向功能，依赖PCRE库</td>
</tr>
<tr>
<td>–without-https_proxy_module</td>
<td>禁用代理模块。该模块提供基本的HTTP反向代理功能</td>
</tr>
<tr>
<td>–without-https_fastcgi_module</td>
<td>禁用FastCGI模块。该模块提供FastCGI功能</td>
</tr>
<tr>
<td>–without-https_uwsgi_module</td>
<td>禁用uwsgi模块。该模块提供uWSGI功能</td>
</tr>
<tr>
<td>–without-https_scgi_module</td>
<td>禁用scqi模块。该模块提供SCGI功能</td>
</tr>
<tr>
<td>–without-https_memcached_module</td>
<td>禁用Memcached模块。该模块可以使得Nginx直接由上游的memcached服务读取数据，并简单地适配成HTTP响应返回给客户端</td>
</tr>
<tr>
<td>–without-https_limit_conn_module</td>
<td>禁用limit_conn_zone模块，该模块针对某个IP地址限制并发连接数。例如，使Nginx对一个IP地址仅允许一个连接。</td>
</tr>
<tr>
<td>–without-https_limit_req_module</td>
<td>禁用Limit Requests模块。该模块针对某个IP地址限制并发请求数</td>
</tr>
<tr>
<td>–without-https_empty_gif_module</td>
<td>禁用Empty Gif模块。该模块可以使得Nginx在收到无效请求时，立刻返回内存中的1×1像素的GIF图片。这种好处在于，对于明显的无效请求不会去试图浪费服务器资源</td>
</tr>
<tr>
<td>–without-https_browser_module</td>
<td>禁用Browser 模块。该模块会根据HTTP请求中的user-agent字段（该字段通常由浏览器填写）来识别浏览器</td>
</tr>
<tr>
<td>–without-https_upstream_hash_module</td>
<td>禁用Upstream模块。该模块用于配置负载均衡结构</td>
</tr>
<tr>
<td>–without-https_upstream_ip_hash_module</td>
<td>禁用Upstream模块 该模块提供当Nginx与后端server建立连接时，会根据IP做散列运算来决定与后端哪台server通信，这样可以实现负载均衡</td>
</tr>
<tr>
<td>–without-https_upstream_least_conn_module</td>
<td>禁用Upstream模块 中的 least 负载均衡算法</td>
</tr>
<tr>
<td>–without-https_upstream_keepalive_module</td>
<td>禁用Upstream模块 中的 keepalive 负载均衡算法</td>
</tr>
<tr>
<td>–with-https_perl_module</td>
<td>需要安装 perl # yum install perl-ExtUtils-Embed | # apt-get install libperl-dev</td>
</tr>
<tr>
<td>–with-perl_modules_path=PATH</td>
<td>perl module放置的路径。只有使用了第三方的perl module，才需要配置这个路径</td>
</tr>
<tr>
<td>–with-perl=PATH</td>
<td>perl binary放置的路径。如果配置的Nginx会执行Perl脚本，那么就必须要设置此路径</td>
</tr>
<tr>
<td>–https-log-path=PATH</td>
<td>access日志放置的位置。每个HTTP请求到结束时都会记录 &lt;prefix&gt;/logs/access.log</td>
</tr>
<tr>
<td>–https-client-body-temp-path=PATH</td>
<td> 处理HTTP请求时如果请求的包体需要暂时存放到临时磁盘文件中，则把这样的临时文件放置到该路径下 &lt;prefix&gt;/client_body_temp </td>
</tr>
<tr>
<td>–https-proxy-temp-path=PATH</td>
<td>Nginx作为HTTP反向代理服务器时，上游服务器产生的HTTP包体在需要临时存放到磁盘文件时，这样的临时文件将放到该路径下 &lt;prefix&gt;/proxy_temp </td>
</tr>
<tr>
<td>–https-fastcgi-temp-path=PATH</td>
<td>Fastcgi所使用临时文件的放置目录 &lt;prefix&gt;/fastcgi_temp</td>
</tr>
<tr>
<td>–https-uwsgi-temp-path=PATH</td>
<td>uWSGI所使用临时文件的放置目录 &lt;prefix&gt;/uwsgi_temp</td>
</tr>
<tr>
<td>–https-scgi-temp-path=PATH</td>
<td>SCGI所使用临时文件的放置目录 &lt;prefix&gt;/scgi_temp</td>
</tr>
<tr>
<td>–without-https</td>
<td>禁用HTTP服务</td>
</tr>
<tr>
<td>–without-https-cache</td>
<td>禁用HTTP 缓冲功能</td>
</tr>
<tr>
<td>–with-mail</td>
<td>开启邮件服务代理(mail server proxy)模块,支 持POP3, IMAP4和SMTP。该功能默认禁用</td>
</tr>
<tr>
<td>–with-mail_ssl_module</td>
<td>开启邮件代理服务对SSL的支持。该功能默认禁用</td>
</tr>
<tr>
<td>–without-mail_pop3_module</td>
<td>在邮件代理下禁用POP3功能。在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–without-mail_imap_module</td>
<td>对邮件代理服务器禁用IMAP4模块，在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–without-mail_smtp_module</td>
<td>对于邮件代理服务器禁用SMTP模块，在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–with-google_perftools_module</td>
<td>Google的针对nginx性能调优的工具，需要安装：yum install gperftools gperftools-devel</td>
</tr>
<tr>
<td>–with-cpp_test_module</td>
<td>C预编译器测试模块</td>
</tr>
<tr>
<td>–add-module=PATH</td>
<td>当在Nginx里加入第三方模块时，通过这个参数指定第三方模块的路径</td>
</tr>
<tr>
<td>–with-cc=PATH</td>
<td>C编译器的路径</td>
</tr>
<tr>
<td>–with-cpp=PATH</td>
<td>C预编译器的路径</td>
</tr>
<tr>
<td>–with-cc-opt=OPTIONS</td>
<td>如果希望在Nginx编译期间指定加入一些编译选项，如指定宏或者使用-I加入某些需要包含的目录，这时可以使用该参数达成目的</td>
</tr>
<tr>
<td>–with-ld-opt=OPTIONS</td>
<td>最终的二进制可执行文件是由编译后生成的目标文件与一些第三方库链接生成的，在执行链接操作时可能会需要指定链接参数，–with-ld-opt就是用于加入链接时的参数。例如，如果我们希望将某个库链接到Nginx程序中，需要在这里加入–with-ld-opt=-llibraryName -LlibraryPath，其中libraryName是目标库的名称，libraryPath则是目标库所在的路径</td>
</tr>
<tr>
<td>–with-cpu-opt=CPU</td>
<td>指定CPU处理器架构，只能从以下取值中选择：pentium、pentiumpro、pentium3、pentium4、athlon、opteron、sparc32、sparc64、ppc64</td>
</tr>
<tr>
<td>–without-pcre</td>
<td>如果确认Nginx不用解析正则表达式，也就是说，nginx.conf配置文件中不会出现正则表达式，那么可以使用这个参数</td>
</tr>
<tr>
<td>–with-pcre</td>
<td>强制使用PCRE库</td>
</tr>
<tr>
<td>–with-pcre=DIR</td>
<td>指定PCRE库的源码位置，在编译Nginx时会进入该目录编译PCRE源码</td>
</tr>
<tr>
<td>–with-pcre-opt=OPTIONS</td>
<td>编译PCRE源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-pcre-jit</td>
<td>编译PCRE库支持及时编译</td>
</tr>
<tr>
<td>–with-md5=DIR</td>
<td>指定SHA1库的源码位置，在编译Nginx时会进入该目录编译SHA1源码。 注意：OpenSSL中已经有了SHA1算法的实现。如果已经安装了OpenSSL，那么完全可以使用OpenSSL实现的SHA1算法</td>
</tr>
<tr>
<td>–with-md5-opt=OPTIONS</td>
<td>编译MD5源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-md5-asm</td>
<td>使用MD5的汇编源码</td>
</tr>
<tr>
<td>–with-sha1=DIR</td>
<td>指定SHA1库的源码位置，在编译Nginx时会进入该目录编译SHA1源码。 注意：OpenSSL中已经有了SHA1算法的实现。如果已经安装了OpenSSL，那么完全可以使用OpenSSL实现的SHA1算法</td>
</tr>
<tr>
<td>–with-sha1-opt=OPTIONS</td>
<td>编译SHA1源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-sha1-asm</td>
<td>使用SHA1的汇编源码</td>
</tr>
<tr>
<td>–with-zlib=DIR</td>
<td>指定zlib库的源码位置，在编译Nginx时会进入该目录编译zlib源码。如果使用了gzip压缩功能，就需要zlib库的支持</td>
</tr>
<tr>
<td>–with-zlib-opt=OPTIONS</td>
<td>编译zlib源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-zlib-asm=CPU</td>
<td>指定对特定的CPU使用zlib库的汇编优化功能，目前仅支持两种架构：pentium和pentiumpro</td>
</tr>
<tr>
<td>–with-libatomic</td>
<td>强制使用atomic库。atomic库是CPU架构独立的一种原子操作的实现。它支持以下体系架构：x86（包括i386和x86_64）、PPC64、Sparc64（v9或更高版本）或者安装了GCC 4.1.0及更高版本的架构。</td>
</tr>
<tr>
<td>–with-libatomic=DIR</td>
<td>atomic库所在的位置</td>
</tr>
<tr>
<td>–with-openssl=DIR</td>
<td>指定OpenSSL库的源码位置，在编译Nginx时会进入该目录编译OpenSSL源码。注意：如果Web服务器支持HTTPS，也就是SSL协议，Nginx要求必须使用OpenSSL。</td>
</tr>
<tr>
<td>–with-openssl-opt=OPTIONS</td>
<td>编译OpenSSL源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-debug</td>
<td>将Nginx需要打印debug调试级别日志的代码编译进Nginx。这样可以在Nginx运行时通过修改配置文件来使其打印调试日志，这对于研究、定位Nginx问题非常有帮助</td>
</tr>

</tbody></table>

<h4 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h4><p>这里和redis的编译安装比较类似，首先在当前目录（/usr/local/nginx-1.19.2）进行编译。输入make即可</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编译成功之后，就可以安装了，输入以下指令：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ok，安装成功。</p>
<blockquote>
<p> make &amp;&amp; make install</p>
</blockquote>
<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>设置nginx开机启动，只需在rc.local增加启动代码即可。</p>
<p><code>vim /etc/rc.local</code></p>
<p>然后在底部增加<code>/usr/local/nginx/sbin/nginx</code></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
</search>
