<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>谢谢你来看我的博客</title>
    <url>/post/a8863134.html</url>
    <content><![CDATA[<iframe width="100%" height="320px" id="iframeid" scrolling="no" frameborder="0" src="/zone/top/index.html"></iframe>


<style>
.post-block:first-child{
padding: 2px;
border-radius:unset !important;
}
#iframeid{
margin-bottom: 0px;
}
</style><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>Linux之使用alternatives 切换Java版本</title>
    <url>/post/4824a74d.html</url>
    <content><![CDATA[<p> xception in thread “main” java.lang.UnsupportedClassVersionError: M : Unsupported major.minor version</p>
<p>在linux上编译的java程序，在运行的时候报这个错误。</p>
<span id="more"></span>

<p>经过查找原来是javac的版本和java的版本不一致导致的，</p>
<p>因为我机器上安装了系统自带的java-1.5.0-gcj和1.7.0的openjdk，另外我还自己安装了1.8.0的Oracle 官方的jdk</p>
<p>导致编译器的版本和运行器的版本不一致。</p>
<p>解决这个问题的方法是使用alternatives 切换默认的java命令</p>
<p>这个工具的大概原理是</p>
<p>在/usr/bin目录下创建一个符号链接，指向/etc/alternatives/ 下的的文件，而该文件依然是一个符号链接，举个栗子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 mec<span class="token punctuation">]</span><span class="token comment"># ll /usr/bin/java</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">22</span> <span class="token number">4</span>月  <span class="token number">16</span> <span class="token number">16</span>:06 /usr/bin/java -<span class="token operator">&gt;</span> /etc/alternatives/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 mec<span class="token punctuation">]</span><span class="token comment"># ll  /etc/alternatives/java</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">26</span> <span class="token number">4</span>月  <span class="token number">16</span> <span class="token number">16</span>:06 /etc/alternatives/java -<span class="token operator">&gt;</span> /usr/java/default/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>/etc/alternatives/java会指向最终的可执行文件，如果你有3个版本的java</p>
<p>就需要运行 </p>
<pre class="line-numbers language-none"><code class="language-none">[root@node1 mec]# alternatives --config java

共有 3 个程序提供“java”。

  选择    命令
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
*  2           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java
 + 3           /usr/java/default/bin/java

按 Enter 来保存当前选择[+]，或键入选择号码：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后选择你想要选择的选项保存就好了</p>
<p>如果这个列表里面没有你想要的而且已经安装了的程序，就需要添加 命令为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alternatives <span class="token parameter variable">--install</span> /usr/bin/java <span class="token function">java</span> /usr/java/default/bin/java <span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个命令实际操作的是 /var/lib/alternatives目录下对应的文件</p>
<p>alternatives的安装删除显示等操作都是通过读取和修改这个目录下的文件实现的，而且是文本文件，感兴趣的可以取阅读一下</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose搭建 mysql8 主从</title>
    <url>/post/6358151c.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="note success no-icon"><p>我这里模拟了一台服务器，开启了<code>两</code>个mysql8的<code>容器</code>，一个作为<code>主</code>，一个作为<code>从</code>。</p>
</div>

<span id="more"></span>

<h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><ol>
<li><code>/root/.docker/voldata/mysql8/master</code><img data-src="/post/6358151c/SCR-001.png" class="" title="Master目录结构"></li>
<li>编写主容器<code>docker-compose.yml</code>脚本<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">version: '3.9'
services:
  mysql8-master-ins:
    image: mysql:8.0.33
    container_name: mysql8-master
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2g
      restart_policy:
        condition: on-failure
    privileged: true
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: Cn123456   #记得冒号与密码之间有个空格哈，这是yml的书写格式
      TZ: "Asia/Shanghai"
      MYSQL_USER: master
      MYSQL_PASSWORD: Cn123456
    command:
      --bind-address=172.18.0.100
      --default-authentication-plugin=mysql_native_password
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --default-time-zone='+8:00'
      --explicit_defaults_for_timestamp=true
      --max_allowed_packet=128M
      --lower_case_table_names=1
      --expire-logs-days=7
    ports:
      - 3308:3306
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /root/.docker/voldata/mysql8/master/data:/var/lib/mysql
      - /root/.docker/voldata/mysql8/master/my.cnf:/etc/mysql/my.cnf
      - /root/.docker/voldata/mysql8/master/conf:/etc/mysql/conf.d
      - /root/.docker/voldata/mysql8/master/mysql-files:/var/lib/mysql-files
      - /root/.docker/voldata/mysql8/master/logs:/var/log/mysql
    networks:
      traefik:
        ipv4_address: 172.18.0.100
networks:
  traefik:
    external: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>编写主容器的<code>my.cnf</code><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default<span class="token punctuation">-</span>character<span class="token punctuation">-</span>set = utf8mb4

<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default<span class="token punctuation">-</span>character<span class="token punctuation">-</span>set=utf8mb4

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
user=mysql
pid<span class="token punctuation">-</span>file= /var/run/mysqld/mysqld.pid
socket= /var/run/mysqld/mysqld.sock
datadir= /var/lib/mysql
secure<span class="token punctuation">-</span>file<span class="token punctuation">-</span>priv= NULL

<span class="token comment"># socket = /usr/mysql/mysqld.sock</span>
<span class="token comment"># pid-file = /usr/mysql/mysqld.pid</span>
<span class="token comment"># datadir  = /usr/mysql/data</span>

<span class="token comment"># gtid:</span>
server_id = 1                   <span class="token comment">#服务器id</span>
gtid_mode = on                  <span class="token comment">#开启gtid模式</span>
enforce_gtid_consistency = on   <span class="token comment">#强制gtid一致性，开启后对于特定create table不被支持</span>


<span class="token comment"># 创建新表时将使用的默认存储引擎</span>
default<span class="token punctuation">-</span>storage<span class="token punctuation">-</span>engine=INNODB
lower_case_table_names=1
max_allowed_packet=16M

<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
default_authentication_plugin=mysql_native_password
secure_file_priv=/var/lib/mysql
expire_logs_days=7
sql_mode=STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION
max_connections=1000


 
<span class="token comment">#binlog</span>
log_bin = mysql<span class="token punctuation">-</span>binlog
log_slave_updates = on
binlog_format = row             <span class="token comment">#强烈建议，其他格式可能造成数据不一致</span>

<span class="token comment">#relay log</span>
skip_slave_start = 1

general_log = 1
general_log_file = /var/log/mysql/access.log
log<span class="token punctuation">-</span>error = /var/log/mysql/error.log

character_set_server = utf8mb4
collation_server = utf8mb4_general_ci

<span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
symbolic<span class="token punctuation">-</span>links=0

<span class="token comment"># Custom config should go here</span>
<span class="token comment"># !includedir /etc/mysql/conf.d/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启动容器<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">cd master
docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h3><ol>
<li><code>/root/.docker/voldata/mysql8/slave</code><img data-src="/post/6358151c/SCR-002.png" class="" title="Slave目录结构"></li>
<li>编写从容器<code>docker-compose.yml</code>脚本<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">version: '3.9'
services:
  mysql8-slave-ins:
    image: mysql:8.0.33
    container_name: mysql8-slave
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2g
      restart_policy:
        condition: on-failure
    privileged: true
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: Cn123456   #记得冒号与密码之间有个空格哈，这是yml的书写格式
      TZ: "Asia/Shanghai"
      MYSQL_USER: slave
      MYSQL_PASSWORD: Cn123456
    command:
      --bind-address=172.18.0.101
      --default-authentication-plugin=mysql_native_password
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --default-time-zone='+8:00'
      --explicit_defaults_for_timestamp=true
      --max_allowed_packet=128M
      --lower_case_table_names=1
      --expire-logs-days=7
    ports:
      - 3309:3306
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /root/.docker/voldata/mysql8/slave/data:/var/lib/mysql
      - /root/.docker/voldata/mysql8/slave/my.cnf:/etc/mysql/my.cnf
      - /root/.docker/voldata/mysql8/slave/conf:/etc/mysql/conf.d
      - /root/.docker/voldata/mysql8/slave/mysql-files:/var/lib/mysql-files
      - /root/.docker/voldata/mysql8/slave/logs:/var/log/mysql
    networks:
      traefik:
        ipv4_address: 172.18.0.101
networks:
  traefik:
    external: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>编写从容器的<code>my.cnf</code><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default<span class="token punctuation">-</span>character<span class="token punctuation">-</span>set = utf8mb4

<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default<span class="token punctuation">-</span>character<span class="token punctuation">-</span>set=utf8mb4

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
user=mysql
pid<span class="token punctuation">-</span>file= /var/run/mysqld/mysqld.pid
socket= /var/run/mysqld/mysqld.sock
datadir= /var/lib/mysql
secure<span class="token punctuation">-</span>file<span class="token punctuation">-</span>priv= NULL

<span class="token comment"># socket = /usr/mysql/mysqld.sock</span>
<span class="token comment"># pid-file = /usr/mysql/mysqld.pid</span>
<span class="token comment"># datadir  = /usr/mysql/data</span>

<span class="token comment"># gtid:</span>
server_id = 2                   <span class="token comment">#服务器id</span>
gtid_mode = on                  <span class="token comment">#开启gtid模式</span>
enforce_gtid_consistency = on   <span class="token comment">#强制gtid一致性，开启后对于特定create table不被支持</span>


<span class="token comment"># 创建新表时将使用的默认存储引擎</span>
default<span class="token punctuation">-</span>storage<span class="token punctuation">-</span>engine=INNODB
lower_case_table_names=1
max_allowed_packet=16M

<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
default_authentication_plugin=mysql_native_password
secure_file_priv=/var/lib/mysql
expire_logs_days=7
sql_mode=STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION
max_connections=1000


 
<span class="token comment">#binlog</span>
log_bin = mysql<span class="token punctuation">-</span>binlog
log_slave_updates = on
binlog_format = row             <span class="token comment">#强烈建议，其他格式可能造成数据不一致</span>

<span class="token comment">#relay log</span>
skip_slave_start = 1

read_only = on                   <span class="token comment">#设置只读</span>

general_log = 1
general_log_file = /var/log/mysql/access.log
log<span class="token punctuation">-</span>error = /var/log/mysql/error.log

character_set_server = utf8mb4
collation_server = utf8mb4_general_ci

<span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
symbolic<span class="token punctuation">-</span>links=0

<span class="token comment"># Custom config should go here</span>
<span class="token comment"># !includedir /etc/mysql/conf.d/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启动容器<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">cd slave
docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="新建的用户赋权限"><a href="#新建的用户赋权限" class="headerlink" title="新建的用户赋权限"></a>新建的用户赋权限</h3><div class="note success no-icon"><p>给mysql的<code>master</code>账户和<code>slave</code>账户权限，其他权限各自按需添加</p>
</div>
<h4 id="先进入主容器"><a href="#先进入主容器" class="headerlink" title="先进入主容器"></a>先进入主容器</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">docker exec -it mysql8-master bash;
mysql -uroot -pCn123456;
GRANT ALL ON *.* TO master; 
flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="从容器添加权限"><a href="#从容器添加权限" class="headerlink" title="从容器添加权限"></a>从容器添加权限</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">docker exec -it mysql8-slave bash;
mysql -uroot -pCn123456;
GRANT REPLICATION CLIENT ON *.* TO slave;
GRANT REPLICATION SLAVE ON *.* TO slave;
GRANT SUPER ON *.* TO slave;
GRANT RELOAD ON *.* TO slave;
GRANT SELECT ON *.* TO slave;
flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="开启备份"><a href="#开启备份" class="headerlink" title="开启备份"></a>开启备份</h3><div class="note success no-icon"><p>进入<code>从</code>节点的mysql，使用<code>slave</code>账户连接主节点，开启备份:</p>
</div>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">docker exec -it mysql8-slave bash;
mysql -uslave -pCn123456;
CHANGE MASTER TO master_host='172.18.0.100', master_port=3306, master_user='master', master_password='Cn123456', master_auto_position=1;
START SLAVE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW SLAVE STATUS\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/6358151c/SCR-003.png" class="" title="主从同步"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 性能优化</title>
    <url>/post/31a3358a.html</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8系统调优参数配置</title>
    <url>/post/6a427f76.html</url>
    <content><![CDATA[<h3 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h3><h4 id="最大虚拟内存"><a href="#最大虚拟内存" class="headerlink" title="最大虚拟内存"></a>最大虚拟内存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Sonnarqube-dev ~<span class="token punctuation">]</span><span class="token comment"># sysctl -w vm.max_map_count=262144</span>
执行结果
vm.max_map_count <span class="token operator">=</span> <span class="token number">262144</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h4 id="打开文件数"><a href="#打开文件数" class="headerlink" title="打开文件数"></a>打开文件数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Sonnarqube-dev ~<span class="token punctuation">]</span><span class="token comment"># sysctl -w fs.file-max=65536</span>
fs.file-max <span class="token operator">=</span> <span class="token number">65536</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="打开文件数-1"><a href="#打开文件数-1" class="headerlink" title="打开文件数"></a>打开文件数</h4><pre class="line-numbers language-none"><code class="language-none">[root@Sonnarqube-dev ~]# ulimit -n 65536<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="最大进程数"><a href="#最大进程数" class="headerlink" title="最大进程数"></a>最大进程数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Sonnarqube-dev ~<span class="token punctuation">]</span><span class="token comment"># ulimit -u 4096</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="永久设置系统参数"><a href="#永久设置系统参数" class="headerlink" title="永久设置系统参数"></a>永久设置系统参数</h3><h4 id="必须修改etc-sysctl-conf文件"><a href="#必须修改etc-sysctl-conf文件" class="headerlink" title="必须修改etc/sysctl.conf文件"></a>必须修改<code>etc/sysctl.conf</code>文件</h4><p>  文件末尾添加下述两行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysctl.conf
<span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span>
fs.file-max<span class="token operator">=</span><span class="token number">65536</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="修改-etc-profile文件"><a href="#修改-etc-profile文件" class="headerlink" title="修改/etc/profile文件"></a>修改<code>/etc/profile</code>文件</h4><p>  在<code>/etc/profile</code>文件末尾添加<code>ulimit -n 65536</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token number">65536</span>

<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8 安装 OPENJDK</title>
    <url>/post/f6a4d884.html</url>
    <content><![CDATA[<img data-src="/post/f6a4d884/openjdk.png" style="box-shadow:none!important;">

<span id="more"></span>


<h3 id="查找可安装的OPENJDK"><a href="#查找可安装的OPENJDK" class="headerlink" title="查找可安装的OPENJDK"></a>查找可安装的OPENJDK</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">--color</span> openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis .vnc<span class="token punctuation">]</span><span class="token comment"># yum search java | grep -i --color openjdk</span>
上次元数据过期检查：0:04:39 前，执行于 <span class="token number">2022</span>年10月15日 星期六 <span class="token number">18</span>时04分05秒。
openjdk-asmtools-javadoc.noarch <span class="token builtin class-name">:</span> Javadoc <span class="token keyword">for</span> openjdk-asmtools
java-1.8.0-openjdk.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Runtime Environment
java-1.8.0-openjdk-accessibility.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> accessibility connector
java-1.8.0-openjdk-accessibility-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> accessibility connector <span class="token keyword">for</span> packages with debugging on and optimisation
java-1.8.0-openjdk-accessibility-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> accessibility connector <span class="token keyword">for</span> packages with debugging on and no optimisation
java-1.8.0-openjdk-demo.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Demos
java-1.8.0-openjdk-demo-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Demos optimised with full debugging on
java-1.8.0-openjdk-demo-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Demos unoptimised with full debugging on
java-1.8.0-openjdk-devel.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Development Environment
java-1.8.0-openjdk-devel-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Development Environment optimised with full debugging on
java-1.8.0-openjdk-devel-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Development Environment unoptimised with full debugging on
java-1.8.0-openjdk-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Runtime Environment optimised with full debugging on
java-1.8.0-openjdk-headless.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Headless Runtime Environment
java-1.8.0-openjdk-headless-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Runtime Environment optimised with full debugging on
java-1.8.0-openjdk-headless-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Runtime Environment unoptimised with full debugging on
java-1.8.0-openjdk-javadoc.noarch <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> API documentation
java-1.8.0-openjdk-javadoc-zip.noarch <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> API documentation compressed <span class="token keyword">in</span> a single archive
java-1.8.0-openjdk-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Runtime Environment unoptimised with full debugging on
java-1.8.0-openjdk-src.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Source Bundle
java-1.8.0-openjdk-src-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and optimisation
java-1.8.0-openjdk-src-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">8</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and no optimisation
java-11-openjdk.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Runtime Environment
java-11-openjdk-demo.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Demos
java-11-openjdk-demo-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Demos optimised with full debugging on
java-11-openjdk-demo-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Demos unoptimised with full debugging on
java-11-openjdk-devel.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Development Environment
java-11-openjdk-devel-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Development Environment optimised with full debugging on
java-11-openjdk-devel-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Development Environment unoptimised with full debugging on
java-11-openjdk-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Runtime Environment optimised with full debugging on
java-11-openjdk-headless.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Headless Runtime Environment
java-11-openjdk-headless-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Runtime Environment optimised with full debugging on
java-11-openjdk-headless-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Runtime Environment unoptimised with full debugging on
java-11-openjdk-javadoc.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> API documentation
java-11-openjdk-javadoc-zip.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> API documentation compressed <span class="token keyword">in</span> a single archive
java-11-openjdk-jmods.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">11</span>
java-11-openjdk-jmods-fastdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">11</span> optimised with full debugging on
java-11-openjdk-jmods-slowdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">11</span> unoptimised with full debugging on
java-11-openjdk-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Runtime Environment unoptimised with full debugging on
java-11-openjdk-src.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Source Bundle
java-11-openjdk-src-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and optimisation
java-11-openjdk-src-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and no optimisation
java-11-openjdk-static-libs.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> libraries <span class="token keyword">for</span> static linking
java-11-openjdk-static-libs-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> libraries <span class="token keyword">for</span> static linking optimised with full debugging on
java-11-openjdk-static-libs-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">11</span> libraries <span class="token keyword">for</span> static linking unoptimised with full debugging on
java-17-openjdk.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Runtime Environment
java-17-openjdk-demo.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Demos
java-17-openjdk-demo-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Demos optimised with full debugging on
java-17-openjdk-demo-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Demos unoptimised with full debugging on
java-17-openjdk-devel.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Development Environment
java-17-openjdk-devel-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Development Environment optimised with full debugging on
java-17-openjdk-devel-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Development Environment unoptimised with full debugging on
java-17-openjdk-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Runtime Environment optimised with full debugging on
java-17-openjdk-headless.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Headless Runtime Environment
java-17-openjdk-headless-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Runtime Environment optimised with full debugging on
java-17-openjdk-headless-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Runtime Environment unoptimised with full debugging on
java-17-openjdk-javadoc.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> API documentation
java-17-openjdk-javadoc-zip.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> API documentation compressed <span class="token keyword">in</span> a single archive
java-17-openjdk-jmods.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">17</span>
java-17-openjdk-jmods-fastdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">17</span> optimised with full debugging on
java-17-openjdk-jmods-slowdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">17</span> unoptimised with full debugging on
java-17-openjdk-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Runtime Environment unoptimised with full debugging on
java-17-openjdk-src.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Source Bundle
java-17-openjdk-src-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and optimisation
java-17-openjdk-src-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and no optimisation
java-17-openjdk-static-libs.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> libraries <span class="token keyword">for</span> static linking
java-17-openjdk-static-libs-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> libraries <span class="token keyword">for</span> static linking optimised with full debugging on
java-17-openjdk-static-libs-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">17</span> libraries <span class="token keyword">for</span> static linking unoptimised with full debugging on
java-latest-openjdk.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Runtime Environment
java-latest-openjdk-demo.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Demos
java-latest-openjdk-demo-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Demos optimised with full debugging on
java-latest-openjdk-demo-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Demos unoptimised with full debugging on
java-latest-openjdk-devel.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Development Environment
java-latest-openjdk-devel-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Development Environment optimised with full debugging on
java-latest-openjdk-devel-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Development Environment unoptimised with full debugging on
java-latest-openjdk-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Runtime Environment optimised with full debugging on
java-latest-openjdk-headless.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Headless Runtime Environment
java-latest-openjdk-headless-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Runtime Environment optimised with full debugging on
java-latest-openjdk-headless-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Runtime Environment unoptimised with full debugging on
java-latest-openjdk-javadoc.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> API documentation
java-latest-openjdk-javadoc-zip.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> API documentation compressed <span class="token keyword">in</span> a single archive
java-latest-openjdk-jmods.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">19</span>
java-latest-openjdk-jmods-fastdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">19</span> optimised with full debugging on
java-latest-openjdk-jmods-slowdebug.x86_64 <span class="token builtin class-name">:</span> JMods <span class="token keyword">for</span> OpenJDK <span class="token number">19</span> unoptimised with full debugging on
java-latest-openjdk-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Runtime Environment unoptimised with full debugging on
java-latest-openjdk-src.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Source Bundle
java-latest-openjdk-src-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and optimisation
java-latest-openjdk-src-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> Source Bundle <span class="token keyword">for</span> packages with debugging on and no optimisation
java-latest-openjdk-static-libs.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> libraries <span class="token keyword">for</span> static linking
java-latest-openjdk-static-libs-fastdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> libraries <span class="token keyword">for</span> static linking optimised with full debugging on
java-latest-openjdk-static-libs-slowdebug.x86_64 <span class="token builtin class-name">:</span> OpenJDK <span class="token number">19</span> libraries <span class="token keyword">for</span> static linking unoptimised with full debugging on
icedtea-web.x86_64 <span class="token builtin class-name">:</span> Additional Java components <span class="token keyword">for</span> OpenJDK - Java browser plug-in and Web Start implementation
openjdk-asmtools.noarch <span class="token builtin class-name">:</span> To develop tools create proper <span class="token operator">&amp;</span> improper Java <span class="token string">'.class'</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装自己想要安装的版本"><a href="#安装自己想要安装的版本" class="headerlink" title="安装自己想要安装的版本"></a>安装自己想要安装的版本</h3><p>  我这里选择安装<code>java-11-openjdk.x86_64</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> java-11-openjdk.x86_64 <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看安装openjdk版本"><a href="#查看安装openjdk版本" class="headerlink" title="查看安装openjdk版本"></a>查看安装openjdk版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span>
alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># alternatives --config java</span>

共有 <span class="token number">2</span> 个提供“java”的程序。

  选项    命令
-----------------------------------------------
*+ <span class="token number">1</span>           /usr/java/jdk1.8.0_341-amd64/bin/java
   <span class="token number">2</span>           java-11-openjdk.x86_64 <span class="token punctuation">(</span>/usr/lib/jvm/java-11-openjdk-11.0.16.1.1-1.an8_6.x86_64/bin/java<span class="token punctuation">)</span>

按 Enter 保留当前选项<span class="token punctuation">[</span>+<span class="token punctuation">]</span>，或者键入选项编号： <span class="token number">2</span>
<span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># java -version</span>
openjdk version <span class="token string">"11.0.16.1"</span> <span class="token number">2022</span>-08-12 LTS
OpenJDK Runtime Environment <span class="token punctuation">(</span>Red_Hat-11.0.16.1.1-1.an8_6<span class="token punctuation">)</span> <span class="token punctuation">(</span>build <span class="token number">11.0</span>.16.1+1-LTS<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>Red_Hat-11.0.16.1.1-1.an8_6<span class="token punctuation">)</span> <span class="token punctuation">(</span>build <span class="token number">11.0</span>.16.1+1-LTS, mixed mode, sharing<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><h4 id="查找安装java的目录"><a href="#查找安装java的目录" class="headerlink" title="查找安装java的目录"></a>查找安装java的目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># which java</span>
/usr/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>-l:详细信息; -r:递归子文件夹</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># ls -lr /usr/bin/java</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">22</span> <span class="token number">10</span>月  <span class="token number">8</span> <span class="token number">18</span>:50 /usr/bin/java -<span class="token operator">&gt;</span> /etc/alternatives/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  执行如下命令查看java安装路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># ls -lr /etc/alternatives/java</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">64</span> <span class="token number">10</span>月 <span class="token number">15</span> <span class="token number">18</span>:15 /etc/alternatives/java -<span class="token operator">&gt;</span> /usr/lib/jvm/java-11-openjdk-11.0.16.1.1-1.an8_6.x86_64/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  java的安装路径为：<br><code>/usr/lib/jvm/java-11-openjdk-11.0.16.1.1-1.an8_6.x86_64/bin/java</code></p>
<h4 id="编辑profile文件配置java环境变量"><a href="#编辑profile文件配置java环境变量" class="headerlink" title="编辑profile文件配置java环境变量"></a>编辑<code>profile</code>文件配置<code>java</code>环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">export</span> <span class="token value attr-value">JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.11.0.9-1.el7_9.x86_64</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">JRE_HOME=$JAVA_HOME/jre</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8 安装VNC配置远程连接</title>
    <url>/post/90c0ce10.html</url>
    <content><![CDATA[<img data-src="/post/90c0ce10/vnc001.png" style="height:260px;box-shadow:none!important;">

<span id="more"></span>


<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  VNC：VNC（Virtual Network Computing），为一种使用RFB协议的屏幕画面分享及远程操作软件。此软件借由网络，可发送键盘与鼠标的动作及即时的屏幕画面。VNC与操作系统无关，因此可跨平台使用，例如可用Windows连线到某Linux的计算机，反之亦同。甚至在没有安装客户端程序的计算机中，只要有支持JAVA的浏览器，也可使用。VNC包含客户端和服务器两个操作软件。<br>  VNC Server：VNC服务器，接收VNC Viewer的连接请求，传输画面到客户端。<br>  VNC Viewer：VNC客户端，将键盘和鼠标的动作转递给服务器，</p>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release</span>
Anolis OS release <span class="token number">8.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="安装桌面环境"><a href="#安装桌面环境" class="headerlink" title="安装桌面环境"></a>安装桌面环境</h3><p>  通常，服务器没有安装任何的桌面环境。如果你拥有的一台机器没有 GUI，第一步就是安装它。否则，跳过这个步骤。<br>  运行下面的命令来在你的远程机器上安装 Gnome，CentOS 8 下的默认桌面环境。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dnf groupinstall <span class="token string">"Server with GUI"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  下载和安装 Gnome 软件包，以及依赖软件包需要花费一些时间。</p>
<h3 id="安装VNC服务器"><a href="#安装VNC服务器" class="headerlink" title="安装VNC服务器"></a>安装<code>VNC</code>服务器</h3><p>  <a href="http://tigervnc.org/?spm=a2c6h.12873639.article-detail.7.3906620cM3tkVF">TigerVNC</a> 是一个维护很活跃的开源高性能 VNC 服务器。它在默认的 CentOS 源仓库中可用，输入下面的命令，安装它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> <span class="token parameter variable">-y</span> tigervnc-server tigervnc-server-module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="编辑-vim-etc-tigervnc-vncserver-users-添加用户"><a href="#编辑-vim-etc-tigervnc-vncserver-users-添加用户" class="headerlink" title="编辑 vim /etc/tigervnc/vncserver.users 添加用户"></a>编辑 <code>vim /etc/tigervnc/vncserver.users</code> 添加用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/tigervnc/vncserver.users</span>
<span class="token comment"># TigerVNC User assignment</span>
<span class="token comment">#</span>
<span class="token comment"># This file assigns users to specific VNC display numbers.</span>
<span class="token comment"># The syntax is &lt;display&gt;=&lt;username&gt;. E.g.:</span>
<span class="token comment">#</span>
<span class="token comment"># :2=andrew</span>
<span class="token comment"># :3=lisa</span>
:1<span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="如果是给非root创建的话需要切换到该用户下产生vncpasswd"><a href="#如果是给非root创建的话需要切换到该用户下产生vncpasswd" class="headerlink" title="如果是给非root创建的话需要切换到该用户下产生vncpasswd"></a>如果是给<code>非root</code>创建的话需要<code>切换到该用户</code>下产生<code>vncpasswd</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># su user</span>
<span class="token punctuation">[</span>user@centos8 ~<span class="token punctuation">]</span>$ vncpasswd
Password:
Verify:
Would you like to enter a view-only password <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? n
A view-only password is not used
<span class="token punctuation">[</span>user@centos8 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span>
<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start vncserver@:1.service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="测试是否VNCServer是否开起来"><a href="#测试是否VNCServer是否开起来" class="headerlink" title="测试是否VNCServer是否开起来"></a>测试是否VNCServer是否开起来</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># nc -zv localhost 5901</span>
Ncat: Version <span class="token number">7.70</span> <span class="token punctuation">(</span> https://nmap.org/ncat <span class="token punctuation">)</span>
Ncat: Connected to ::1:5901.
Ncat: <span class="token number">0</span> bytes sent, <span class="token number">0</span> bytes received <span class="token keyword">in</span> <span class="token number">0.01</span> seconds.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="关闭防火墙或开启端口权限"><a href="#关闭防火墙或开启端口权限" class="headerlink" title="关闭防火墙或开启端口权限"></a>关闭防火墙或开启端口权限</h3><h4 id="关闭防火墙-不推荐"><a href="#关闭防火墙-不推荐" class="headerlink" title="关闭防火墙(不推荐)"></a>关闭防火墙(不推荐)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status firewalld</span>
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/firewalld.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Sun <span class="token number">2020</span>-06-21 <span class="token number">22</span>:40:18 CST<span class="token punctuation">;</span> 14min ago
     Docs: man:firewalld<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 Main PID: <span class="token number">890</span> <span class="token punctuation">(</span>firewalld<span class="token punctuation">)</span>
    Tasks: <span class="token number">2</span> <span class="token punctuation">(</span>limit: <span class="token number">11460</span><span class="token punctuation">)</span>
   Memory: <span class="token number">29</span>.7M
   CGroup: /system.slice/firewalld.service
           └─890 /usr/libexec/platform-python <span class="token parameter variable">-s</span> /usr/sbin/firewalld <span class="token parameter variable">--nofork</span> <span class="token parameter variable">--nopid</span>

Jun <span class="token number">21</span> <span class="token number">22</span>:40:16 centos8 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting firewalld - dynamic firewall daemon<span class="token punctuation">..</span>.
Jun <span class="token number">21</span> <span class="token number">22</span>:40:18 centos8 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started firewalld - dynamic firewall daemon.
<span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop firewalld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="开启端口权限"><a href="#开启端口权限" class="headerlink" title="开启端口权限"></a>开启端口权限</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --zone=public --add-port=5901/tcp --permanent</span>
success
<span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>




<h3 id="安装Chrome"><a href="#安装Chrome" class="headerlink" title="安装Chrome"></a>安装Chrome</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">首先在CentOS/RHEL系统上安装wget才能用于下载，运行以下命令：

        <span class="token function">sudo</span> dnf <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span>

    现在使用wget命令下载最新版本的Google Chrome：

        <span class="token function">wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

    导航到包含下载包的目录并执行以下命令：

        $ <span class="token function">sudo</span> dnf localinstall google-chrome-stable_current_x86_64.rpm <span class="token parameter variable">-y</span>

    执行结果如下图：

    打开Chrome浏览器的快捷方式文件

        $ <span class="token function">vi</span> /usr/share/applications/google-chrome.desktop
    修改 <span class="token assign-left variable">Exec</span><span class="token operator">=</span>/usr/bin/google-chrome-stable %U 在其后面加上 --no-sandbox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><div class="note info no-icon"><p><a href="https://www.likecs.com/show-205147658.html?sc=1946">阿里云ECS CentOS 8 配置VNC远程连接</a><br><a href="https://developer.aliyun.com/article/753673">如何在 CentOS 8 上安装和配置 VNC</a><br><a href="https://www.cnblogs.com/royfans/p/15237952.html"> centos8 安装VNC配置远程连接</a></p>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装 ElasticSearch集群</title>
    <url>/post/65899326.html</url>
    <content><![CDATA[<img data-src="/post/65899326/elk001.png" style="box-shadow:none!important;">

<span id="more"></span>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><div class="note info no-icon"><p>如果您的环境是Linux，注意要做以下操作，否则es可能会启动失败<br>1 用编辑工具打开文件<code>/etc/sysctl.conf</code><br>2 在尾部添加一行配置<code>vm.max_map_count = 262144</code>，如果已存在就修改，数值不能低于262144<br>3 修改保存，然后执行命令<code>sudo sysctl -p</code>使其立即生效</p>
</div>

<h3 id="单节点配置"><a href="#单节点配置" class="headerlink" title="单节点配置"></a>单节点配置</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull elasticsearch:7.17.6
docker pull kibana:7.17.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建挂载目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/<span class="token punctuation">{</span>config,data,logs,plugins<span class="token punctuation">}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/config/certs
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> kibana/config

<span class="token comment"># 创建配置文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">&gt;</span> /root/docker/elasticsearch/config/elasticsearch.yml

<span class="token comment"># 给挂载目录添加权限 chmod 777 -R /data/</span>
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /root/docker/elasticsearch/data/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="root-docker-elasticsearch-kibana-config-kibana-yml"><a href="#root-docker-elasticsearch-kibana-config-kibana-yml" class="headerlink" title="/root/docker/elasticsearch/kibana/config/kibana.yml"></a><code>/root/docker/elasticsearch/kibana/config/kibana.yml</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span>
<span class="token comment"># ** THIS IS AN AUTO-GENERATED FILE **</span>
<span class="token comment">#</span>

<span class="token comment"># Default Kibana configuration for docker target</span>
server.name: kibana

server.host: <span class="token string">"0.0.0.0"</span>
server.shutdownTimeout: <span class="token string">"5s"</span>
elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"http://192.168.3.202:9200"</span> <span class="token punctuation">]</span>

monitoring.ui.container.elasticsearch.enabled: <span class="token boolean">true</span>

<span class="token comment"># 此处设置elastic的用户名和密码</span>
elasticsearch.username: <span class="token string">"elastic"</span>
elasticsearch.password: <span class="token string">"123456"</span>
<span class="token comment"># 设置kibana中文显示</span>
i18n.locale: <span class="token string">"zh-CN"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="root-docker-elasticsearch-config-elasticsearch-yml"><a href="#root-docker-elasticsearch-config-elasticsearch-yml" class="headerlink" title="/root/docker/elasticsearch/config/elasticsearch.yml"></a><code>/root/docker/elasticsearch/config/elasticsearch.yml</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http.host: <span class="token number">0.0</span>.0.0

http.cors.enabled: <span class="token boolean">true</span>
http.cors.allow-origin: <span class="token string">"*"</span>

http.cors.allow-headers: Authorization
xpack.license.self_generated.type: basic

xpack.security.enabled: <span class="token boolean">true</span>
xpack.security.transport.ssl.enabled: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="构建容器并运行"><a href="#构建容器并运行" class="headerlink" title="构建容器并运行"></a>构建容器并运行</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d -p 9200:9200 -p 9300:9300 \
-e "discovery.type=single-node" \
-e ES_JAVA_OPTS="-Xms84m -Xmx512m" \
-v /root/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
-v /root/docker/elasticsearch/data:/usr/share/elasticsearch/data \
-v /root/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins \
-v /root/docker/elasticsearch/logs:/usr/share/elasticsearch/logs \
--name elasticsearch \
elasticsearch:7.17.6 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  或者直接利用<code>docker-compose.yml</code>文件，可以在容器运行后<code>拷贝</code>出配置<code>文件</code>等进行编辑然后挂载</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">es01</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es01
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9200:9200"</span>
      <span class="token punctuation">-</span> <span class="token string">"9300:9300"</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/docker/elasticsearch/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
      <span class="token punctuation">-</span> /root/docker/elasticsearch/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> /root/docker/elasticsearch/logs<span class="token punctuation">:</span>/usr/share/elasticsearch/logs
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token comment">#  - "ES_JAVA_OPTS=-Xms1024m -Xmx2048m"</span>
      <span class="token punctuation">-</span> <span class="token string">"discovery.type=single-node"</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic

  <span class="token key atrule">b01</span><span class="token punctuation">:</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> es01
    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kib01
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 5601<span class="token punctuation">:</span><span class="token number">5601</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ELASTICSEARCH_URL</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//es01<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token key atrule">ELASTICSEARCH_HOSTS</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//es01<span class="token punctuation">:</span><span class="token number">9200</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/docker/elasticsearch/kibana/config/kibana.yml<span class="token punctuation">:</span>/usr/share/kibana/config/kibana.yml
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">elastic</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="设置授权访问的账号和密码"><a href="#设置授权访问的账号和密码" class="headerlink" title="设置授权访问的账号和密码"></a>设置授权访问的账号和密码</h4><h5 id="开启x-pack验证-root-docker-elasticsearchconfig-elasticsearch-yml-中添加如下配置"><a href="#开启x-pack验证-root-docker-elasticsearchconfig-elasticsearch-yml-中添加如下配置" class="headerlink" title="开启x-pack验证,/root/docker/elasticsearchconfig/elasticsearch.yml 中添加如下配置"></a>开启<code>x-pack</code>验证,<code>/root/docker/elasticsearchconfig/elasticsearch.yml</code> 中添加如下配置</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 添加如下内容</span>

<span class="token comment"># 配置X-Pack</span>
<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>
<span class="token key atrule">http.cors.allow-headers</span><span class="token punctuation">:</span> Authorization
<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.license.self_generated.type</span><span class="token punctuation">:</span> basic
<span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/elasticsearch-certutil cert <span class="token parameter variable">-out</span> config/elastic-certificates.p12 <span class="token parameter variable">-pass</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.transport.ssl.verification_mode</span><span class="token punctuation">:</span> certificate
<span class="token key atrule">xpack.security.transport.ssl.keystore.path</span><span class="token punctuation">:</span> elastic<span class="token punctuation">-</span>certificates.p12
<span class="token key atrule">xpack.security.transport.ssl.truststore.path</span><span class="token punctuation">:</span> elastic<span class="token punctuation">-</span>certificates.p12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="重启elasticsearch服务"><a href="#重启elasticsearch服务" class="headerlink" title="重启elasticsearch服务"></a>重启elasticsearch服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># systemctl restart elasticsearch</span>
<span class="token function">docker</span> restart es01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="设置elasticsearch密码"><a href="#设置elasticsearch密码" class="headerlink" title="设置elasticsearch密码"></a>设置elasticsearch密码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> es01 /bin/bash
<span class="token comment"># 重置密码</span>
<span class="token comment"># bin/elasticsearch-reset-password -u elastic</span>
<span class="token comment"># 自动生成好几个默认用户和密码</span>
bin/elasticsearch-setup-passwords auto 
<span class="token comment"># 如果想手动生成密码，则使用</span>
bin/elasticsearch-setup-passwords interactive <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  提示是否重置，输入<code>y</code>，控制台会打印新密码，<code>请记住这个密码，稍后要用到</code><br>  因为需要设置 elastic，apm_system，kibana，kibana_system，logstash_system，beats_system，remote_monitoring_user 这些用户的密码，故这个过程比较漫长，耐心设置；</p>
<h5 id="修改elasticsearch密码"><a href="#修改elasticsearch密码" class="headerlink" title="修改elasticsearch密码"></a>修改elasticsearch密码</h5><ol>
<li>知道原密码<br>  下面的示例为将<code>elastic</code>的密码设置为<code>"123456"</code>。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># password 后为新密码, 控制台提示输入老密码</span>
<span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type:application/json"</span> <span class="token parameter variable">-XPOST</span> <span class="token parameter variable">-u</span> elastic <span class="token string">'http://127.0.0.1:9200/_xpack/security/user/elastic/_password'</span> <span class="token parameter variable">-d</span> <span class="token string">'{ "password" : "123456" }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  或<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 不提示直接改</span>
<span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token parameter variable">--u</span> elastic:现密码 <span class="token string">"http://localhost:9200/_security/user/elastic/_password"</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-d</span> <span class="token string">'{"password":"newpassword"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>忘记原密码<br>  修改配置文件<code>config/elasticsearch.yml</code>，注释掉支持<code>x-pack</code>的<code>xpack.security.enabled: true</code>配置，保存退出；<br>  重启Elasticsearch<br>  使用<code>curl</code>查看当前Elasticsearch的索引：<pre class="line-numbers language-none"><code class="language-none">curl -XGET "127.0.0.1:9200/_cat/indices" -H 'Content-Type: application/json'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  控制台打印，多了一个<code>.security-7</code>的索引，<code>删除``.security-7</code>的索引.<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-XDELETE</span> <span class="token number">127.0</span>.0.1:9200/.security-7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  有如下打印，表示已成功删除：<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"acknowledged"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  现在，重新设置elasticsearch密码。</li>
<li>用elasticsearch-users操作<br>  找回集群密码, 在 <code>Elasticsearch</code> 的安装目录下，有一个 utility 叫做 <code>elasticsearch-users</code>,我们可以使用这个工具找回我们的用户密码<br>  首先，我们来创建另外一个超级用户 <code>newadmin</code>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/elasticsearch-users <span class="token function">useradd</span> newadmin <span class="token parameter variable">-p</span> password <span class="token parameter variable">-r</span> superuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  我们接下来使用这个刚刚创建的超级用户来针对原有的 <code>elastic</code> 用户进行<code>重置密码</code>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">--user</span> newadmin:password <span class="token parameter variable">-XPUT</span> <span class="token string">"http://localhost:9200/_xpack/security/user/elastic/_password?pretty"</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-d</span> <span class="token string">'{"password":"password1"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  在上面，我们重置用户 <code>elastic</code> 的密码为 <code>password1</code>。我们可以通过如下的命令来检查我们是否可以通过这个重置的密码来对集群进行访问：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--user</span> elastic:password1 <span class="token parameter variable">-X</span> GET <span class="token string">"http://localhost:9200?pretty"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">--user</span> elastic:password1 <span class="token parameter variable">-X</span> GET <span class="token string">"http://localhost:9200?pretty"</span>
<span class="token punctuation">{</span>
  <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"liuxg"</span>,
  <span class="token string">"cluster_name"</span> <span class="token builtin class-name">:</span> <span class="token string">"elasticsearch"</span>,
  <span class="token string">"cluster_uuid"</span> <span class="token builtin class-name">:</span> <span class="token string">"-vtUaRdHSnGJb5XdGC32bA"</span>,
  <span class="token string">"version"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">"number"</span> <span class="token builtin class-name">:</span> <span class="token string">"7.13.0"</span>,
    <span class="token string">"build_flavor"</span> <span class="token builtin class-name">:</span> <span class="token string">"default"</span>,
    <span class="token string">"build_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"tar"</span>,
    <span class="token string">"build_hash"</span> <span class="token builtin class-name">:</span> <span class="token string">"5ca8591c6fcdb1260ce95b08a8e023559635c6f3"</span>,
    <span class="token string">"build_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"2021-05-19T22:22:26.081971330Z"</span>,
    <span class="token string">"build_snapshot"</span> <span class="token builtin class-name">:</span> false,
    <span class="token string">"lucene_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"8.8.2"</span>,
    <span class="token string">"minimum_wire_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.8.0"</span>,
    <span class="token string">"minimum_index_compatibility_version"</span> <span class="token builtin class-name">:</span> <span class="token string">"6.0.0-beta1"</span>
  <span class="token punctuation">}</span>,
  <span class="token string">"tagline"</span> <span class="token builtin class-name">:</span> <span class="token string">"You Know, for Search"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>  浏览器直接访问<code>http://127.0.0.1:9200</code>,会出现输入用户名、密码的弹窗，输入elastic和密码后，才能看到elasticsearch信息；</p>
<h5 id="kinana-yml-修改"><a href="#kinana-yml-修改" class="headerlink" title="kinana.yml 修改"></a>kinana.yml 修改</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 末尾增加</span>
<span class="token key atrule">elasticsearch.username</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>
<span class="token key atrule">elasticsearch.password</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>




<h3 id="多节点集群配置"><a href="#多节点集群配置" class="headerlink" title="多节点集群配置"></a>多节点集群配置</h3><h4 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/node-1/<span class="token punctuation">{</span>data,logs,config,plugins<span class="token punctuation">}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/node-2/<span class="token punctuation">{</span>data,logs,config,plugins<span class="token punctuation">}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/node-3/<span class="token punctuation">{</span>data,logs,config,plugins<span class="token punctuation">}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/elasticsearch/kibana/config

<span class="token builtin class-name">cd</span> /root/docker/elasticsearch/
<span class="token comment"># 修改每个节点文件夹下data目录的权限(不修改后面会报错,权限不够)</span>
<span class="token function">chmod</span> <span class="token number">777</span> ./node-1/data/ <span class="token parameter variable">-R</span> 
<span class="token function">chmod</span> <span class="token number">777</span> ./node-1/logs/ <span class="token parameter variable">-R</span>
<span class="token function">chmod</span> <span class="token number">777</span> ./node-1/config/ <span class="token parameter variable">-R</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="编写配置文件-elasticsearch-yml"><a href="#编写配置文件-elasticsearch-yml" class="headerlink" title="编写配置文件(elasticsearch.yml)"></a>编写配置文件(<code>elasticsearch.yml</code>)</h4><p>  新建<code>/root/docker/elasticsearch/node-1/config/elasticsearch.yml</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x node-1/config/elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#-------------------------------------------</span>
<span class="token comment"># es01</span>
<span class="token comment"># 集群的名称(各节点*集群名称*需要保持一致)</span>
<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span>
<span class="token comment"># # # 节点的名称</span>
<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span>
<span class="token comment"># # # 此节点是否可以用作master节点</span>
<span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是存储节点</span>
<span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是预处理节点 如果是master节点的话 建议这里是true</span>
<span class="token key atrule">node.ingest</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment">#设置主机IP 0.0.0.0时外网可以访问到</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0
<span class="token comment"># 配置端口</span>
<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
<span class="token comment"># 集群通信端口</span>
<span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9300</span>
<span class="token comment">#集群内节点信息 每个节点会共享自己的此参数</span>
<span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es01:9300"</span><span class="token punctuation">,</span><span class="token string">"es02:9300"</span><span class="token punctuation">,</span><span class="token string">"es03:9300"</span><span class="token punctuation">]</span>
<span class="token comment">#集群的master候选节点目录。只有在初始化的时候才生效。</span>
<span class="token comment">#这里只写node-1 并且配置这个参数 是用于快速搭建集群。集群已启动自动node-1   是master</span>
<span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span>
<span class="token comment">#cross 跨域访问 配置这个之后 head就可以用了</span>
<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span>  <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span>  <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#-------------------------------------------</span>
<span class="token comment"># es02</span>
<span class="token comment"># 集群的名称(各节点*集群名称*需要保持一致)</span>
<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span>
<span class="token comment"># # # 节点的名称</span>
<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">2</span>
<span class="token comment"># # # 此节点是否可以用作master节点</span>
<span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是存储节点</span>
<span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是预处理节点 如果是master节点的话 建议这里是true</span>
<span class="token key atrule">node.ingest</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment">#设置主机IP 0.0.0.0时外网可以访问到</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0
<span class="token comment"># 配置端口</span>
<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
<span class="token comment"># 集群通信端口</span>
<span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9300</span>
<span class="token comment">#集群内节点信息 每个节点会共享自己的此参数</span>
<span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es01:9300"</span><span class="token punctuation">,</span><span class="token string">"es02:9300"</span><span class="token punctuation">,</span><span class="token string">"es03:9300"</span><span class="token punctuation">]</span>
<span class="token comment">#集群的master候选节点目录。只有在初始化的时候才生效。</span>
<span class="token comment">#这里只写node-1 并且配置这个参数 是用于快速搭建集群。集群已启动自动node-1   是master</span>
<span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span>
<span class="token comment">#cross 跨域访问 配置这个之后 head就可以用了</span>
<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span>  <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span>  <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#-------------------------------------------</span>
<span class="token comment"># es03</span>
<span class="token comment"># 集群的名称(各节点*集群名称*需要保持一致)</span>
<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span>
<span class="token comment"># # # 节点的名称</span>
<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">3</span>
<span class="token comment"># # # 此节点是否可以用作master节点</span>
<span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是存储节点</span>
<span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># # # 此节点是否是预处理节点 如果是master节点的话 建议这里是true</span>
<span class="token key atrule">node.ingest</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment">#设置主机IP 0.0.0.0时外网可以访问到</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0
<span class="token comment"># 配置端口</span>
<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
<span class="token comment"># 集群通信端口</span>
<span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9300</span>
<span class="token comment">#集群内节点信息 每个节点会共享自己的此参数</span>
<span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es01:9300"</span><span class="token punctuation">,</span><span class="token string">"es02:9300"</span><span class="token punctuation">,</span><span class="token string">"es03:9300"</span><span class="token punctuation">]</span>
<span class="token comment">#集群的master候选节点目录。只有在初始化的时候才生效。</span>
<span class="token comment">#这里只写node-1 并且配置这个参数 是用于快速搭建集群。集群已启动自动node-1   是master</span>
<span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span>
<span class="token comment">#cross 跨域访问 配置这个之后 head就可以用了</span>
<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span>  <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span>  <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="编写docker-compose-yml配置文件"><a href="#编写docker-compose-yml配置文件" class="headerlink" title="编写docker-compose.yml配置文件"></a>编写<code>docker-compose.yml</code>配置文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.9"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">es01</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es01
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> bootstrap.memory_lock=true
      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>
        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>1/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>1/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9201<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token punctuation">-</span> 9301<span class="token punctuation">:</span><span class="token number">9300</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic

  <span class="token key atrule">es02</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es02
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> bootstrap.memory_lock=true
      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>
        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>2/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>2/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9202<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token punctuation">-</span> 9302<span class="token punctuation">:</span><span class="token number">9300</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic  

  <span class="token key atrule">es03</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es03
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> bootstrap.memory_lock=true
      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>
        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>3/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> ./node<span class="token punctuation">-</span>3/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9203<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token punctuation">-</span> 9303<span class="token punctuation">:</span><span class="token number">9300</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic

  <span class="token key atrule">kibana</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>7.17.6
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kibana
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 5601<span class="token punctuation">:</span><span class="token number">5601</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> ./kibana/config<span class="token punctuation">:</span>/usr/share/kibana/config
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">I18N_LOCALE</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
      <span class="token key atrule">ELASTICSEARCH_URL</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//es01<span class="token punctuation">:</span><span class="token number">9201</span>
      <span class="token key atrule">ELASTICSEARCH_HOSTS</span><span class="token punctuation">:</span> <span class="token string">'["http://es01:9201","http://es02:9202","http://es03:9203"]'</span>
      <span class="token key atrule">ELASTICSEARCH_SSL_VERIFICATIONMODE</span><span class="token punctuation">:</span> none
      <span class="token key atrule">ELASTICSEARCH_USERNAME</span><span class="token punctuation">:</span> elastic
      <span class="token key atrule">ELASTICSEARCH_PASSWORD</span><span class="token punctuation">:</span> abc
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elastic 
      

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">elastic</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><p>  <code>http://IP:9201/_cluster/health</code></p>
<h4 id="使用X-Pack设置授权加密"><a href="#使用X-Pack设置授权加密" class="headerlink" title="使用X-Pack设置授权加密"></a>使用X-Pack设置授权加密</h4><p>  按照<code>Elasticsearch</code>的要求，如果我们在<code>docker</code>的环境中启动<code>xpack.security.enabled</code>，我们必须也启动<code>xpack.security.transport.ssl.enabled</code>。否则，我们将会看到如下的错误信息：</p>
<div class="note info no-icon"><p>[1]:Transport SSL must be enabled if security is enabled on a [basic] license. Please set [xpack.security.transport.ssl.enabled] to [true] or disable security by setting [xpack.security.enabled] to [false]</p>
</div>
<p>  <code>X-Pack</code> 是 <code>ElasticSearch</code> 的一个插件，这个插件将提供与<code>ElasticSearch</code>来往的安全性。通过安装这个插件，我们就可以对 <code>ElasticSearch</code> 的集群节点生成证书，配置服务访问密码，以及使用TLS来确保HTTP客户端与集群之间的通信是加密的。</p>
<h5 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> es01 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code>进入容器</code>后，前往工作目录下（即<code>/usr/share/elasticsearch</code>），为Elasticearch集群创建一个证书颁发机构。使用<code>elasticsearch-certutil</code>命令输出一个<code>默认</code>名为<code>elastic-stack-ca.p12</code>的PKCS#12密钥存储库文件，它包含CA的公共证书和用于为每个节点签名证书的私钥。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/elasticsearch
./bin/elasticsearch-certutil ca<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p>Please enter the desired output file [elastic-stack-ca.p12]:  此处按回车键<br>Enter password for elastic-stack-ca.p12 :  输入密码 snail(也可以不输入)</p>
</div>
<h5 id="集群中的任意一个节点生成证书和私钥"><a href="#集群中的任意一个节点生成证书和私钥" class="headerlink" title="集群中的任意一个节点生成证书和私钥"></a>集群中的<code>任意</code>一个节点生成证书和私钥</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./bin/elasticsearch-certutil cert <span class="token parameter variable">--ca</span> elastic-stack-ca.p12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="note info no-icon"><p>Enter password for CA (elastic-stack-ca.p12) : 输入上面的密码<br>Please enter the desired output file [elastic-certificates.p12]:  回车</p>
<p>Enter password for elastic-certificates.p12 : 输入上面的密码</p>
</div>
<h5 id="此时已生成证书elastic-certificates-p12，将该证书复制到每一个节点的config-certs目录下"><a href="#此时已生成证书elastic-certificates-p12，将该证书复制到每一个节点的config-certs目录下" class="headerlink" title="此时已生成证书elastic-certificates.p12，将该证书复制到每一个节点的config/certs目录下"></a>此时已生成证<code>书elastic-certificates.p12</code>，将该证书复制到<code>每一个节点</code>的<code>config/certs</code>目录下</h5><p>  上面的命令将使用我们的 CA 来生成一个证书 <code>elastic-certificates.p12</code>:<br>  执行<code>exit</code>退出容器，我们把上面的 <code>elastic-certificates.p12</code> 证书移至<code>./elasticsearch/config/certs</code>文件夹。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> es01:/usr/share/elasticsearch/elastic-certificates.p12 ./elasticsearch/config/certs
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> ./elasticsearch/config
<span class="token function">docker-compose</span> down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="在docker-compose-yaml配置好证书映射"><a href="#在docker-compose-yaml配置好证书映射" class="headerlink" title="在docker-compose.yaml配置好证书映射"></a>在<code>docker-compose.yaml</code>配置好<code>证书</code>映射</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ./elasticsearch/config/certs<span class="token punctuation">:</span>/usr/share/elasticsearch/config/certs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="修改config-elasticsearch-yml来使用加密授权"><a href="#修改config-elasticsearch-yml来使用加密授权" class="headerlink" title="修改config/elasticsearch.yml来使用加密授权"></a>修改<code>config/elasticsearch.yml</code>来使用加密授权</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0

<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>
<span class="token key atrule">http.cors.allow-headers</span><span class="token punctuation">:</span> Authorization<span class="token punctuation">,</span>X<span class="token punctuation">-</span>Requested<span class="token punctuation">-</span>With<span class="token punctuation">,</span>Content<span class="token punctuation">-</span>Length<span class="token punctuation">,</span>Content<span class="token punctuation">-</span>Type


<span class="token key atrule">xpack.license.self_generated.type</span><span class="token punctuation">:</span> basic

<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># 传输层通信:传输协议用于Elasticsearch节点之间的内部通信</span>
<span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.transport.ssl.verification_mode</span><span class="token punctuation">:</span> certificate
<span class="token key atrule">xpack.security.transport.ssl.keystore.path</span><span class="token punctuation">:</span> certs/elastic<span class="token punctuation">-</span>certificates.p12
<span class="token key atrule">xpack.security.transport.ssl.truststore.path</span><span class="token punctuation">:</span> certs/elastic<span class="token punctuation">-</span>certificates.p12

<span class="token comment"># HTTP层通信:客户端到Elasticsearch集群的通信</span>
<span class="token key atrule">xpack.security.authc.api_key.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.http.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.http.ssl.keystore.path</span><span class="token punctuation">:</span> certs/elastic<span class="token punctuation">-</span>certificates.p12
<span class="token key atrule">xpack.security.http.ssl.truststore.path</span><span class="token punctuation">:</span> certs/elastic<span class="token punctuation">-</span>certificates.p12
<span class="token key atrule">xpack.security.http.ssl.verification_mode</span><span class="token punctuation">:</span> certificate

<span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>verification_mode</code> 我们选择<code>certificate</code>，这个模式不会去检查证书的CN,只验证证书是否是信任机构签名的即可.如果我们需要验证,并且配置了IP，则需要把这个模式该为full<br>  如果证书是<code>PEM</code>格式，则使用下方配置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.transport.ssl.verification_mode</span><span class="token punctuation">:</span> certificate 
<span class="token key atrule">xpack.security.transport.ssl.key</span><span class="token punctuation">:</span> /home/es/config/node01.key 
<span class="token key atrule">xpack.security.transport.ssl.certificate</span><span class="token punctuation">:</span> /home/es/config/node01.crt 
<span class="token key atrule">xpack.security.transport.ssl.certificate_authorities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"/home/es/config/ca.crt"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="elasticsearch查看当前集群中哪个节点是主节点"><a href="#elasticsearch查看当前集群中哪个节点是主节点" class="headerlink" title="elasticsearch查看当前集群中哪个节点是主节点"></a><code>elasticsearch</code>查看当前集群中哪个节点是<code>主</code>节点</h4><p>  浏览器输入 : <code>http://ip:9200/_cat/nodes?v</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://ip:9200/_cat/nodes?v
 
<span class="token comment"># 含有 * 的代表当前主节点</span>
 
<span class="token function">ip</span>            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
<span class="token number">172.16</span>.16.188           <span class="token number">52</span>          <span class="token number">99</span>   <span class="token number">5</span>    <span class="token number">2.59</span>    <span class="token number">1.70</span>     <span class="token number">1.45</span> mdi       -      elastic3
<span class="token number">172.16</span>.16.187           <span class="token number">32</span>          <span class="token number">99</span>   <span class="token number">5</span>    <span class="token number">0.99</span>    <span class="token number">0.99</span>     <span class="token number">1.19</span> mdi       -      elastic2
<span class="token number">172.16</span>.16.231           <span class="token number">69</span>          <span class="token number">99</span>   <span class="token number">4</span>    <span class="token number">0.87</span>    <span class="token number">1.00</span>     <span class="token number">1.03</span> mdi       -      elastic4
<span class="token number">172.16</span>.21.28            <span class="token number">57</span>          <span class="token number">98</span>   <span class="token number">4</span>    <span class="token number">2.45</span>    <span class="token number">1.18</span>     <span class="token number">1.05</span> mdi       -      elastic5
<span class="token number">172.16</span>.21.29            <span class="token number">51</span>          <span class="token number">99</span>   <span class="token number">4</span>    <span class="token number">1.05</span>    <span class="token number">1.06</span>     <span class="token number">1.08</span> mdi       -      elastic6
<span class="token number">172.16</span>.16.186           <span class="token number">55</span>          <span class="token number">99</span>   <span class="token number">5</span>    <span class="token number">1.33</span>    <span class="token number">1.35</span>     <span class="token number">1.38</span> mdi       *      elastic1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  其中 <code>master</code> 列为 <code>*</code> 号表示该节点为<code>主节点</code>；如上所示为最后一行的 <code>elastic1</code> 为 <code>master</code> 节点。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><div class="note info no-icon"><p><a href="http://junyao.tech/posts/c275ac42.html">docker-elk集群实践</a><br><a href="https://blog.csdn.net/weixin_39555954/article/details/121683147"> Elasticsearch集群配置密码（传统方式&amp;Docker方式）</a><br><a href="https://blog.csdn.net/smilelims/article/details/119488336">docker安装Elasticsearch+Kibana+密码配置</a><br><a href="https://blog.csdn.net/Sunshine_Mr_Sun/article/details/126076588">Docker安装ELK详细步骤(生产试验,适用所有版本)</a><br><a href="https://xinchen.blog.csdn.net/article/details/125196035">Docker下elasticsearch8部署、扩容、基本操作实战(含kibana)</a><br><a href="https://xinchen.blog.csdn.net/article/details/125232858?spm=1001.2014.3001.5502">docker-compose快速部署elasticsearch-8.x集群+kibana</a></p>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor企业级私服Docker镜像仓库搭建</title>
    <url>/post/bd7f5796.html</url>
    <content><![CDATA[<img data-src="/post/bd7f5796/harbor-horizontal-color.png" style="height:260px;width:100%;box-shadow:none!important;">

<span id="more"></span>


<h3 id="Harbor-简介"><a href="#Harbor-简介" class="headerlink" title="Harbor 简介"></a>Harbor 简介</h3><h4 id="什么是Harbor"><a href="#什么是Harbor" class="headerlink" title="什么是Harbor"></a>什么是Harbor</h4><div class="note info no-icon"><ul>
<li>Harbor 是 VMware 公司开源的企业级 Docker Registry 项目，其目标是帮助用户迅速搭建一个企业级的 Docker Registry （私有仓库）服务。</li>
<li>Harbor以 Docker 公司开源的 Registry 为基础，提供了图形管理 UI 、基于角色的访问控制(Role Based AccessControl) 、AD/LDAP 集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文。</li>
<li>Harbor 的每个组件都是以 Docker 容器的形式构建的，使用 docker-compose 来对它进行部署。用于部署 Harbor 的 docker-compose 模板位于 harbor/docker-compose.yml。</li>
</ul>
</div>

<h4 id="Harbor的特性"><a href="#Harbor的特性" class="headerlink" title="Harbor的特性"></a>Harbor的特性</h4><div class="note info no-icon"><ul>
<li>基于角色控制：用户和仓库都是基于项目进行组织的，而用户在项目中可以拥有不同的权限。</li>
<li>基于镜像的复制策略：镜像可以在多个Harbor实例之间进行复制（同步）。</li>
<li>支持 LDAP/AD：Harbor 可以集成企业内部已有的 AD/LDAP（类似数据库的一张表），用于对已经存在的用户认证和管理。</li>
<li>镜像删除和垃圾回收：镜像可以被删除，也可以回收镜像占用的空间。</li>
<li>图形化用户界面：用户可以通过浏览器来浏览，搜索镜像仓库以及对项目进行管理。</li>
<li>审计管理：所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</li>
<li>支持 RESTful API：RESTful API 提供给管理员对于 Harbor 更多的操控, 使得与其它管理软件集成变得更容易。</li>
<li>Harbor和docker registry的关系：Harbor实质上是对docker registry做了封装，扩展了自己的业务模板。</li>
</ul>
</div>

<h4 id="Harbor的构成"><a href="#Harbor的构成" class="headerlink" title="Harbor的构成"></a>Harbor的构成</h4><img data-src="/post/bd7f5796/harbor001.png" class="" title="Harbor">
<p>  Harbor 在架构上主要有 Proxy、Registry、Core services、Database（Harbor-db）、Log collector（Harbor-log）、Job services 六个组件。</p>
<div class="note info no-icon"><ul>
<li><code>Proxy</code>: 是一个 nginx 的前端代理，Harbor 的 Registry、UI、Token 服务等组件，都处在 nginx 反向代理后边。 该代理将来自浏览器、docker clients 的请求转发到后端不同的服务上。</li>
<li><code>Registry</code>: 负责储存 Docker 镜像，并处理 Docker push/pull 命令。由于要对用户进行访问控制，即不同用户对 Docker 镜像 有不同的读写权限，Registry 会指向一个 Token 服务，强制用户的每次 Docker pull/push 请求都要携带一个合法的 Token， Registry 会通过公钥对 Token 进行解密验证。</li>
<li><code>Core services</code>: Harbor的核心功能，主要提供以下3个服务:<blockquote>
<ul>
<li><code>UI（harbor-ui）</code>: 提供图形化界面，帮助用户管理 Registry 上的镜像（image）, 并对用户进行授权。 </li>
<li><code>WebHook</code>：为了及时获取Registry 上image 状态变化的情况，在Registry 上配置 Webhook，把状态变化传递给 UI 模块。</li>
<li><code>Token</code> 服务：负责根据用户权限给每个 Docker push/pull 命令签发 Token。Docker 客户端向 Registry 服务发起的请求， 如果不包含 Token，会被重定向到 Token 服务，获得 Token 后再重新向 Registry 进行请求。</li>
</ul>
</blockquote>
</li>
<li><code>Database（harbor-db）</code>：为core services提供数据库服务，负责储存用户权限、审计日志、Docker 镜像分组信息等数据。</li>
<li><code>Job services</code>: 主要用于镜像复制，本地镜像可以被同步到远程 Harbor 实例上。</li>
<li><code>Log collector（harbor-log）</code>: 负责收集其他组件的日志到一个地方。</li>
</ul>
</div>

<p>  Harbor 的每个组件都是以 Docker 容器的形式构建的，因此，使用 Docker Compose 来对它进行部署。<br>  总共分为7个容器运行，通过在docker-compose.yml所在目录中执行 docker-compose ps 命令来查看， 名称分别为：nginx、harbor-jobservice、harbor-ui、harbor-db、harbor-adminserver、registry、harbor-log。<br>  其中 harbor-adminserver 主要是作为一个后端的配置数据管理，并没有太多的其他功能。harbor-ui 所要操作的所有数据都通过 harbor-adminserver 这样一个数据配置管理中心来完成。</p>
<h3 id="Harbor-部署"><a href="#Harbor-部署" class="headerlink" title="Harbor 部署"></a>Harbor 部署</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装需要的安装包</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token comment">#设置镜像仓库为阿里云的</span>
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token comment">#更新yum索引安装包</span>
yum makecache fast
<span class="token comment">#安装docker</span>
yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io 
<span class="token comment">#启动docker,设置docker开机启动</span>
systemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/2.11.2/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="部署-Harbor-服务"><a href="#部署-Harbor-服务" class="headerlink" title="部署 Harbor 服务"></a>部署 Harbor 服务</h4><p>  下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p>
<h5 id="下载或上传-Harbor-安装程序"><a href="#下载或上传-Harbor-安装程序" class="headerlink" title="下载或上传 Harbor 安装程序"></a>下载或上传 Harbor 安装程序</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Harbor的压缩包下载地址：https://github.com/goharbor/harbor/releases</span>
<span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> harbor-offline-installer-v2.6.1.tgz <span class="token parameter variable">-C</span> /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/bd7f5796/harbor002.png" class="" title="Harbor">

<h5 id="修改harbor安装的配置文件"><a href="#修改harbor安装的配置文件" class="headerlink" title="修改harbor安装的配置文件"></a>修改harbor安装的配置文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/harbor

<span class="token function">cp</span> harbor.yml.tmpl harbor.yml
<span class="token function">vi</span> /usr/local/harbor/harbor.yml

--5行--修改，设置为Harbor服务器的IP地址或者域名
<span class="token function">hostname</span> <span class="token operator">=</span> <span class="token number">192.168</span>.3.202
--10行--修改-端口
port <span class="token operator">=</span> <span class="token number">82</span>
--13行--https的注释掉，局域网下不需要
<span class="token comment">#https:</span>
   <span class="token comment"># https port for harbor, default is 443</span>
  <span class="token comment"># port: 443</span>
   <span class="token comment"># The path of cert and key files for nginx</span>
  <span class="token comment"># certificate: /your/certificate/path</span>
  <span class="token comment"># private_key: /your/private/key/path</span>
--59行--指定管理员的初始密码，默认的用户名/密码是admin/Harbor12345
harbor_admin_password <span class="token operator">=</span> Harbor12345

:wq<span class="token operator">!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./install.sh 
<span class="token comment">#以 pull (获取)镜像并启动容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  安装之后生成<code>docker-compose.yml</code></p>
<img data-src="/post/bd7f5796/harbor003.png" class="" title="Harbor">

<h5 id="查看-Harbor-启动镜像"><a href="#查看-Harbor-启动镜像" class="headerlink" title="查看 Harbor 启动镜像"></a>查看 Harbor 启动镜像</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/harbor

<span class="token function">docker</span> compose <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/bd7f5796/harbor004.png" class="" title="Harbor">

<h5 id="镜像控制"><a href="#镜像控制" class="headerlink" title="镜像控制"></a>镜像控制</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>      <span class="token comment">#后台启动</span>
<span class="token function">docker-compose</span> stop       <span class="token comment">#停止</span>
<span class="token function">docker-compose</span> restart    <span class="token comment">#重新启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="登录-Harbor-WEB-UI-界面"><a href="#登录-Harbor-WEB-UI-界面" class="headerlink" title="登录 Harbor WEB UI 界面"></a>登录 Harbor WEB UI 界面</h4><p>  安装完成，输入地址<code>http://192.168.3.202:82</code>，</p>
<img data-src="/post/bd7f5796/harbor005.png" class="" title="Harbor-WEB_UI">
<p>  到这里harbor镜像仓库就搭好了，下面演示怎么用镜像仓库。</p>
<h3 id="Harbor-镜像仓库使用"><a href="#Harbor-镜像仓库使用" class="headerlink" title="Harbor 镜像仓库使用"></a>Harbor 镜像仓库使用</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><img data-src="/post/bd7f5796/harbor006.png" class="" title="Harbor">

<h4 id="配置Docker私有镜像仓库"><a href="#配置Docker私有镜像仓库" class="headerlink" title="配置Docker私有镜像仓库"></a>配置<code>Docker</code>私有镜像仓库</h4><p>  项目建好了，如何推送呢，首先推送的服务器要修改本机的配置文件并重启docker，注意重启docker前先重新加载配置文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  添加<code> "insecure-registries":[harbor地址:端口]</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>
        <span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"192.168.3.202:82"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  重启<code>docker</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="登录-Harbor-私有镜像仓库"><a href="#登录-Harbor-私有镜像仓库" class="headerlink" title="登录 Harbor 私有镜像仓库"></a>登录 <code>Harbor</code> 私有镜像仓库</h4><p>  登陆docker仓库 ,<code>docker login&lt;harbor所在服务器ip&gt;:&lt;端口&gt;</code></p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker login http://192.168.3.202:82
docker login -u admin -p Harbor12345 http://192.168.3.202:82 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img data-src="/post/bd7f5796/harbor007.png" class="" title="Harbor">

<h4 id="下载镜像进行推送测试"><a href="#下载镜像进行推送测试" class="headerlink" title="下载镜像进行推送测试"></a>下载镜像进行推送测试</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull nginx

docker tag nginx:latest 192.168.3.202:82/xiaosige/nginx:gb

docker push 192.168.3.202:82/xiaosige/nginx:gb

docker pull 192.168.3.202:82/xiaosige/nginx:gb

docker logout 192.168.3.202<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/bd7f5796/harbor008.png" class="" title="Harbor">
<img data-src="/post/bd7f5796/harbor009.png" class="" title="Harbor">


<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>Fail2ban，解决网站被扫描、CC攻击、ssh暴力破解、防爬虫等问题</title>
    <url>/post/a8e858c0.html</url>
    <content><![CDATA[<img data-src="/post/a8e858c0/fail2ban002.png" style="box-shadow:none!important;">

<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Fail2ban可以监视你的系统日志，然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作（一般情况下是调用防火墙屏蔽），如:当有人在试探你的HTTP、SSH、SMTP、FTP密码，只要达到你预设的次数，fail2ban就会调用防火墙屏蔽这个IP，而且可以发送e-mail通知系统管理员，是一款很实用、很强大的软件！<br>  Fail2ban由python语言开发，基于logwatch、gamin、iptables、tcp-wrapper、shorewall等。如果想要发送邮件通知道，那还需要安装postfix或sendmail。<br>  在外网环境下，有很多的恶意扫描和密码猜测等恶意攻击行为，使用Fail2ban配合iptables，实现动态防火墙是一个很好的解决方案。</p>
<div class="note info no-icon"><ol>
<li>支持大量服务.如sshd,apache,qmail,proftpd,sasl等等;</li>
<li>支持多种动作.如iptables,tcp-wrapper,shorewall(iptables第三方工具),mail notifications(邮件通知)等等;</li>
<li>在logpath选项中支持通配符;</li>
<li>需要Gamin支持(注:Gamin是用于监视文件和目录是否更改的服务工具);</li>
<li>需要安装python,iptables,tcp-wrapper,shorewall,Gamin.如果想要发邮件,那必需安装postfix或sendmail.</li>
</ol>
</div>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>  编译安装<a href="http://www.fail2ban.org/wiki/index.php/Downloads">fail2ban</a>，需要从官网下载包<a href="https://github.com/fail2ban/fail2ban/archive/0.9.4.tar.gz"> fail2ban-0.9.4 </a>，解压安装即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/loca/src
<span class="token function">wget</span> https://github.com/fail2ban/fail2ban/archive/0.9.4.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-zxf</span> <span class="token number">0.9</span>.4.tar.gz
<span class="token function">mv</span> <span class="token number">0.9</span>.4 fail2ban-094
<span class="token builtin class-name">cd</span> fail2ban-094
./setup.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="apt-yum安装"><a href="#apt-yum安装" class="headerlink" title="apt|yum安装"></a><code>apt|yum</code>安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Ubuntu</span>
<span class="token function">apt-get</span> <span class="token function">install</span> fail2ban
<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fail2ban
<span class="token comment">#CentOS</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># CentOS内置源并未包含fail2ban，需要先安装epel源</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> fail2ban-firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">/etc/fail2ban</span> <span class="token value attr-value">                   # fail2ban 服务配置目录</span>
<span class="token key attr-name">/etc/fail2ban/action.d</span> <span class="token value attr-value">          # iptables 、mail 等动作文件目录</span>
<span class="token key attr-name">/etc/fail2ban/filter.d</span> <span class="token value attr-value">          # 条件匹配文件目录，过滤日志关键内容</span>
<span class="token key attr-name">/etc/fail2ban/jail.conf</span> <span class="token value attr-value">         # fail2ban 防护配置文件</span>
<span class="token key attr-name">/etc/fail2ban/fail2ban.conf</span> <span class="token value attr-value">     # fail2ban 配置文件，定义日志级别、日志、sock 文件位置等</span>

<span class="token key attr-name">cd</span> <span class="token value attr-value">/etc/fail2ban                 # 进入配置文件所在的目录</span>

<span class="token key attr-name">cp</span> <span class="token value attr-value">jail.conf jail.local          # 备份配置文件</span>
<span class="token key attr-name">cp</span> <span class="token value attr-value">fail2ban.conf fail2ban.local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试是否正常运行"><a href="#测试是否正常运行" class="headerlink" title="测试是否正常运行"></a>测试是否正常运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-client <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="设置fail2ban开机自启动"><a href="#设置fail2ban开机自启动" class="headerlink" title="设置fail2ban开机自启动"></a>设置fail2ban开机自启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看iptables的禁用情况"><a href="#查看iptables的禁用情况" class="headerlink" title="查看iptables的禁用情况"></a>查看iptables的禁用情况</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-nvL</span>
iptables <span class="token parameter variable">-L</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="配置防护"><a href="#配置防护" class="headerlink" title="配置防护"></a>配置防护</h3><h4 id="sshd策略"><a href="#sshd策略" class="headerlink" title="sshd策略"></a>sshd策略</h4><p>  进入fail2ban的目录，复制一份配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/fail2ban 

<span class="token function">sudo</span> <span class="token function">cp</span> fail2ban.conf fail2ban.local
<span class="token function">sudo</span> <span class="token function">cp</span> jail.conf jail.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  修改<code>jail.local</code>配置文件<code>启动sshd</code>策略。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> jail.local

<span class="token comment"># 定位到285行左右，添加一行：</span>
enabled <span class="token operator">=</span> <span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/a8e858c0/fail2ban003.png" class="" title="jail.local">
<p>  修改<code>fail2ban.local</code>,定位到<code>最后一行</code>，添加如下内容(CentOS使用如下配置):</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sshd<span class="token punctuation">]</span>
<span class="token builtin class-name">enable</span> <span class="token operator">=</span> ture
port <span class="token operator">=</span> <span class="token number">22</span>   <span class="token comment"># 注意改成自己对应的ssh端口</span>
filter <span class="token operator">=</span>sshd
<span class="token comment"># CentOS</span>
logpath <span class="token operator">=</span> /var/log/secure
<span class="token comment"># Ubuntu</span>
<span class="token comment"># logpath = /var/log/auth.log</span>
maxretry <span class="token operator">=</span> <span class="token number">5</span>   <span class="token comment"># 最大尝试次数</span>
bantime <span class="token operator">=</span> <span class="token number">1800</span> <span class="token comment">#封禁时间，单位s。-1为永久封禁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/a8e858c0/fail2ban004.png" class="" title="fail2ban.local">
<p>  保存配置，重启生效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart fail2ban  <span class="token comment">#重启</span>
<span class="token function">sudo</span> fail2ban-client status <span class="token comment">#查看状态</span>
<span class="token function">sudo</span> fail2ban-client status sshd <span class="token comment">#查看sshd的详细状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h4 id="首先编写封禁访问nginx-404状态码的ip地址的配置规则"><a href="#首先编写封禁访问nginx-404状态码的ip地址的配置规则" class="headerlink" title="首先编写封禁访问nginx 404状态码的ip地址的配置规则"></a>首先编写封禁访问nginx 404状态码的ip地址的配置规则</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/fail2ban/filter.d/nginx.conf

<span class="token punctuation">[</span>Definition<span class="token punctuation">]</span>
failregex <span class="token operator">=</span> <span class="token operator">&lt;</span>HOST<span class="token operator">&gt;</span> -.*- .*HTTP/1.* <span class="token number">404</span> .*$
ignoreregex <span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  保存后测试配置文件相对于日志是否正确</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-regex /home/wwwlogs/access.log /etc/fail2ban/filter.d/nginx.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后将封禁规则加入配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/fail2ban/jail.conf   <span class="token comment"># 文件尾部写入</span>

<span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>
enabled <span class="token operator">=</span> <span class="token boolean">true</span>
port <span class="token operator">=</span> http,https
filter <span class="token operator">=</span> nginx                          <span class="token comment"># 规则文件的名字</span>
action <span class="token operator">=</span> iptables<span class="token punctuation">[</span>name<span class="token operator">=</span>nginx, <span class="token assign-left variable">port</span><span class="token operator">=</span>http, <span class="token assign-left variable">protocol</span><span class="token operator">=</span>tcp<span class="token punctuation">]</span>
<span class="token comment"># sendmail-whois[name=tomcat, dest=abc@mail.com] 发送邮件功能 </span>
logpath <span class="token operator">=</span> /home/wwwlogs/access.log      <span class="token comment"># 日志路径</span>
bantime <span class="token operator">=</span> <span class="token number">14400</span>                         <span class="token comment"># 封禁的时间</span>
findtime <span class="token operator">=</span> <span class="token number">3</span>                            <span class="token comment"># 在几秒内</span>
maxretry <span class="token operator">=</span> <span class="token number">2</span>                            <span class="token comment"># 有几次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/iptables start
/etc/init.d/fail2ban start 或 fail2ban-client start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="查看状态等命令"><a href="#查看状态等命令" class="headerlink" title="查看状态等命令"></a>查看状态等命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-client start <span class="token comment"># 启动</span>
fail2ban-client reload <span class="token comment"># 重载</span>
fail2ban-client stop <span class="token comment"># 停止</span>
fail2ban-client status <span class="token comment"># 查看状态</span>
fail2ban-client <span class="token builtin class-name">set</span> nginx addignoreip <span class="token number">180.158</span>.35.30 <span class="token comment"># 将ip加入nginx监狱的白名单</span>
fail2ban-client <span class="token builtin class-name">set</span> nginx delignoreip <span class="token number">180.158</span>.35.30 <span class="token comment"># 将ip移除nginx监狱的白名单</span>
fail2ban-client <span class="token builtin class-name">set</span> nginx banip IP地址 <span class="token comment"># 手工ban</span>
fail2ban-client <span class="token builtin class-name">set</span> nginx unbanip IP地址 <span class="token comment"># 手工解</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看fail2ban的日志"><a href="#查看fail2ban的日志" class="headerlink" title="查看fail2ban的日志"></a>查看fail2ban的日志</h3><div class="note info no-icon"><p>fail2ban的日志默认在 <code>/var/log/fail2ban.log</code> ，日志中记录着<code>Ban IP</code>的记录和<code>UnBan IP</code>的记录 ，也有修改配置文件重载后的记录。<br><code>cat /var/log/fail2ban.log</code></p>
</div>

<h3 id="Fail2ban从黑名单中移除IP"><a href="#Fail2ban从黑名单中移除IP" class="headerlink" title="Fail2ban从黑名单中移除IP"></a>Fail2ban从黑名单中移除IP</h3><p>  fail2ban从黑名单（ban list）中移除IP的方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-client <span class="token builtin class-name">set</span> sshd unbanip <span class="token number">8.8</span>.8.8

<span class="token comment"># 此时再查看banlist会发现IP已移除。</span>
fail2ban-client status sshd

iptables <span class="token parameter variable">-nvL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Fail2ban重启默认清除iptables，取消默认"><a href="#Fail2ban重启默认清除iptables，取消默认" class="headerlink" title="Fail2ban重启默认清除iptables，取消默认"></a>Fail2ban重启默认清除iptables，取消默认</h3><div class="note info no-icon"><p>fail2ban重启时默认会清除iptables里的内容， 若需要重启不清除 可在下面的配置文件里更改.<br>一般fail2ban安装在 <code>/etc/fail2ban</code> 目录下<br>进入到 <code>action.d/</code>目录下 编辑<code>iptables-common.conf</code></p>
</div>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/fail2ban/action.d/iptables-common.conf

<span class="token comment"># 屏蔽下面的一行配置即可</span>
<span class="token comment"># actionflush = &lt;iptables&gt; -F f2b-&lt;name&gt;</span>

<span class="token comment"># 重启fail2ban服务 根据系统配置，命令可能不一样</span>
systenctl reload fail2ban.server
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<a href="/post/2317c1ec.html" title="将SSH多次登录失败的IP加入黑名单">将SSH多次登录失败的IP加入黑名单</a> 
<p><a href="https://sourceforge.net/projects/denyhosts/files/denyhosts/3.1.2-beta/DenyHosts-3.1.2.tar.gz/download">DenyHosts</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之 Traefik 安装部署</title>
    <url>/post/36ac4c26.html</url>
    <content><![CDATA[<img data-src="/post/36ac4c26/traefik003.png" style="height:200px;box-shadow:none!important;">
<span id="more"></span>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="note info no-icon"><p>  Traefik 是一款开源的边缘路由器，可以作为整个平台的入口（网关），根据逻辑规则，处理并路由整个传入的请求。</p>
<ol>
<li>自动服务发现</li>
<li>原生兼容所有主要集群技术，例如 Kubernetes、Docker、Docker Swarm、AWS、Mesos、Marathon，并且可以同时处理多个。</li>
<li>无需维护和同步单独的配置文件，自动实时更新，无需重新启动，不会中断连接</li>
<li>集成了漂亮的 dashboard 界面</li>
</ol>
</div>


<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="Traefik-中的配置分为2部分"><a href="#Traefik-中的配置分为2部分" class="headerlink" title="Traefik 中的配置分为2部分"></a>Traefik 中的配置分为2部分</h4><div class="note primary no-icon"><ul>
<li><code>全动态路由配置（动态配置）</code>，从Provider获取<em>，</em>定义如何由系统来处理请求。此配置可以更改并无缝热重载，不会出现任何请求中断或连接丢失。</li>
<li><code>启动配置（静态配置）</code>，设置与Provider连接并定义Traefik 将侦听的入口点。</li>
</ul>
</div>

<h4 id="静态配置"><a href="#静态配置" class="headerlink" title="静态配置"></a>静态配置</h4><div class="note primary no-icon"><p>  <strong>Traefik 中定义静态配置选项有三种不同</strong>的、互斥的（即您只能同时使用一种）的方法：</p>
<ul>
<li>在配置文件中</li>
<li>在命令行参数中</li>
<li>作为环境变量</li>
</ul>
</div>

<div class="note primary no-icon"><p>  <strong>配置文件</strong><br>  启动时，Traefik 在以下位置搜索名为<code>traefik.yml</code>（或<code>traefik.yaml</code>或<code>traefik.toml</code>）的文件：</p>
<ul>
<li><code>/etc/traefik/</code></li>
<li><code>$XDG_CONFIG_HOME/</code></li>
<li><code>$HOME/.config/</code></li>
<li><code>.</code>（工作目录）</li>
</ul>
<p>  可以使用<code>configFile</code>参数覆盖它:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">traefik <span class="token parameter variable">--configFile</span><span class="token operator">=</span>foo/bar/myconfigfile.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</div>


<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>  可以使用 <code>traefik --help</code> 获取参数:</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">--accesslog：
访问日志设置。（默认值：false）

--api：
<span class="token key attr-name">启用</span> <span class="token value attr-value">api/仪表板。（默认值：false）</span>

--certificatesresolvers.&lt;name&gt;：
证书解析器配置。（默认值：false）

--entrypoints.&lt;name&gt;：
入口点定义。（默认值：false）

--log：
<span class="token key attr-name">Traefik</span> <span class="token value attr-value">日志设置。（默认值：false）</span>

--pilot.dashboard：
<span class="token key attr-name">在仪表板中启用</span> <span class="token value attr-value">Traefik Pilot。（默认值：true）</span>

<span class="token key attr-name">--ping</span><span class="token punctuation">:</span>
启用ping。（默认值：false）

--providers.docker：
<span class="token key attr-name">使用默认设置启用</span> <span class="token value attr-value">Docker 后端。（默认值：false）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>  常见的环境变量有（和参数一样，只不过换成大写形式，加上<code>TRAEFIK_</code>前缀）：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">TRAEFIK_ACCESSLOG：
访问日志设置。（默认值：false）

TRAEFIK_API：
<span class="token key attr-name">启用</span> <span class="token value attr-value">api/仪表板。（默认值：false）</span>

TRAEFIK_CERTIFICATESRESOLVERS_&lt;NAME&gt;：
证书解析器配置。（默认值：false）

TRAEFIK_ENTRYPOINTS_&lt;NAME&gt;：
入口点定义。（默认值：false）

TRAEFIK_LOG：
<span class="token key attr-name">Traefik</span> <span class="token value attr-value">日志设置。（默认值：false）</span>

TRAEFIK_PILOT_DASHBOARD：
<span class="token key attr-name">在仪表板中启用</span> <span class="token value attr-value">Traefik Pilot。（默认值：true）</span>

<span class="token key attr-name">TRAEFIK_PING</span><span class="token punctuation">:</span>
启用ping。（默认值：false）

TRAEFIK_PROVIDERS_DOCKER：
<span class="token key attr-name">使用默认设置启用</span> <span class="token value attr-value">Docker 后端。（默认值：false）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Docker部署Traefik"><a href="#Docker部署Traefik" class="headerlink" title="Docker部署Traefik"></a>Docker部署Traefik</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/traefik/<span class="token punctuation">{</span>config,ssl<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/36ac4c26/traekit001.png" class="" title="traefik目录">
<img data-src="/post/36ac4c26/traekit002.png" class="" title="config目录">
<h4 id="创建外部网卡"><a href="#创建外部网卡" class="headerlink" title="创建外部网卡"></a>创建外部网卡</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker network create traefik \
-o com.docker.network.bridge.name=traefik \
-o com.docker.network.bridge.host_binding_ipv4=0.0.0.0 \
--driver=bridge --subnet=172.18.0.0/16 --gateway=172.18.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> traefik
    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.9.1
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token comment"># The HTTP port</span>
      <span class="token punctuation">-</span> 30080<span class="token punctuation">:</span><span class="token number">80</span>
      <span class="token comment"># Https</span>
      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>
      <span class="token comment"># The Web UI (enabled by --api.insecure=true)</span>
      <span class="token punctuation">-</span> <span class="token string">"38080:8080"</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> traefik
    <span class="token key atrule">command</span><span class="token punctuation">:</span> traefik <span class="token punctuation">-</span><span class="token punctuation">-</span>configFile /etc/traefik.toml
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token comment"># So that Traefik can listen to the Docker events</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock<span class="token punctuation">:</span>ro
      <span class="token punctuation">-</span> ./ssl/<span class="token punctuation">:</span>/data/ssl/<span class="token punctuation">:</span>ro
      <span class="token punctuation">-</span> ./traefik.toml<span class="token punctuation">:</span>/etc/traefik.toml<span class="token punctuation">:</span>ro
      <span class="token punctuation">-</span> ./config/<span class="token punctuation">:</span>/etc/traefik/config/<span class="token punctuation">:</span>ro
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD-SHELL"</span><span class="token punctuation">,</span> <span class="token string">"wget -q --spider --proxy off localhost:8080/ping || exit 1"</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 3s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s

<span class="token comment"># 先创建外部网卡 docker network create traefik</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>command二选一</code>：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">command</span><span class="token punctuation">:</span> traefik <span class="token punctuation">-</span><span class="token punctuation">-</span>configFile /etc/traefik.toml
<span class="token key atrule">command</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"--entrypoints.http.address=:80"</span>
  <span class="token punctuation">-</span> <span class="token string">"--entrypoints.https.address=:443"</span>
  <span class="token punctuation">-</span> <span class="token string">"--api=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--api.insecure=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--api.dashboard=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--api.debug=false"</span>
  <span class="token punctuation">-</span> <span class="token string">"--ping=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.watch=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.exposedbydefault=false"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.endpoint=unix:///var/run/docker.sock"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.swarmMode=false"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.useBindPortIP=false"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.docker.network=traefik"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.file=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.file.watch=true"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.file.directory=/etc/traefik/config"</span>
  <span class="token punctuation">-</span> <span class="token string">"--providers.file.debugloggeneratedtemplate=true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="路由与负载均衡"><a href="#路由与负载均衡" class="headerlink" title="路由与负载均衡"></a>路由与负载均衡</h3><div class="note primary no-icon"><p>  当使用 <code>Docker</code> 作为<code>provider</code> 时，<code>Traefik</code> 使用容器标签（<code>labels</code>）来检索其路由配置。<br>  完整的Traefik 的架构分为这几部分：</p>
<ul>
<li><code>entryPoints</code> 侦听传入流量（端口，…）EntryPoints 是 Traefik 的网络入口点。它们定义了将接收数据包的端口，以及是侦听 TCP 还是 UDP。</li>
<li><code>routers</code> 分析请求（主机、路径、标头、SSL 等），路由器负责将传入请求连接到可以处理它们的服务</li>
<li><code>services</code> 将请求转发给您的服务（负载平衡，…）</li>
<li><code>middlewares</code> 可能会更新请求或根据请求做出决定（身份验证、速率限制、标头等）</li>
<li><code>providers</code> 发现存在于您的基础架构上的服务（他们的 IP、健康状况……）</li>
</ul>
</div>

<h4 id="entryPoints"><a href="#entryPoints" class="headerlink" title="entryPoints"></a>entryPoints</h4><blockquote>
<p>EntryPoints 是 Traefik 的网络入口点。它们定义将接收请求的端口（无论是 HTTP 还是 TCP）</p>
</blockquote>
<h5 id="部署中指定，可以是启动命令参数："><a href="#部署中指定，可以是启动命令参数：" class="headerlink" title="部署中指定，可以是启动命令参数："></a>部署中指定，可以是启动命令参数：</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">command</span><span class="token punctuation">:</span>
	<span class="token punctuation">-</span> <span class="token string">"--entrypoints.http.address=:80"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="静态配置文件中："><a href="#静态配置文件中：" class="headerlink" title="静态配置文件中："></a>静态配置文件中：</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">entryPoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
   <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">":80"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="Provider配置"><a href="#Provider配置" class="headerlink" title="Provider配置"></a>Provider配置</h4><ul>
<li><code>endpoint</code>必需<em>，</em>默认=“unix:///var/run/docker.sock”</li>
<li><code>useBindPortIP</code>可选，默认=false，Traefik 将请求路由匹配到容器的 IP/端口。设置<code>useBindPortIP=true</code>，Traefik 使用附加到容器绑定的 IP/端口，而不是其内部网络 IP/端口。当与<code>traefik.http.services.&lt;name&gt;.loadbalancer.server.port</code>标签结合使用时（告诉 Traefik 将请求路由匹配到特定端口），Traefik 会尝试在 port 上找到绑定<code>traefik.http.services.&lt;name&gt;.loadbalancer.server.port</code>。如果找不到这样的绑定，Traefik 会回退到容器的内部网络 IP，但仍然使用<code>traefik.http.services.&lt;name&gt;.loadbalancer.server.port</code>标签中设置的IP/端口 。</li>
<li><code>exposedByDefault</code>可选<em>，默认=true。</em>默认情况下Traefik 公开容器。如果设置为<code>false</code>，<code>traefik.enable=true</code>则从生成的路由配置中忽略没有标签的容器。</li>
<li><code>network</code>可选，默认=“”定义用于连接到所有容器的默认 docker 网络。可以使用<code>traefik.docker.network</code>标签在每个容器的基础上覆盖此选项。</li>
<li><code>defaultRule</code><em>可选，默认=<code>Host(</code><code>)</code>。</em>如果标签未定义任何规则，则该选项定义要应用于容器的路由规则。</li>
<li><code>swarmMode</code><em>可选，默认=false。</em>启用 Swarm 模式（而不是独立的 Docker）。</li>
<li><code>swarmModeRefreshSeconds</code><em>可选，默认值=15。</em>定义群模式的轮询间隔（以秒为单位）。</li>
<li><code>httpClientTimeout</code><em>可选，默认=0。</em>定义 HTTP 连接的客户端超时（以秒为单位）。如果它的值为<code>0</code>，则不设置超时。</li>
<li><code>watch</code><em>可选，默认=true。</em>监听 Docker Swarm 事件。<h4 id="中间件配置"><a href="#中间件配置" class="headerlink" title="中间件配置"></a>中间件配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 在 labels 中指定</span>
<span class="token key attr-name">traefik.http.middlewares.中间件名称.中间件类型</span><span class="token punctuation">=</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="常用中间件类型"><a href="#常用中间件类型" class="headerlink" title="常用中间件类型"></a>常用中间件类型</h5><div class="note primary no-icon"><ul>
<li><code>AddPrefix</code> 添加前缀<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Prefixing with /foo</span>
<span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"traefik.http.middlewares.add-foo.addprefix.prefix=/foo"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>BasicAuth</code> 添加基本身份验证<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><code>Buffering</code> 限制了可以转发到服务的请求的大小。<br>通过缓冲，Traefik 将整个请求读入内存（可能将大请求缓冲到磁盘中），并拒绝超过指定大小限制的请求。这可以帮助服务避免大量数据（<code>multipart/form-data</code>例如），并且可以最大限度地减少向服务发送数据所花费的时间。<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sets the maximum request body to 2MB</span>
<span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=2000000"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>Compress</code> 中间件使用 gzip 压缩</li>
<li><code>ContentType</code> 指定是否让<code>Content-Type</code>标头（如果后端尚未定义）自动设置为从响应内容派生的值。</li>
<li><code>DigestAuth</code> 中间件将您的服务的访问权限限制为已知用户</li>
<li><code>ErrorPage</code> 中间件根据 HTTP 状态代码的配置范围返回一个自定义页面来代替默认页面。</li>
<li><code>ForwardAuth</code> 中间件将身份验证委托给外部服务。如果服务以 2XX 代码应答，则授予访问权限，并执行原始请求。否则，返回来自认证服务器的响应。</li>
<li><code>Headers</code> 中间件管理请求和响应的标头。</li>
<li><code>IPWhitelist</code> 根据客户端 IP 接受/拒绝请求。</li>
<li><code>inflightreq</code> 限制同时进行中的请求数</li>
<li><code>PassTLSClientCert</code> 将通过的客户端 TLS 证书中的选定数据添加到标头中。</li>
<li><code>RateLimit</code> 控制进入服务的请求数</li>
<li><code>RedirectRegex</code> 使用正则表达式匹配和替换来重定向请求。</li>
<li><code>RedirectScheme</code> 将请求从一个方案/端口重定向到另一个。</li>
<li><code>replacepath</code> 替换请求 URL 的路径。</li>
<li><code>ReplaceRegex</code> 使用正则表达式匹配和替换来替换 URL 的路径。</li>
<li><code>retry</code> 如果后端服务器没有回复，重试中间件向后端服务器重新发出给定次数的请求。服务器一响应，中间件就会停止重试，无论响应状态如何。Retry 中间件有一个可选配置来启用指数退避。</li>
<li><code>stripprefix</code> 在转发请求之前从路径中删除前缀</li>
<li><code>stripprefixregex</code> 在转发请求之前从路径中删除前缀（使用正则表达式）</li>
</ul>
</div></li>
</ul>
<h4 id="Router配置"><a href="#Router配置" class="headerlink" title="Router配置"></a>Router配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 指定路由入口点，http为traefik启动时定义的端口</span>
<span class="token key attr-name">"traefik.http.routers.自定义路由名称.entrypoints</span><span class="token punctuation">=</span><span class="token value attr-value">http"</span>

<span class="token comment"># 定义路由规则，监听来自于域名的请求，Host中用`符号</span>
<span class="token key attr-name">"traefik.http.routers.自定义路由名称.rule</span><span class="token punctuation">=</span><span class="token value attr-value">Host(`www.domain.com`)"</span>

<span class="token comment"># 设置路由引用中间件</span>
<span class="token key attr-name">"traefik.http.routers.自定义路由名称.middlewares</span><span class="token punctuation">=</span><span class="token value attr-value">中间件名称" </span>

<span class="token comment"># 指定路由后端为哪个service，多个service时需要具体指定路由到哪个</span>
<span class="token key attr-name">"traefik.http.routers.自定义路由名称.service</span><span class="token punctuation">=</span><span class="token value attr-value">服务名" </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Services配置"><a href="#Services配置" class="headerlink" title="Services配置"></a>Services配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"> ## 用于docker服务发现与负载均衡，自动发现指定端口的服务，作为后端服务</span>
<span class="token comment"> ## 如果容器expose了单个端口，则 Traefik 使用此端口进行私有通信</span>
<span class="token comment"> ## 如果一个容器 expose了多个端口，或者没有暴露任何端口，那么你必须使用标签手动指定 Traefik 应该使用哪个端口进行通信</span>

<span class="token key attr-name">"traefik.http.services.自定义服务名.loadbalancer.server.port</span><span class="token punctuation">=</span><span class="token value attr-value">应用端口"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">wg-easy</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> weejewel/wg<span class="token punctuation">-</span>easy
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> wg<span class="token punctuation">-</span>easy
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> WG_HOST=18.183.2.23
      <span class="token punctuation">-</span> WG_DEFAULT_DNS=114.114.114.114<span class="token punctuation">,</span>8.8.4.4
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"51820:51820/udp"</span>
    <span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> net.ipv4.ip_forward=1
      <span class="token punctuation">-</span> net.ipv4.conf.all.src_valid_mark=1
    <span class="token key atrule">cap_add</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> NET_ADMIN
      <span class="token punctuation">-</span> SYS_MODULE
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>

      <span class="token comment"># 启用 traefik 动态配置</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.enable=true"</span>

      <span class="token comment"># 设置trafik 网络</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.docker.network=traefik"</span>

      <span class="token comment">##  定义名为 auth-user 的 基本认证 中间件，密码使用htpasswd生成，$作为转义字符</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.http.middlewares.auth-users.basicauth.users=admin:$$apr1$$WArvArno$$CUyHO2J8dg6BQNUbhTiwA."</span>   

      <span class="token comment"># 定义名为 wg-easy 的路由，该路由在入口点 Web（端口80）上侦听</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.http.routers.wg-easy.entrypoints=http"</span>

      <span class="token comment">## 设置wg-easy路由入口点 引用中间件auth-users</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.http.routers.wg-easy.middlewares=auth-users"</span> 
      
      <span class="token comment">##  定义此 wg-easy 路由规则，监听来自于域名为he.simple11618.xyz的请求，将其路由到服务</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.http.routers.wg-easy.rule=Host(`he.simple11618.xyz`)"</span>

      <span class="token comment">## 将请求转发到容器上的端口，需要使用路由器上的service参数引用服务负载均衡器端口定义</span>
      <span class="token comment">## 默认转发到expose的第一个端口，多端口需要单独指定</span>
      <span class="token punctuation">-</span> <span class="token string">"traefik.http.services.my-service.loadbalancer.server.port=51821"</span>


    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> traefik

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<p>参考：<br><a href="https://doc.traefik.io/traefik/">Traefik的官方文档</a><br><a href="https://shanyue.tech/op/">Docker 个人服务器运维</a><br><a href="https://blog.csdn.net/qq_35278597/article/details/124360125">Traefik学习</a><br><a href="https://blog.csdn.net/qq_42413011/article/details/115430371">docker篇-(docker-compose安装web网关traefik)</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>AnolisOS 8 安装 EPEL源</title>
    <url>/post/fbedfa68.html</url>
    <content><![CDATA[<p>  本文以 AnolisOS 8.4 为例。在首次开机运行系统后一般都需要进行以下 3 个步骤：</p>
<span id="more"></span>

<h3 id="取消-sudo-密码"><a href="#取消-sudo-密码" class="headerlink" title="取消 sudo 密码"></a>取消 <code>sudo</code> 密码</h3><p>  执行以下命令后退出系统再登回系统以确认 <code>sudo</code> 密码已被取消。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span> -
<span class="token function">chmod</span> +w /etc/sudoers
<span class="token function">vi</span> /etc/sudoers
<span class="token comment"># 找到 anuser ALL=(ALL) ALL</span>
<span class="token comment"># 改成 anuser ALL=(ALL) NOPASSWD: ALL</span>
<span class="token comment"># 按 Esc，输入 :wq 保存并退出</span>
<span class="token comment"># 输入如下命令收回 “写” 权限：</span>
<span class="token function">chmod</span> <span class="token parameter variable">-w</span> /etc/sudoers
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="设置-SSH-以密码方式远程登录"><a href="#设置-SSH-以密码方式远程登录" class="headerlink" title="设置 SSH 以密码方式远程登录"></a>设置 <code>SSH</code> 以密码方式远程登录</h3><p>  执行下列命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span> -
<span class="token function">vi</span> /etc/ssh/sshd_config
<span class="token comment"># 找到 PasswordAuthentication no</span>
<span class="token comment"># 改成 PasswordAuthentication yes</span>
<span class="token comment"># 按 Esc，输入 :wq 保存并退出</span>
<span class="token comment"># 输入如下命令重启 sshd 服务使其生效：</span>
systemctl restart sshd.service
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置静态-IP。"><a href="#配置静态-IP。" class="headerlink" title="配置静态 IP。"></a>配置静态 <code>IP</code>。</h3><p>  执行下列命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span> -
<span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-eth0
<span class="token comment"># 按 i 键进入编辑模式，输入如下内容（IP 自定）：</span>
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>none
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.100.86
<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span>
<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.100.1
<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.100.1
<span class="token comment"># 按 Esc，输入 :wq 保存并退出</span>
<span class="token comment"># 输入如下命令以使设置的静态 IP 生效：</span>
nmcli c reload
nmcli d c eth0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="下面开始安装-EPEL8"><a href="#下面开始安装-EPEL8" class="headerlink" title="下面开始安装 EPEL8"></a>下面开始安装 <code>EPEL8</code></h3><h4 id="安装-EPEL8-配置包"><a href="#安装-EPEL8-配置包" class="headerlink" title="安装 EPEL8 配置包"></a>安装 <code>EPEL8</code> 配置包</h4><p>  从 <code>Fedora Koji</code> <a href="https://buildsys.fedoraproject.org/koji/buildinfo?buildID=2070443">https://buildsys.fedoraproject.org/koji/buildinfo?buildID=2070443</a> 上找到 epel-release 的最新版 (当前为 epel-release-8-18.el8<br>) 下载地址。执行如下命令。</p>
<img data-src="/post/fbedfa68/aos001.webp" class="" title="epel">
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> <span class="token parameter variable">--force</span> <span class="token parameter variable">--nodeps</span> https://kojipkgs.fedoraproject.org/packages/epel-release/8/17.el8/noarch/epel-release-8-17.el8.noarch.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看epel源是否生效"><a href="#查看epel源是否生效" class="headerlink" title="查看epel源是否生效"></a>查看<code>epel源</code>是否生效</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf repolist all     <span class="token comment">#列出所有的存储库</span>
Repository epel is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configuration
仓库 <span class="token function">id</span>                        仓库名称                                   状态
AppStream           AnolisOS-8 - AppStream   启用
BaseOS              AnolisOS-8 - BaseOS      启用
DDE                 AnolisOS-8 - DDE         禁用
Plus                AnolisOS-8 - Plus        禁用
PowerTools          AnolisOS-8 - PowerTools  启用
epel                epel                     禁用
epel-debuginfo      Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - x86_64 - Debug          禁用
epel-source         Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - x86_64 - Source         禁用
epel-testing        Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - Testing - x86_64        禁用
epel-testing-debuginfo  Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - Testing - x86_64 - Debug    禁用
epel-testing-source     Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">8</span> - Testing - x86_64 - Source   禁用
nginx-mainline           nginx mainline repo                                                禁用
nginx-stable             nginx stable repo                                                  启用
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  启用epel源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dnf config-manager --set-enable epel   <span class="token comment">#启用epel源</span>
dnf repolist epel      <span class="token comment">#查看epel源的状态</span>
Repository epel is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configuration
仓库 <span class="token function">id</span>                            仓库名称                          状态
epel                               epel                            启用
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  清理缓存，并重新拉取元数据缓存</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dnf clean all  </span>
Repository epel is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configuration
<span class="token number">45</span> 文件已删除
<span class="token punctuation">[</span>root@anolis ~<span class="token punctuation">]</span><span class="token comment"># dnf makecache</span>
Repository epel is listed <span class="token function">more</span> than once <span class="token keyword">in</span> the configuration
AnolisOS-8 - AppStream                          <span class="token number">622</span> kB/s <span class="token operator">|</span> <span class="token number">9.3</span> MB     00:15    
AnolisOS-8 - BaseOS                             <span class="token number">8.3</span> MB/s <span class="token operator">|</span> <span class="token number">6.6</span> MB     00:00    
epel                                            <span class="token number">198</span> kB/s <span class="token operator">|</span>  <span class="token number">13</span> MB     01:06    
AnolisOS-8 - PowerTools                         <span class="token number">6.5</span> MB/s <span class="token operator">|</span> <span class="token number">2.1</span> MB     00:00    
nginx stable repo                               <span class="token number">43</span> kB/s <span class="token operator">|</span>  <span class="token number">43</span> kB     00:00    
元数据缓存已建立。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>  参考：<a href="https://blog.csdn.net/allway2/article/details/122011774">如何在 CentOS 8 或 Stream 上安裝 EPEL 8 存储库</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>AnolisOS</category>
      </categories>
      <tags>
        <tag>EPEL源</tag>
      </tags>
  </entry>
  <entry>
    <title>实现ssh登录，显示图形化</title>
    <url>/post/8c6a122c.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><div class="note success no-icon"><p>  平时ssh登录到Linux服务器都是在命令行下进行操作的，简单高效。但是有些时候，需要配置一些Linux系统下的图形化软件的参数，ssh登录到Linux服务器后，就需要显示图形化界面了。</p>
</div>

<span id="more"></span>

<p>  这里给出Linux，Windows和MacOS三种系统登录上Linux系统后，显示图形化界面的方法。</p>
<h4 id="window登录后图形界面"><a href="#window登录后图形界面" class="headerlink" title="window登录后图形界面"></a>window登录后图形界面</h4><div class="note warning no-icon"><p>Windows平台SSH登录Linux并使用图形化界面：<br><a href="http://www.cnblogs.com/zhwl/archive/2013/03/04/2942606.html">http://www.cnblogs.com/zhwl/archive/2013/03/04/2942606.html</a><br><a href="http://www.cnblogs.com/yasmi/articles/4835070.html">http://www.cnblogs.com/yasmi/articles/4835070.html</a></p>
</div>
<div class="note primary no-icon"><p>【关键步骤】：其核心就是</p>
<ol>
<li>CentOS主机上<code>允许SSH的X</code></li>
<li>indows本地安装开源的X Server软件 <code>Xming</code></li>
<li>使用ssh登录工具Putty或者Pietty<code>修改配置</code>，登录即可</li>
</ol>
</div>

<h4 id="Linux登录后图形界面"><a href="#Linux登录后图形界面" class="headerlink" title="Linux登录后图形界面"></a>Linux登录后图形界面</h4><div class="note warning no-icon"><p>linux系统登录到另一个Linux系统后，显示图形界面：<a href="http://blog.csdn.net/zhoubo200/article/details/5773000">http://blog.csdn.net/zhoubo200/article/details/5773000</a></p>
</div>
<div class="note primary no-icon"><p>【关键步骤】：Linux版本的就简单一些,A端登陆到B端</p>
<ol>
<li>A端就是运行图形界面，及ssh配置修改，重启</li>
<li>B端主要是DISPLAY和ssh的配置修改，重启等</li>
</ol>
</div>

<h4 id="mac登录后图形界面"><a href="#mac登录后图形界面" class="headerlink" title="mac登录后图形界面"></a>mac登录后图形界面</h4><div class="note warning no-icon"><p>mac平台SSH登录Linux并使用图形化界面：可以参考<a href="http://blog.csdn.net/dobell/article/details/55047811">http://blog.csdn.net/dobell/article/details/55047811</a></p>
</div>
<div class="note primary no-icon"><p>【关键步骤】：其核心就是</p>
<ol>
<li>CentOS主机上允许SSH的X</li>
<li>mac本地安装开源的X Server软件 <code>XQuartz</code></li>
<li>XQuartz中选择终端登录即可</li>
</ol>
</div>


<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Mac版实现ssh登录，显示图形化"><a href="#Mac版实现ssh登录，显示图形化" class="headerlink" title="Mac版实现ssh登录，显示图形化"></a>Mac版实现ssh登录，显示图形化</h4><ol>
<li><code>Linux</code>端–设置<code>X11</code>转发<br><code>a)</code>首先需要在linux 服务器端打开 X11转发:<br>编辑 <code>/etc/ssh/sshd_config</code> 配置文件，配置转发参数为<code>yes</code> <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">X11Forwarding</span> <span class="token value attr-value">yes  </span>
<span class="token key attr-name">X11DisplayOffset</span> <span class="token value attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<code>b)</code>重启<code>ssh</code>服务<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> sshd restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>编辑<code>Mac</code>端下文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /private/etc/ssh/ssh_config
设置为
ForwardX11 <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>Mac</code>端安装<code>XQuartz </code><div class="note warning no-icon"><p>网址：<a href="https://www.xquartz.org/">https://www.xquartz.org/</a><br>下载：<a href="https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.2/XQuartz-2.8.2.dmg">https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.2/XQuartz-2.8.2.dmg</a></p>
</div></li>
<li><code>Mac</code>端<code>测试</code><br><code>a)</code>打开 <code>XQuartz</code>，然后，打开 <code>mac terminal</code><img data-src="/post/8c6a122c/sshLoginG001.jpg" class="" title="XQuartz">
<code>b)</code>ssh -X   {用户名}@{远程端ip}； （注意<code>大写</code>的<code>X</code>）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-X</span> root@192.168.3.201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<code>c)</code>登录成功，输入 <code>gvim</code>看下，是否能调出远程界面</li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<p><a href="https://www.likecs.com/show-543535.html">https://www.likecs.com/show-543535.html</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>一些linux命令</title>
    <url>/post/90c0e048.html</url>
    <content><![CDATA[<h3 id="查询程序占用内存情况"><a href="#查询程序占用内存情况" class="headerlink" title="查询程序占用内存情况"></a>查询程序占用内存情况</h3><span id="more"></span>

<p>  以下是查询 postgres 的程序，查询其他应用修改对应名称即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> postgres<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $6}'</span><span class="token variable">`</span></span>
<span class="token keyword">do</span>
<span class="token variable"><span class="token punctuation">((</span>sum<span class="token operator">=</span>sum<span class="token operator">+</span>${i}<span class="token punctuation">))</span></span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"scale=2;<span class="token variable">${sum}</span>/1024"</span><span class="token operator">|</span><span class="token function">bc</span><span class="token variable">)</span></span>MB

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查询内存占用前20的进程"><a href="#查询内存占用前20的进程" class="headerlink" title="查询内存占用前20的进程"></a>查询内存占用前20的进程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{printf $6" "}{for(i=11;i&lt;=NF;i++){printf("%s ",$i)}}{print ""}'</span> <span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-nr</span> -k1<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{printf $1/1024 "Mb  "}{for(i=2;i&lt;=NF;i++){printf("%s ",$i)}{print "-------"}}'</span><span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查询服务器核心数"><a href="#查询服务器核心数" class="headerlink" title="查询服务器核心数"></a>查询服务器核心数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /proc/cpuinfo<span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"processor"</span><span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="postgresql-新建用户并赋予权限"><a href="#postgresql-新建用户并赋予权限" class="headerlink" title="postgresql 新建用户并赋予权限"></a>postgresql 新建用户并赋予权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新账户</span>
CREATE <span class="token environment constant">USER</span> user_name_data WITH PASSWORD <span class="token string">'N7&amp;37Pg#pn'</span><span class="token punctuation">;</span>

<span class="token comment"># 给新用户授权只读模式</span>
alter user user_name_data <span class="token builtin class-name">set</span> <span class="token assign-left variable">default_transaction_read_only</span><span class="token operator">=</span>on<span class="token punctuation">;</span>
<span class="token comment"># 切换到库gra</span>
<span class="token punctuation">\</span>c gra
<span class="token comment"># 赋权select权限</span>
grant <span class="token keyword">select</span> on all tables <span class="token keyword">in</span> schema public to user_name_data<span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分析nginx日志"><a href="#分析nginx日志" class="headerlink" title="分析nginx日志"></a>分析nginx日志</h3><p>  使用 awk 命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">统计ip 并排序
<span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">" "</span> <span class="token string">'NR==1,NR==200{print $4, $1  | "sort -r -k2"}'</span>   access.log

统计IP访问次数
<span class="token function">awk</span> <span class="token string">'{ips[$1]++}END{for (i in ips)print i,ips[i]}'</span> access.log 

统计访问大于100次的IP
<span class="token function">awk</span> <span class="token string">'{ips[$1]++}END{for (i in ips){if(ips[i]&gt;100)print i,ips[i]}}'</span> access.log 

统计访问最多的10个页面
<span class="token function">awk</span> <span class="token string">'{ips[$7]++}END{for (i in ips)print i,ips[i]}'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token parameter variable">-k2</span> <span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>将SSH多次登录失败的IP加入黑名单</title>
    <url>/post/2317c1ec.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  这次记录的是将SSH多次登录失败的IP加入黑名单的过程。</p>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统计暴力破解次数</span>
<span class="token function">awk</span> <span class="token string">'/Failed/{fa[$(NF-3)]++}END{for(pol in fa)print pol,fa[pol]}'</span> /var/log/secure<span class="token operator">|</span><span class="token function">column</span> <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  虽然将ssh的端口更改了，但还是免不了被人发现，并且尝试暴力破解。</p>
<img data-src="/post/2317c1ec/sshDeny001.png" class="" title="IP">
<p>  查看记录才发现一直有被爆破的记录，最离谱的一个IP爆破了2W次……</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出登入失败的用户记录</span>
lastb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  经过查询网上网友们的解决方案，发现可以使用定时任务来检查登录失败主机列表，并将达到登录失败次数的主机IP地址加入到黑名单。</p>
<p>  感觉很不错，为了服务器的安全，我决定在服务器也弄一个，降低 sshd 服务的压力。</p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>  脚本如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span>

<span class="token comment"># 通过lastb获取登录失败的IP及登录失败的次数</span>
lastb <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $3}'</span> <span class="token operator">|</span> <span class="token function">grep</span> ^<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1"\t"$2}'</span> <span class="token operator">&gt;</span> /tmp/host_list
<span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/host_list<span class="token variable">`</span></span>
<span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">wc</span> <span class="token parameter variable">-l</span> /tmp/host_list <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">`</span></span>
<span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token comment"># 如果/tmp/host_list中有数据，循环至少需要执行一次</span>
<span class="token keyword">while</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token parameter variable">-ge</span> <span class="token string">"<span class="token variable">$count</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token assign-left variable">ip_add</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $list <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{FS="\t"} {print $2}'</span><span class="token variable">`</span></span>
        <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $list <span class="token operator">|</span> <span class="token function">awk</span>  <span class="token string">'{FS="\t"} {print $1}'</span><span class="token variable">`</span></span>
        <span class="token comment">#   登录失败达到5次就将该IP写入文件</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$num</span>"</span> <span class="token parameter variable">-ge</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token function">grep</span> <span class="token string">"<span class="token variable">$ip_add</span>"</span> /etc/hosts.deny <span class="token operator">&amp;&gt;</span> /dev/null
                <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                        <span class="token comment"># --------&gt; 此处添加当前系统时间，请根据实际情况定义日期格式</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">"# <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F<span class="token string">' '</span>%H:%M:%S<span class="token variable">)</span></span>"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts.deny
                        <span class="token builtin class-name">echo</span> <span class="token string">"sshd:<span class="token variable">$ip_add</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts.deny
                <span class="token keyword">fi</span>
        <span class="token keyword">fi</span>
        <span class="token builtin class-name">let</span> <span class="token assign-left variable">count</span><span class="token operator">+=</span><span class="token number">1</span>
        <span class="token comment">#   删除已经写入文件的IP</span>
        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'1d'</span> /tmp/host_list
        <span class="token comment">#   修改$list变量</span>
        <span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /tmp/host_list<span class="token variable">`</span></span>
<span class="token keyword">done</span>

<span class="token comment"># 清空临时文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">&gt;</span> /tmp/host_list
<span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  弄好脚本将其加到 <code>crontab</code> 定时任务执行就完成了~</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<a href="/post/a8e858c0.html" title="Fail2ban，解决网站被扫描、CC攻击、ssh暴力破解、防爬虫等问题">Fail2ban，解决网站被扫描、CC攻击、ssh暴力破解、防爬虫等问题</a></blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用API</title>
    <url>/post/3ab80769.html</url>
    <content><![CDATA[<p>   日常<code>数组 (array)</code>,<code>对象</code>的使用。</p>
<span id="more"></span>

<h3 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 (array)"></a>数组 (array)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment">// map：遍历数组，返回回调返回值组成的新数组，不改变原数组，不会对空数组进行检测</span>
Arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>index<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

<span class="token comment">// forEach：无法break，可以用try/catch中throw new Error来停止，不改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>index<span class="token punctuation">)</span> <span class="token keyword">undefined</span>

<span class="token comment">//filter：过滤，返回过滤后的数组，不改变原数组，不会对空数组进行检测</span>
Arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment">//some：有一项返回true，则整体为true，不改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token boolean">true</span>

<span class="token comment">//every ：需要全部符合条件才返回true，有一项返回false，则整体为false，不改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">//join：返回通过指定连接符str把数组连接成字符串，不改变原数组</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token string">'10,4,2,7,3,6'</span>

<span class="token comment">//push / pop ：数组末尾推入push和弹出pop，返回改变后数组的长度/弹出项，改变原数组</span>

Arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  Arr：<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>
Arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Arr：<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment">//unshift / shift：数组头部推入unshift和弹出shift，返回改变后数组的长度/弹出项，改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  Arr：<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
Arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       Arr：<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment">//sort(fn) / reverse：按规则排序与反转，改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>  Arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
Arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           Arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">//splice：返回删除元素组成的数组，从start处开始删除number个值后插入valueN参数列表到数组中，改变原数组</span>
Arr<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    Arr：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
Arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小红'</span><span class="token punctuation">)</span> Arr：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">//concat：连接n（n &gt;= 2）个数组，返回数组连接后的数组副本，浅拷贝，不改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Arr<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'哈哈'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'哈哈'</span><span class="token punctuation">]</span>

<span class="token comment">//slice：返回截断后的新数组，不改变原数组</span>
Arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">]</span>

<span class="token comment">//indexOf(value,index) 返回数组中某个指定的元素位置。index查找开始索引位置 返回value对应的下标</span>
Arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token number">1</span>  
 
<span class="token comment">//astIndexOf(value,index) 返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。index查找开始索引位置</span>
Arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">2</span>

<span class="token comment">//ES6</span>
<span class="token comment">//Array.isArray(value) 判断是否是数组 是返回true否则返回false</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>Arr<span class="token punctuation">)</span> <span class="token boolean">true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token boolean">false</span>

<span class="token comment">//find *：返回符合条件的第一个数组元素item</span>
Arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token operator">=&gt;</span>f<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token number">7</span>

<span class="token comment">//findIndex *：返回符合条件的第一个数组元素的索引</span>
Arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token operator">=&gt;</span>f<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment">//Array.includes(val, index)：用于从fromIndex判断数组中是否包含val，可替代ES5中的 indexOf</span>
Arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">)</span> <span class="token boolean">true</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//const obj = {age:12,name:'小红',phone:132456798}</span>

<span class="token comment">// Object.keys() 遍历可枚举的属性，只包含对象本身可枚举属性，不包含原型链可枚举属性</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Arr<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">]</span>

<span class="token comment">// Object.values() 遍历可枚举的属性值，只包含对象本身可枚举属性值，不包含原型链可枚举属性值</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>Arr<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token number">132456798</span><span class="token punctuation">]</span>

<span class="token comment">//assign Object.assign( target, source, source1 )  方法用于对象的合并，方法实行的是浅拷贝，而不是深拷贝。</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span>   obj：<span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token number">132456798</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>

<span class="token comment">// Object.entries()  分割对象</span>

Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token punctuation">[</span>
  <span class="token punctuation">[</span>
        <span class="token string">"age"</span><span class="token punctuation">,</span>
        <span class="token number">12</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">"name"</span><span class="token punctuation">,</span>
        <span class="token string">"小红"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">"phone"</span><span class="token punctuation">,</span>
        <span class="token number">132456798</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">"b"</span><span class="token punctuation">,</span>
        <span class="token number">2</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">"c"</span><span class="token punctuation">,</span>
        <span class="token number">3</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
 
<span class="token comment">// 字符串 string </span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
        <span class="token string">"0"</span><span class="token punctuation">,</span>
        <span class="token string">"小"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token string">"红"</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span>

<span class="token comment">// Object.is() 它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致</span>

Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> <span class="token string">'obj'</span><span class="token punctuation">)</span>      <span class="token boolean">true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token boolean">false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span>         <span class="token comment">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Api</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 常用工具</title>
    <url>/post/942c8adb.html</url>
    <content><![CDATA[<p>   日常经常使用的<code>JS校验</code>集合。</p>
<span id="more"></span>

<h5 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isEmail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码"></a>手机号码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isMobile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[0-9]{10}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a>电话号码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([0-9]{3,4}-)?[0-9]{7,8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否url地址"><a href="#是否url地址" class="headerlink" title="是否url地址"></a>是否url地址</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isURL</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^http[s]?:\/\/.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否字符串"><a href="#是否字符串" class="headerlink" title="是否字符串"></a>是否字符串</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'String'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否数字"><a href="#是否数字" class="headerlink" title="是否数字"></a>是否数字</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Number'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否boolean"><a href="#是否boolean" class="headerlink" title="是否boolean"></a>是否boolean</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isBoolean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Boolean'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否函数"><a href="#是否函数" class="headerlink" title="是否函数"></a>是否函数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Function'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否为null"><a href="#是否为null" class="headerlink" title="是否为null"></a>是否为null</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isNull</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Null'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否undefined"><a href="#是否undefined" class="headerlink" title="是否undefined"></a>是否undefined</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isUndefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Undefined'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否对象"><a href="#是否对象" class="headerlink" title="是否对象"></a>是否对象</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isObj</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Object'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否数组"><a href="#是否数组" class="headerlink" title="是否数组"></a>是否数组</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Array'</span>
<span class="token punctuation">}</span>   
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否时间"><a href="#是否时间" class="headerlink" title="是否时间"></a>是否时间</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Date'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否正则"><a href="#是否正则" class="headerlink" title="是否正则"></a>是否正则</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isRegExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'RegExp'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否错误对象"><a href="#是否错误对象" class="headerlink" title="是否错误对象"></a>是否错误对象</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Error'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否Symbol函数"><a href="#是否Symbol函数" class="headerlink" title="是否Symbol函数"></a>是否Symbol函数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isSymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Symbol'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否Promise对象"><a href="#是否Promise对象" class="headerlink" title="是否Promise对象"></a>是否Promise对象</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Promise'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否Set对象"><a href="#是否Set对象" class="headerlink" title="是否Set对象"></a>是否Set对象</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isSet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Set'</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="是否是微信浏览器"><a href="#是否是微信浏览器" class="headerlink" title="是否是微信浏览器"></a>是否是微信浏览器</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isWeiXin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">microMessenger</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'micromessenger'</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否是移动端"><a href="#是否是移动端" class="headerlink" title="是否是移动端"></a>是否是移动端</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isDeviceMobile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">android|webos|iphone|ipod|balckberry</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否是QQ浏览器"><a href="#是否是QQ浏览器" class="headerlink" title="是否是QQ浏览器"></a>是否是QQ浏览器</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isQQBrowser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">mqqbrowser|qzone|qqbrowser|qbwebviewtype</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="是否是爬虫"><a href="#是否是爬虫" class="headerlink" title="是否是爬虫"></a>是否是爬虫</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isSpider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">/</span>adsbot<span class="token operator">|</span>googlebot<span class="token operator">|</span>bingbot<span class="token operator">|</span>msnbot<span class="token operator">|</span>yandexbot<span class="token operator">|</span>baidubot<span class="token operator">|</span>robot<span class="token operator">|</span>careerbot
    <span class="token operator">|</span>seznambot<span class="token operator">|</span>bot<span class="token operator">|</span>baiduspider<span class="token operator">|</span>jikespider<span class="token operator">|</span>symantecspider<span class="token operator">|</span>scannerlwebcrawler<span class="token operator">|</span>crawler<span class="token operator">|</span>
    360spider<span class="token operator">|</span>sosospider<span class="token operator">|</span>sogou web sprider<span class="token operator">|</span>sogou orion spider<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="是否ios"><a href="#是否ios" class="headerlink" title="是否ios"></a>是否ios</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isIos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Linux'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//安卓手机</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//苹果手机</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//iPad</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Windows Phone'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//winphone手机</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="是否为PC端"><a href="#是否为PC端" class="headerlink" title="是否为PC端"></a>是否为PC端</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isPC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> userAgentInfo <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
    <span class="token keyword">var</span> Agents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Android"</span><span class="token punctuation">,</span> <span class="token string">"iPhone"</span><span class="token punctuation">,</span>
        <span class="token string">"SymbianOS"</span><span class="token punctuation">,</span> <span class="token string">"Windows Phone"</span><span class="token punctuation">,</span>
        <span class="token string">"iPad"</span><span class="token punctuation">,</span> <span class="token string">"iPod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> Agents<span class="token punctuation">.</span>length<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgentInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Agents<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="去除html标签"><a href="#去除html标签" class="headerlink" title="去除html标签"></a>去除html标签</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeHtmltag</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&gt;]+&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getQueryString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> search <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="动态引入js"><a href="#动态引入js" class="headerlink" title="动态引入js"></a>动态引入js</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">injectScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="根据url地址下载"><a href="#根据url地址下载" class="headerlink" title="根据url地址下载"></a>根据url地址下载</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">download</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> isChrome <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'chrome'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> isSafari <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'safari'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isChrome <span class="token operator">||</span> isSafari<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        link<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>link<span class="token punctuation">.</span>download <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> fileName <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            link<span class="token punctuation">.</span>download <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>createEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'MouseEvents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            link<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        url <span class="token operator">+=</span> <span class="token string">'?download'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">'_self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="el是否包含某个class"><a href="#el是否包含某个class" class="headerlink" title="el是否包含某个class"></a>el是否包含某个class</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">hasClass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> className</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|\\s)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'(\\s|$)'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>className<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="el添加某个class"><a href="#el添加某个class" class="headerlink" title="el添加某个class"></a>el添加某个class</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addClass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> className</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> newClass <span class="token operator">=</span> el<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
    newClass<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
    el<span class="token punctuation">.</span>className <span class="token operator">=</span> newClass<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="el去除某个class"><a href="#el去除某个class" class="headerlink" title="el去除某个class"></a>el去除某个class</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeClass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> className</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|\\s)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'(\\s|$)'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span>
    el<span class="token punctuation">.</span>className <span class="token operator">=</span> el<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="获取滚动的坐标"><a href="#获取滚动的坐标" class="headerlink" title="获取滚动的坐标"></a>获取滚动的坐标</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getScrollPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el <span class="token operator">=</span> window</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">:</span> el<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">:</span> el<span class="token punctuation">.</span>scrollTop
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">-</span> c <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="el是否在视口范围内"><a href="#el是否在视口范围内" class="headerlink" title="el是否在视口范围内"></a>el是否在视口范围内</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">elementIsVisibleInViewport</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> partiallyVisible <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> top<span class="token punctuation">,</span> left<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> right <span class="token punctuation">}</span> <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> innerHeight<span class="token punctuation">,</span> innerWidth <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
    <span class="token keyword">return</span> partiallyVisible
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> innerHeight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>bottom <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;</span> innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> innerWidth<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> innerWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> top <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> innerHeight <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> innerWidth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="洗牌算法随机"><a href="#洗牌算法随机" class="headerlink" title="洗牌算法随机"></a>洗牌算法随机</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        random<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">)</span>
        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="劫持粘贴板"><a href="#劫持粘贴板" class="headerlink" title="劫持粘贴板"></a>劫持粘贴板</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">copyTextToClipboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> textArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    textArea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'transparent'</span><span class="token punctuation">;</span>
    textArea<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
    textArea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> successful <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Oops, unable to copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="判断类型集合"><a href="#判断类型集合" class="headerlink" title="判断类型集合"></a>判断类型集合</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">'phone'</span><span class="token operator">:</span>   <span class="token comment">//手机号码</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3|4|5|6|7|8|9][0-9]{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'tel'</span><span class="token operator">:</span>     <span class="token comment">//座机</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0\d{2,3}-\d{7,8})(-\d{1,4})?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'card'</span><span class="token operator">:</span>    <span class="token comment">//身份证</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'pwd'</span><span class="token operator">:</span>     <span class="token comment">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]\w{5,17}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token string">'postal'</span><span class="token operator">:</span>  <span class="token comment">//邮政编码</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[1-9]\d{5}(?!\d)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'QQ'</span><span class="token operator">:</span>      <span class="token comment">//QQ号</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]{4,9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'email'</span><span class="token operator">:</span>   <span class="token comment">//邮箱</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'money'</span><span class="token operator">:</span>   <span class="token comment">//金额(小数点2位)</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d*(?:\.\d{0,2})?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'URL'</span><span class="token operator">:</span>     <span class="token comment">//网址</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token string">'IP'</span><span class="token operator">:</span>      <span class="token comment">//IP</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'date'</span><span class="token operator">:</span>    <span class="token comment">//日期时间</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d{4})\-(\d{2})\-(\d{2}) (\d{2})(?:\:\d{2}|:(\d{2}):(\d{2}))$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d{4})\-(\d{2})\-(\d{2})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token string">'number'</span><span class="token operator">:</span>  <span class="token comment">//数字</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'english'</span><span class="token operator">:</span> <span class="token comment">//英文</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'chinese'</span><span class="token operator">:</span> <span class="token comment">//中文</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\u4E00-\\u9FA5]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'lower'</span><span class="token operator">:</span>   <span class="token comment">//小写</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'upper'</span><span class="token operator">:</span>   <span class="token comment">//大写</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'HTML'</span><span class="token operator">:</span>    <span class="token comment">//HTML标记</span>
            <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;("[^"]*"|'[^']*'|[^'"&gt;])*&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="严格的身份证校验"><a href="#严格的身份证校验" class="headerlink" title="严格的身份证校验"></a>严格的身份证校验</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isCardID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\d{15}$)|(^\d{17}(\d|X|x)$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你输入的身份证长度或格式错误'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//身份证城市</span>
    <span class="token keyword">var</span> aCity <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">:</span> <span class="token string">"天津"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token operator">:</span> <span class="token string">"河北"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token operator">:</span> <span class="token string">"山西"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token operator">:</span> <span class="token string">"内蒙古"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token operator">:</span> <span class="token string">"辽宁"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token string">"吉林"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token operator">:</span> <span class="token string">"黑龙江"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token operator">:</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">:</span> <span class="token string">"江苏"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token string">"浙江"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token operator">:</span> <span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token operator">:</span> <span class="token string">"福建"</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token operator">:</span> <span class="token string">"江西"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token operator">:</span> <span class="token string">"山东"</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token operator">:</span> <span class="token string">"河南"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token operator">:</span> <span class="token string">"湖北"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token operator">:</span> <span class="token string">"湖南"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token operator">:</span> <span class="token string">"广东"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token operator">:</span> <span class="token string">"广西"</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token operator">:</span> <span class="token string">"海南"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">:</span> <span class="token string">"重庆"</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token operator">:</span> <span class="token string">"四川"</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token operator">:</span> <span class="token string">"贵州"</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token operator">:</span> <span class="token string">"云南"</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token operator">:</span> <span class="token string">"西藏"</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token operator">:</span> <span class="token string">"陕西"</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token operator">:</span> <span class="token string">"甘肃"</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token operator">:</span> <span class="token string">"青海"</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">:</span> <span class="token string">"宁夏"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token operator">:</span> <span class="token string">"新疆"</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token operator">:</span> <span class="token string">"台湾"</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token operator">:</span> <span class="token string">"香港"</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token operator">:</span> <span class="token string">"澳门"</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token operator">:</span> <span class="token string">"国外"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>aCity<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的身份证地区非法'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 出生日期验证</span>
    <span class="token keyword">var</span> sBirthday <span class="token operator">=</span> <span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>sId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>sBirthday<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sBirthday <span class="token operator">!=</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'身份证上的出生日期非法'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 身份证号码校验</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        codes <span class="token operator">=</span> <span class="token string">"10X98765432"</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sId<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> sId<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> last <span class="token operator">=</span> codes<span class="token punctuation">[</span>sum <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//计算出来的最后一位身份证号码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sId<span class="token punctuation">[</span>sId<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你输入的身份证号非法'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="随机数范围"><a href="#随机数范围" class="headerlink" title="随机数范围"></a>随机数范围</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="将阿拉伯数字翻译成中文的大写数字"><a href="#将阿拉伯数字翻译成中文的大写数字" class="headerlink" title="将阿拉伯数字翻译成中文的大写数字"></a>将阿拉伯数字翻译成中文的大写数字</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">numberToChinese</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token constant">AA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"零"</span><span class="token punctuation">,</span> <span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">,</span> <span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token string">"五"</span><span class="token punctuation">,</span> <span class="token string">"六"</span><span class="token punctuation">,</span> <span class="token string">"七"</span><span class="token punctuation">,</span> <span class="token string">"八"</span><span class="token punctuation">,</span> <span class="token string">"九"</span><span class="token punctuation">,</span> <span class="token string">"十"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token constant">BB</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"十"</span><span class="token punctuation">,</span> <span class="token string">"百"</span><span class="token punctuation">,</span> <span class="token string">"仟"</span><span class="token punctuation">,</span> <span class="token string">"萬"</span><span class="token punctuation">,</span> <span class="token string">"億"</span><span class="token punctuation">,</span> <span class="token string">"点"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^0*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        re <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                re <span class="token operator">=</span> <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"0{4}//d{"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}$"</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    re <span class="token operator">=</span> <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
                re <span class="token operator">=</span> <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>
                <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            re <span class="token operator">=</span> <span class="token constant">AA</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            re <span class="token operator">=</span> <span class="token constant">AA</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token constant">BB</span><span class="token punctuation">[</span>k <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> re<span class="token punctuation">;</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 加上小数部分(如果有小数部分)</span>
    <span class="token punctuation">{</span>
        re <span class="token operator">+=</span> <span class="token constant">BB</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            re <span class="token operator">+=</span> <span class="token constant">AA</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">==</span> <span class="token string">'一十'</span><span class="token punctuation">)</span>
        re <span class="token operator">=</span> <span class="token string">"十"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^一</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> re<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
        re <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> re<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="将数字转换为大写金额"><a href="#将数字转换为大写金额" class="headerlink" title="将数字转换为大写金额"></a>将数字转换为大写金额</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">changeToChinese</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//判断如果传递进来的不是字符的话转换为字符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Num <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//替换tomoney()中的“,”</span>
    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> </span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//替换tomoney()中的空格</span>
    Num <span class="token operator">=</span> Num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">￥</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//替换掉可能出现的￥字符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//验证输入的字符是否为数字</span>
        <span class="token comment">//alert("请检查小写金额是否正确");</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//字符处理完毕后开始转换，采用前后两部分分别转换</span>
    <span class="token keyword">var</span> part <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>Num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> newchar <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment">//小数点前进行转化</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token comment">//若数量超过拾亿单位，提示</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> tmpnewchar <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token keyword">var</span> perchar <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>perchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">"0"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"零"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"壹"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"贰"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"叁"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"肆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"伍"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"6"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"陆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"7"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"柒"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"8"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"捌"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"9"</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> <span class="token string">"玖"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"佰"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"仟"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"万"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"佰"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>perchar <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"仟"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"亿"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
                tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"拾"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> newchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> newchar<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//小数点之后进行转化</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// alert("小数点之后只能保留两位,系统将自动截断");</span>
            part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmpnewchar <span class="token operator">=</span> <span class="token string">""</span>
            perchar <span class="token operator">=</span> part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>perchar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">"0"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"零"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"壹"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"贰"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"叁"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"肆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"5"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"伍"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"6"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"陆"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"7"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"柒"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"8"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"捌"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"9"</span><span class="token operator">:</span>
                    tmpnewchar <span class="token operator">=</span> <span class="token string">"玖"</span> <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"角"</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tmpnewchar <span class="token operator">=</span> tmpnewchar <span class="token operator">+</span> <span class="token string">"分"</span><span class="token punctuation">;</span>
            newchar <span class="token operator">=</span> newchar <span class="token operator">+</span> tmpnewchar<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//替换所有无用汉字</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>newchar<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"零零"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零零"</span><span class="token punctuation">,</span> <span class="token string">"零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零亿"</span><span class="token punctuation">,</span> <span class="token string">"亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"亿万"</span><span class="token punctuation">,</span> <span class="token string">"亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零万"</span><span class="token punctuation">,</span> <span class="token string">"万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零元"</span><span class="token punctuation">,</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零角"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newchar <span class="token operator">=</span> newchar<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"零分"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newchar<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>newchar<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"元"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newchar <span class="token operator">=</span> newchar <span class="token operator">+</span> <span class="token string">"整"</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newchar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="判断一个元素是否在数组中"><a href="#判断一个元素是否在数组中" class="headerlink" title="判断一个元素是否在数组中"></a>判断一个元素是否在数组中</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">contains</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="数组排序，-1：从小到大-2：从大到小-3：随机"><a href="#数组排序，-1：从小到大-2：从大到小-3：随机" class="headerlink" title="数组排序， 1：从小到大 2：从大到小 3：随机"></a>数组排序， 1：从小到大 2：从大到小 3：随机</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">unique</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'from'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                n<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="求两个集合的并集"><a href="#求两个集合的并集" class="headerlink" title="求两个集合的并集"></a>求两个集合的并集</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">union</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newArr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="求两个集合的交集"><a href="#求两个集合的交集" class="headerlink" title="求两个集合的交集"></a>求两个集合的交集</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">intersect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token operator">?</span> o <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="删除其中一个元素"><a href="#删除其中一个元素" class="headerlink" title="删除其中一个元素"></a>删除其中一个元素</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> ele</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="将类数组转换为数组"><a href="#将类数组转换为数组" class="headerlink" title="将类数组转换为数组"></a>将类数组转换为数组</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">formArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr <span class="token operator">=</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">max</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">min</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pre <span class="token operator">+</span> cur
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格"><a href="#去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格" class="headerlink" title="去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格"></a>去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token number">1</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\s*)|(\s*$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\s*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\s*$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写"><a href="#字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写" class="headerlink" title="字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写"></a>字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">changeCase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token number">4</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b\w+\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b\w+\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="检测密码强度"><a href="#检测密码强度" class="headerlink" title="检测密码强度"></a>检测密码强度</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkPwd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> Lv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Lv
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Lv<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Lv<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Lv<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\.|-|_]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Lv<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Lv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数节流器"><a href="#函数节流器" class="headerlink" title="函数节流器"></a>函数节流器</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">debouncer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>debounceTimestamp <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span>debounceTimestamp <span class="token operator">=</span> time<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="在字符串中插入新字符串"><a href="#在字符串中插入新字符串" class="headerlink" title="在字符串中插入新字符串"></a>在字符串中插入新字符串</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insertStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">soure<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newStr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> soure<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> newStr <span class="token operator">+</span> soure<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="判断两个对象是否键值相同"><a href="#判断两个对象是否键值相同" class="headerlink" title="判断两个对象是否键值相同"></a>判断两个对象是否键值相同</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isObjectEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> aProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> bProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>aProps<span class="token punctuation">.</span>length <span class="token operator">!==</span> bProps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aProps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> propName <span class="token operator">=</span> aProps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">!==</span> b<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="16进制颜色转RGBRGBA字符串"><a href="#16进制颜色转RGBRGBA字符串" class="headerlink" title="16进制颜色转RGBRGBA字符串"></a>16进制颜色转RGBRGBA字符串</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">colorToRGB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> opa</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(#?)[a-fA-F0-9]{6}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//16进制颜色值校验规则</span>
    <span class="token keyword">var</span> isOpa <span class="token operator">=</span> <span class="token keyword">typeof</span> opa <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">;</span> <span class="token comment">//判断是否有设置不透明度</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果值不符合规则返回空字符</span>
        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> v <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果有#号先去除#号</span>
    <span class="token keyword">var</span> rgbArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> rgbStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> item <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rgbArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    rgbStr <span class="token operator">=</span> rgbArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rgbStr <span class="token operator">=</span> <span class="token string">'rgb'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isOpa <span class="token operator">?</span> <span class="token string">'a'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> rgbStr <span class="token operator">+</span> <span class="token punctuation">(</span>isOpa <span class="token operator">?</span> <span class="token string">','</span> <span class="token operator">+</span> opa <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rgbStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="追加url参数"><a href="#追加url参数" class="headerlink" title="追加url参数"></a>追加url参数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">appendQuery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> options <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        url <span class="token operator">+=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> options
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        url <span class="token operator">+=</span> <span class="token string">'?'</span> <span class="token operator">+</span> options
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> url<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript console 小技巧</title>
    <url>/post/aa6079f.html</url>
    <content><![CDATA[<p>   <code>Js</code> 的 <code>consolege</code>格式输出。</p>
<span id="more"></span>

<h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"小技巧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c小技巧"</span><span class="token punctuation">,</span><span class="token string">"color:red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c小技巧"</span><span class="token punctuation">,</span><span class="token string">"color:green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c小技巧"</span><span class="token punctuation">,</span><span class="token string">"color:#cf6161"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c小技巧"</span><span class="token punctuation">,</span><span class="token string">"color:red;background:#000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c小技巧"</span><span class="token punctuation">,</span><span class="token string">"color: blue; font-size: 20px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/aa6079f/console001.png" class="" title="console-log">

<h3 id="console-table"><a href="#console-table" class="headerlink" title="console.table"></a>console.table</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"15"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"小白"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
         <span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"小红"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印json 数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/aa6079f/console002.png" class="" title="console-table">

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Console</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx CentOS阿里云邮箱配置</title>
    <url>/post/9d73a089.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  本站由<code>阿里云轻量服务器</code>搭建 不支持<code>25</code>端口 所以使用<code>465</code>发送邮件，如果<code>腾讯云</code>可用<code>25</code>端口</p>
<span id="more"></span>


<h3 id="打开163-QQ邮箱的-IMAP-SMTP服务，并获取授权密码"><a href="#打开163-QQ邮箱的-IMAP-SMTP服务，并获取授权密码" class="headerlink" title="打开163/QQ邮箱的 IMAP/SMTP服务，并获取授权密码"></a>打开163/QQ邮箱的 IMAP/SMTP服务，并获取授权密码</h3><img data-src="/post/9d73a089/mail001.png" class="" title="授权密码">

<h3 id="阿里云服务器键入如下命令，按自己需求配置163-QQ即可！"><a href="#阿里云服务器键入如下命令，按自己需求配置163-QQ即可！" class="headerlink" title="阿里云服务器键入如下命令，按自己需求配置163/QQ即可！"></a>阿里云服务器键入如下命令，按自己需求配置163/QQ即可！</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mailx
   
<span class="token function">vim</span> /etc/mail.rc  在最后面添加下面参数，邮箱账号和援权密码根据自己的填写
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="163邮箱"><a href="#163邮箱" class="headerlink" title="163邮箱"></a>163邮箱</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#163配置参数</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>授权密码的邮箱号

<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtps://smtp.163.com:465
 
<span class="token builtin class-name">set</span> ssl-verify<span class="token operator">=</span>ignore
 
<span class="token builtin class-name">set</span> nss-config-dir<span class="token operator">=</span>/root/.certs
 
<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>授权密码的邮箱号
 
<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>邮箱授权密码
 
<span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login

<span class="token comment">#创建163邮箱证书密匙</span>
<span class="token function">mkdir</span> /root/.certs

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> openssl s_client <span class="token parameter variable">-connect</span> smtp.163.com:465 <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-ne</span> <span class="token string">'/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'</span> <span class="token operator">&gt;</span> ~/.certs/163.crt
 
certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust Global CA"</span> <span class="token parameter variable">-t</span> <span class="token string">"C,,"</span> <span class="token parameter variable">-d</span> ~/.certs <span class="token parameter variable">-i</span> ~/.certs/163.crt
 
certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust SSL CA"</span> <span class="token parameter variable">-t</span> <span class="token string">"C,,"</span> <span class="token parameter variable">-d</span> ~/.certs <span class="token parameter variable">-i</span> ~/.certs/163.crt
 
certutil <span class="token parameter variable">-L</span> <span class="token parameter variable">-d</span> /root/.certs
 
certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust SSL CA - G3"</span> <span class="token parameter variable">-t</span> <span class="token string">"Pu,Pu,Pu"</span> <span class="token parameter variable">-d</span> ~/.certs/ <span class="token parameter variable">-i</span> ~/.certs/163.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#QQ邮箱参数</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>授权密码的邮箱号

<span class="token builtin class-name">set</span> <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtps://smtp.qq.com:465
 
<span class="token builtin class-name">set</span> ssl-verify<span class="token operator">=</span>ignore
 
<span class="token builtin class-name">set</span> nss-config-dir<span class="token operator">=</span>/root/.certs
 
<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>授权密码的邮箱号
 
<span class="token builtin class-name">set</span> smtp-auth-password<span class="token operator">=</span>邮箱授权密码
 
<span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login

<span class="token comment">#创建QQ邮箱证书密匙</span>
<span class="token function">mkdir</span> /root/.certs

<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> openssl s_client <span class="token parameter variable">-connect</span> smtp.qq.com:465 <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-ne</span> <span class="token string">'/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'</span> <span class="token operator">&gt;</span> ~/.certs/qq.crt

certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust SSL CA"</span> <span class="token parameter variable">-t</span> <span class="token string">"C,,"</span> <span class="token parameter variable">-d</span> ~/.certs <span class="token parameter variable">-i</span> ~/.certs/qq.crt

certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust Global CA"</span> <span class="token parameter variable">-t</span> <span class="token string">"C,,"</span> <span class="token parameter variable">-d</span> ~/.certs <span class="token parameter variable">-i</span> ~/.certs/qq.crt

certutil <span class="token parameter variable">-L</span> <span class="token parameter variable">-d</span> ~/.certs

certutil <span class="token parameter variable">-A</span> <span class="token parameter variable">-n</span> <span class="token string">"GeoTrust SSL CA - G3"</span> <span class="token parameter variable">-t</span> <span class="token string">"Pu,Pu,Pu"</span> <span class="token parameter variable">-d</span> ~/.certs/ <span class="token parameter variable">-i</span> ~/.certs/qq.crt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"测试发送邮件"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"Title"</span> 接收信息邮件@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Mail</tag>
      </tags>
  </entry>
  <entry>
    <title>Liunx 定时备份博客数据Git</title>
    <url>/post/f43604d0.html</url>
    <content><![CDATA[<h3 id="下载Git配置用户名和邮箱"><a href="#下载Git配置用户名和邮箱" class="headerlink" title="下载Git配置用户名和邮箱"></a>下载Git配置用户名和邮箱</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">git</span>

<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">'Git用户名'</span>

<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"Git邮箱"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>脚本提交的时候不输密码，所以需要配置ssh key，git仓库提供商的 ssh key配置验证方式不同，需自行查阅文档或者某度</code></p>
<span id="more"></span>

<h3 id="克隆ssh仓库"><a href="#克隆ssh仓库" class="headerlink" title="克隆ssh仓库"></a>克隆ssh仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//克隆目录可自行指定  /usr/xxx
<span class="token function">git</span> clone git@e.coding.net:xhgood/backup.git /usr/data/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="在任意目录新建备份脚本-（backup-sh）"><a href="#在任意目录新建备份脚本-（backup-sh）" class="headerlink" title="在任意目录新建备份脚本 （backup.sh）"></a>在任意目录新建备份脚本 （<code>backup.sh</code>）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span>
<span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d~%H.%M.%S-数据备份"</span><span class="token variable">)</span></span>

<span class="token builtin class-name">cd</span> /usr/data <span class="token operator">||</span> <span class="token builtin class-name">exit</span>

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">"<span class="token variable">${message}</span>"</span>

<span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master

<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${message}</span>"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"数据备份成功"</span> xxxx@qq.com  //发送邮件通知
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>注意邮件通知 需配置邮箱：</code><a href="/post/9d73a089.html" title="Liunx CentOS阿里云邮箱配置">Liunx CentOS阿里云邮箱配置</a></p>
<h3 id="新建脚本、赋予执行、编辑定时任务"><a href="#新建脚本、赋予执行、编辑定时任务" class="headerlink" title="新建脚本、赋予执行、编辑定时任务"></a>新建脚本、赋予执行、编辑定时任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//将脚本内容复制 在/usr/下新建backup.sh （目录可自定）

<span class="token function">chmod</span> +x  /usr/backup.sh // 赋予执行权限

<span class="token function">crontab</span> <span class="token parameter variable">-e</span>  // 编辑定时任务

00 02 * * * /bin/sh /usr/backup.sh // 每天晚上2点定时提交
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>moment、dayjs获取常用时间</title>
    <url>/post/2cdf9a71.html</url>
    <content><![CDATA[<h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p>   <a href="http://momentjs.cn/docs/">moment</a></p>
<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//当前时间</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">//10天前</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"days"</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//1年前时间</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"years"</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//3个月前时间</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"months"</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//一个星期前时间</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"weeks"</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="dayjs"><a href="#dayjs" class="headerlink" title="dayjs"></a>dayjs</h3><p>   <a href="https://dayjs.fenxianglu.cn/category/">dayjs</a></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//当前时间时分秒</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span class="token comment">// 上一个月15号 00:00:00</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span class="token comment">// 当月14号 23:59:59</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH: mm :ss'</span><span class="token punctuation">)</span>

<span class="token comment">// 7个月前的现在</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'month'</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span class="token comment">// 7年前的现在</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span class="token comment">//7天后</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span class="token comment">//7年后</span>
<span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Dayjs</tag>
      </tags>
  </entry>
  <entry>
    <title>git项目过大清理</title>
    <url>/post/4e0f32b7.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  项目中经常有不小心提交的大文件,这个就是清理方法.</p>
<span id="more"></span>

<p>  <code>注意:清理完之后,其他人一定要删掉之前拉取的项目,重新从git上拉项目,不要使用之前的项目了,之前的项目中的.git文件会将已将删除的文件重新加进来,甚至变的更大</code></p>
<h3 id="查看仓库大小"><a href="#查看仓库大小" class="headerlink" title="查看仓库大小"></a>查看仓库大小</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span>  <span class="token comment"># 查看当前仓库大小</span>

<span class="token function">du</span> <span class="token parameter variable">-sh</span>  <span class="token comment"># 查看这个文件夹的总大小</span>

<span class="token function">ls</span> <span class="token parameter variable">-lh</span>  <span class="token comment"># 查看这个文件夹中文件的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解除保护分支"><a href="#解除保护分支" class="headerlink" title="解除保护分支"></a>解除保护分支</h3><p>  默认情况下,git项目是有一个保护分支的</p>
<img data-src="/post/4e0f32b7/git001.png" class="" title="Git">

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li>拉取项目:将项目所有分支拉下来<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone xxx <span class="token comment"># 默认拉取master分支</span>
<span class="token builtin class-name">cd</span> xx <span class="token comment">#进入拉取的文件夹</span>
<span class="token function">git</span> branch <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'\-&gt;'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> remote<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token string">"<span class="token variable">${remote<span class="token operator">#</span>origin<span class="token operator">/</span>}</span>"</span> <span class="token string">"<span class="token variable">$remote</span>"</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
<span class="token function">git</span> fetch <span class="token parameter variable">--all</span>
<span class="token function">git</span> pull <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>查找大文件(若是知道具体的文件,不需要查)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将最大的10个文件查询下来</span>
<span class="token function">git</span> rev-list <span class="token parameter variable">--objects</span> <span class="token parameter variable">--all</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> verify-pack <span class="token parameter variable">-v</span> .git/objects/pack/*.idx <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k</span> <span class="token number">3</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-10</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print$1}'</span><span class="token variable">)</span></span>"</span>
<span class="token comment"># 比如我查询了</span>
486fa66baeb237a456266dccfab8bab14cde98ba pro_web_front_202009101858.gz
d644ed6c55ecc6e058a0a7d0c39c4e49984a37d1 src/assets/img/2.png
f45b37335083ad5c5598e3cf5a75a9fc07b9a803 static/pdf/build/pdf.worker.js.map
21e9d2cd0c73b246d86f603c7ff0e5cd8b8312bc static/pdf/web/operationManual.pdf
7c65cab916684f43d66053e570dbdf453e8ca507 src/assets/img/login.png
f8aebc2a121c89c99190553ac9b3dcc853315182 src/assets/img/login_2.png
13868adfda3704f8a8b10f64da068a11a418ccf2 src/assets/img/login_3.png
<span class="token comment"># 其中需要删的是 pro_web_front_202009101858.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>处理记录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#文件可以是文件夹,也可以是文件 ,</span>
<span class="token comment">#例如:文件夹的话可以是  /dist.js/</span>
<span class="token comment">#例如:文件可以是  static/pdf/build/pdf.worker.js</span>
<span class="token function">git</span> filter-branch <span class="token parameter variable">--force</span> --index-filter <span class="token string">'git rm -rf --cached --ignore-unmatch 文件'</span> --prune-empty --tag-name-filter <span class="token function">cat</span> -- <span class="token parameter variable">--all</span>
<span class="token comment"># 会在项目根目录生成 .git_....文件夹,里面就是改的记录</span>
<span class="token comment"># 一次只能处理一个文件/文件夹</span>

<span class="token comment"># 回收空间</span>
<span class="token function">git</span> for-each-ref <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'delete %(refname)'</span> refs/original <span class="token operator">|</span> <span class="token function">git</span> update-ref <span class="token parameter variable">--stdin</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> .git/refs/original/
<span class="token function">git</span> reflog expire <span class="token parameter variable">--expire</span><span class="token operator">=</span>now <span class="token parameter variable">--all</span>
<span class="token function">git</span> gc <span class="token parameter variable">--prune</span><span class="token operator">=</span>now
<span class="token function">git</span> gc <span class="token parameter variable">--aggressive</span> <span class="token parameter variable">--prune</span><span class="token operator">=</span>now
<span class="token comment"># 此时查看本地,会发现项目明显减小了,若是还有需要的文件,就重复第3步即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>推送到服务器<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--force</span> <span class="token parameter variable">--all</span>
<span class="token function">git</span> remote prune origin
<span class="token comment"># 此时 ,拉取项目就已经是减小后的大小</span>
<span class="token comment"># 但是查看服务器,服务器显示的大小还是原来的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>清理服务器缓存<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入git服务器--&gt;这个操作需要root权限,不然连文件夹都进不去</span>
<span class="token builtin class-name">cd</span> /var/opt/gitlab/git-data/repositories
<span class="token comment">#根据项目,进入对应的git项目文件夹</span>
<span class="token comment"># 进入 项目.git文件,就可以看到和本地的.git目录中一样的目目录了</span>
<span class="token comment">#查询git项目大小</span>
<span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span>   <span class="token comment"># 此时还是旧的大小</span>
<span class="token function">git</span> gc <span class="token parameter variable">--prune</span><span class="token operator">=</span>now  <span class="token comment"># 清理无效文件</span>
<span class="token function">git</span> count-objects <span class="token parameter variable">-vH</span>  <span class="token comment"># 此时就和本地一样,从库减小了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<div class="note info no-icon"><p>貌似gitlab服务器有缓存,此时服务器的仓库中文件大小已经减小了,但是在浏览器上通过页面查看,还是原来的大小</p>
</div>

<p>  <code>再次申明:清理完之后,每个人一定要删掉之前拉取的项目,重新从git上拉项目。不要使用之前的项目了！！！之前的项目中的.git文件会将已将删除的文件重新加进来,甚至变的更大</code></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p><a href="https://blog.csdn.net/qq_36254947/article/details/108641438">使用bfg快速清理git历史大文件</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 项目迁移（从局域网自己安装的git工具迁移到Gitee和Github）</title>
    <url>/post/2e2484ba.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  如果你想从别的 Git 托管服务那里复制一份源代码到新的 Git 托管服务器上的话，可以通过以下步骤来操作。</p>
<span id="more"></span>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li>从原地址<code>克隆</code>一份<code>裸版本库</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/gitfromlocaltogitee
<span class="token function">git</span> clone <span class="token parameter variable">--bare</span> http://10.211.55.81:3000/leeze/xiaosige.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>然后到<code>新的 Git 服务器</code>上创建一个新项目，比如 <code>gitee码云</code>上创建一个私有仓库xiaosige。</li>
<li>以镜像推送的方式上传代码到 GitCafe 服务器上。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/gitfromlocaltogitee/xiaosige.git
<span class="token function">git</span> push <span class="token parameter variable">--mirror</span> https://gitee.com/leeze/xiaosige.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>删除本地代码 <code>xiaosige.git</code></li>
<li>到新服务器 gitee 上找到 Clone 地址，直接 Clone 到本地就可以了。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/leeze/xiaosige.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<br>

<p>  <code> 这种方式可以保留原版本库中的所有内容包括提交的历史记录、注释等等。</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac因为没有安全弹出下次连接不上移动硬盘的坑</title>
    <url>/post/344dc787.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><div class="note success no-icon"><p>  经常遇到因为没有安全弹出下次使用的时候识别不到移动硬盘的情况</p>
</div>

<span id="more"></span>

<h3 id="解决-一"><a href="#解决-一" class="headerlink" title="解决 一"></a>解决 一</h3><ol>
<li>在终端中 输入以下命令 查看到磁盘的<code>Volume Name</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">diskutil list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/344dc787/fdisk001.png" class="" title="fdisk"></li>
<li>紧接着更新 <code>/etc/fstab</code>文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/fstab
 
进入文本编辑界面，按i，进入编辑模式
 
<span class="token assign-left variable">LABEL</span><span class="token operator">=</span>这里是你移动硬盘的Volume Name <span class="token punctuation">(</span>我的是Gary<span class="token punctuation">)</span>  none ntfs rw,auto,nobrowse
 
然后  
<span class="token number">1</span>：ESC  
<span class="token number">2</span>：shift+冒号
<span class="token number">3</span>：wq
搞定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在桌面上可以看见移动硬盘<br>这里有时候需要重启电脑 有时候<code>等一会</code>就ok了</li>
</ol>
<h3 id="解决-二"><a href="#解决-二" class="headerlink" title="解决 二"></a>解决 二</h3><ol>
<li>主要是利用磁盘操作工具 <code>diskutil</code> 和磁盘修复检查工具 <code>fsck_hfs</code>。<br>  查看当前挂载的所有磁盘:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ diskutil list
/dev/disk0 <span class="token punctuation">(</span>internal, physical<span class="token punctuation">)</span>:
   <span class="token comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   <span class="token number">0</span>:      GUID_partition_scheme                        *251.0 GB   disk0
   <span class="token number">1</span>:                        EFI EFI                     <span class="token number">314.6</span> MB   disk0s1
   <span class="token number">2</span>:                 Apple_APFS Container disk1         <span class="token number">250.7</span> GB   disk0s2

/dev/disk1 <span class="token punctuation">(</span>synthesized<span class="token punctuation">)</span>:
   <span class="token comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   <span class="token number">0</span>:      APFS Container Scheme -                      +250.7 GB   disk1
                                 Physical Store disk0s2
   <span class="token number">1</span>:                APFS Volume Macintosh HD - 数据     <span class="token number">190.3</span> GB   disk1s1
   <span class="token number">2</span>:                APFS Volume Preboot                 <span class="token number">867.9</span> MB   disk1s2
   <span class="token number">3</span>:                APFS Volume Recovery                <span class="token number">1.1</span> GB     disk1s3
   <span class="token number">4</span>:                APFS Volume VM                      <span class="token number">2.1</span> GB     disk1s4
   <span class="token number">5</span>:                APFS Volume Macintosh HD            <span class="token number">15.4</span> GB    disk1s5
   <span class="token number">6</span>:              APFS Snapshot com.apple.os.update-<span class="token punctuation">..</span>. <span class="token number">15.4</span> GB    disk1s5s1

/dev/disk2 <span class="token punctuation">(</span>external, physical<span class="token punctuation">)</span>:
   <span class="token comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   <span class="token number">0</span>:      GUID_partition_scheme                        *5.0 TB     disk2
   <span class="token number">1</span>:       Microsoft Basic Data WD_BLACK                <span class="token number">5.0</span> TB     disk2s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  可以根据名字 <code>WD_BLACK</code> 看出，<code>/dev/disk2</code> 是我的移动硬盘，<code>/dev/disk2s1</code> 是我的移动硬盘数据分区。 <del>至于/dev/disk2s1，应该是移动硬盘系统区，不用管。</del> 于是执行下面命令挂载移动硬盘数据卷（需要注意的是：<code>diskutil mountDisk</code> 是挂载整个盘的，但是在数据卷损坏的情况下，挂载整个盘没啥用）：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">diskutil <span class="token function">mount</span> /dev/disk2s1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  发现超时：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Volume on disk2 timed out waiting to <span class="token function">mount</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  搜索后发现是在挂载上一个存在问题的盘后，<code>Mac</code> 就会在后台自动运行 <code>fsck_hfs</code>，导致 <code>diskutil 挂载超时</code>。执行 <code>ps aux | grep fsck</code> 可以发现：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root             <span class="token number">70983</span>   <span class="token number">1.0</span>  <span class="token number">0.1</span>  <span class="token number">4306296</span>   <span class="token number">5508</span>   ??  Us   <span class="token number">10</span>:53下午   
<span class="token number">0</span>:02.74 /System/Library/Filesystems/exfat.fs/Contents/Resources/fsck_exfat <span class="token parameter variable">-y</span> <span class="token parameter variable">-x</span> /dev/rdisk2s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  当然你可以将该进程杀掉（<code>sudo pkill -f fsck</code>），然后再挂载（<code>diskutil mount /dev/disk2s1</code>），此时会挂载成功，但是会存在数据不一致现象。所以仍是得执行上述磁盘修复命令（如果是 apfs 文件系统，需要用 fsck_apfs）：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fsck_exfat <span class="token parameter variable">-y</span> <span class="token parameter variable">-x</span> /dev/disk2s1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  然后等待其结束（具体多久那就不一定了，我的都是在几分钟的数量级），然后再：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">diskutil <span class="token function">mount</span> /dev/disk2s1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  具体这两个命令其他用法可以通过 <code>man diskutil</code> 和 <code>man fsck_hfs</code> 来查看。</li>
</ol>
<h3 id="解决-三"><a href="#解决-三" class="headerlink" title="解决 三"></a>解决 三</h3><ol>
<li>Mac 集成在了一款内置的 “<code>磁盘工具</code>” 之中。通过 command+空格 “聚焦搜索” 磁盘工具可以调出。<img data-src="/post/344dc787/fdisk002.png" class="" title="磁盘工具">
  选择无法识别的移动硬盘 <code>WD_BLACK</code> 然后点<code>急救</code>，就是会执行 <code>fsck_exfat -y -x /dev/disk2s1</code> 并在执行成功后<code>自动挂载</code>。如果急救出现问题，说明后台可能已经在运行 fsck_exfat 命令了，这时候你<code>只需要等待</code>就行了。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="note no-icon primary"><ol>
<li>电源断电会引起移动硬盘不正常退出，切记切记。</li>
<li>如果重新插上不显示，不要慌。等会就好了，因为Mac后台默默的帮你检查一致性。</li>
<li>如果有点慌就按上面我说的探索一番吧。</li>
</ol>
</div>
<p>  <a href="https://blog.csdn.net/Bobdragery/article/details/95086132">Mac移动硬盘不正确断开连接导致无法读取加载的解决方法,亲测有效</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Disk</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 启动容器时出现docker0：iptables：No chain/target/match by that name</title>
    <url>/post/4fd4a771.html</url>
    <content><![CDATA[<h3 id="防火墙跟docker冲突问题"><a href="#防火墙跟docker冲突问题" class="headerlink" title="防火墙跟docker冲突问题"></a>防火墙跟<code>docker</code>冲突问题</h3><p>  <code>Centos8</code> 下 <code>iptables</code>防火墙下：<br>  Docker 启动容器时出现 docker0: iptables: No chain/target/match by that name</p>
<span id="more"></span>

<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/sysconfig/
<span class="token function">vi</span> iptables-config

<span class="token comment"># 找到</span>
<span class="token assign-left variable">IPTABLES_SAVE_COUNTER</span><span class="token operator">=</span><span class="token string">"no"</span>

将no改为yes

保存退出

<span class="token comment"># 将docker重启</span>
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac终端查看CPU资源信息</title>
    <url>/post/55e5c59c.html</url>
    <content><![CDATA[<h5 id="查看所有信息"><a href="#查看所有信息" class="headerlink" title="查看所有信息"></a>查看所有信息</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> machdep.cpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>  此命令会将所有CPU信息列出，根据需要查看即可。<br>  如果只关心部分信息，可添加更详细的查询参数。<br>  注：下面的-n参数，表示是否显示查询的变量名。</p>
<h5 id="显示CPU型号"><a href="#显示CPU型号" class="headerlink" title="显示CPU型号"></a>显示CPU型号</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-n</span> machdep.cpu.brand_string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="显示CPU核心数（物理核）"><a href="#显示CPU核心数（物理核）" class="headerlink" title="显示CPU核心数（物理核）"></a>显示CPU核心数（物理核）</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-n</span> machdep.cpu.core_count<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="显示线程数（逻辑核）"><a href="#显示线程数（逻辑核）" class="headerlink" title="显示线程数（逻辑核）"></a>显示线程数（逻辑核）</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-n</span> machdep.cpu.thread_count<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>cpu</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS使用top命令查看进程使用内存</title>
    <url>/post/516b0bfa.html</url>
    <content><![CDATA[<p>  在linux中我们一般会使用top或ps命令查看进程的内存、CPU等资源使用情况，但是MacOS计算内存方式有点不太一样，什么意思呢？就是说用ps命令查看进程的内存值和在活动监视器中看到的内存值不一样。</p>
<span id="more"></span>

<h5 id="1-活动监视器查看"><a href="#1-活动监视器查看" class="headerlink" title="1,活动监视器查看"></a>1,活动监视器查看</h5><h5 id="2-使用ps命令查看"><a href="#2-使用ps命令查看" class="headerlink" title="2,使用ps命令查看"></a>2,使用<code>ps</code>命令查看</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> XXXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="3-使用top命令查看"><a href="#3-使用top命令查看" class="headerlink" title="3,使用top命令查看"></a>3,使用<code>top</code>命令查看</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token parameter variable">-pid</span> <span class="token number">2211</span> <span class="token parameter variable">-l</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $8}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="4-推荐"><a href="#4-推荐" class="headerlink" title="4,推荐"></a>4,<code>推荐</code></h5><p>  1/3一样，与2不一样。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用法</span>
<span class="token function">top</span> <span class="token parameter variable">-pid</span> <span class="token punctuation">{</span>pid<span class="token punctuation">}</span> <span class="token parameter variable">-l</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $8}'</span>
<span class="token comment"># 示例</span>
<span class="token function">top</span> <span class="token parameter variable">-pid</span> <span class="token number">2211</span> <span class="token parameter variable">-l</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $8}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success no-icon"><ul>
<li><code>【-l 1】</code>表示<code>只执行1次</code>，</li>
<li><code>【tail -n 1】</code>表示取<code>最后一行</code>结果，</li>
<li><code>【awk '{print $8}'】</code>表示取<code>第8列</code>的值（即内存值）。</li>
</ul>
</div>

<p>  根据应用名（如：Infoflow）查看进程号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> Infoflow <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  上面说了MacOS计算内存方式与Linux有点不太一样，一般linux系统看某个进程的内存使用情况，有两种计算方式：（1）实际使用内存，（2）实际使用内存 + cache使用内存。但是在MacOS计算内存时，有个交换内存SwSS，如下所示。<br>  参考：<a href="http://wuzhou.github.io/programming/2019/06/01/macos-ios-memory.html">MacOS, iOS 内存的基本概念和分析工具</a></p>
<p><code>Virtual Memory（虚拟内存）</code><br>  虚拟内存指的是一个程序程序运行时，使用的内存空间。<br>  虚拟内存的大小一般使用 VSS（Virtual Set Size）表示。它的大小一般这样计算：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">VSS</span> <span class="token punctuation">=</span> <span class="token value attr-value">RSS + LSS + SwSS </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="note success no-icon"><p>RSS 的全称为：Resident Set Size，表示当前程序进程实际使用的内存大小。</p>
<p>LSS 的全称为：”Lazy” Set Size，表示系统同意给程序进程分配的，但是还没分配完成的内存大小。</p>
<p>SwSS 的全称为：”Swap” Set Size，指交换内存的大小，与 MacOS 不同，iOS 没有交换内存（移动设备物理存储空间相对有限）。</p>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>top</tag>
        <tag>free</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之部署安装zookeeper</title>
    <url>/post/aa05fc91.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br>  ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
<span id="more"></span>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull zookeeper:3.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="数据目录"><a href="#数据目录" class="headerlink" title="数据目录"></a>数据目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/voldata/zookeeper/<span class="token punctuation">{</span>conf,data,log<span class="token punctuation">}</span>

<span class="token builtin class-name">cd</span> conf
<span class="token function">vi</span>  zoo.cfg
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/data
<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/datalog
<span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span>
<span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">2</span>
<span class="token assign-left variable">autopurge.snapRetainCount</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token assign-left variable">autopurge.purgeInterval</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">60</span>
<span class="token assign-left variable">standaloneEnabled</span><span class="token operator">=</span>true
<span class="token assign-left variable">admin.enableServer</span><span class="token operator">=</span>true
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -dit -p 2181:2181 \
--name zookeeper \
--privileged=true \
--restart always \
-v /root/.docker/voldata/zookeeper/data:/data \
-v /root/.docker/voldata/zookeeper/log:/datalog \
-v /root/.docker/voldata/zookeeper/conf:/conf \
zookeeper:3.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p><a href="https://blog.51cto.com/u_14834727/2994070"> 使用docker快速搭建zookeeper集群 原创 </a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之 docker exec 命令简化</title>
    <url>/post/787150d6.html</url>
    <content><![CDATA[<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>  某些时候需要进入容器进行操作，可以使用 <code>attach</code> 、<code>exec</code> 进入容器。</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 不安全的，ctrl+d 退出时容器也会终止</span>
docker attach [容器Name]

<span class="token comment"># 以交互式命令行进入，安全的，推荐使用</span>
docker exec -it [容器Name] /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<h3 id="命令优化"><a href="#命令优化" class="headerlink" title="命令优化"></a>命令优化</h3><ol>
<li>使用 <code>docker exec</code> 命令时，好用，但是命令过长，我们可以通过自定义命令来简化使用</li>
<li>创建文件 <code>/user/bin/ctn</code> 命令文件，内容如下:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable">$1</span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  检查环境变量有没有配置目录 <code>/usr/bin</code> （一般是有配置在环境变量里面的，不过最好再确认一下）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">$PATH</span>
bash: /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  完成上面步骤后，就可以直接通过命令 <code>ctn</code> 来进入容器<div class="note info no-icon"><p>注意：如果是使用非 root 账号创建的命令，而 docker 命令是 root 权限，可能存在权限问题，可以通过设置 <code>chmod 777 /usr/bin/ctn</code> 设置权限，使用 <code>sudo ctn [容器Name] </code> 即可进入容器</p>
</div>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">$ ctn [容器Name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  使用上面命令时，容器Name 需要手动输入，容器出错。我们可以借助 <code>complete</code> 命令来补全 容器Name，在 <code>~/.bashrc</code> （作用于当前用户，如果想要所要用户上校，可以修改 <code>/etc/bashrc</code>）文件中添加一行，内容如下。保存后执行 <code>source ~/.bashrc</code> 使之生效，之后我们输入 <code>ctn</code> 后，按 <code>tab</code> 就会提示或自动补全容器名了了<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ctn auto complete</span>
complete <span class="token parameter variable">-W</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> --format<span class="token string">"{{.Names}}"</span><span class="token variable">)</span></span>"</span> ctn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p>注意： 由于提示的 容器Name 是 <code>~/.bashrc</code> 生效时的列表，所有如果之后 <code>docker</code> 容器列表有变动，需要重新执行 <code>source ~/.bashrc</code> 使之更新提示列表</p>
</div></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现4种微信抢红包算法</title>
    <url>/post/95ad3e48.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><div class="note success no-icon"><ol>
<li>保证每个红包最少分得<code>0.01</code>元</li>
<li>保证每个红包金额概率尽量均衡</li>
<li>所有红包累计金额登于红包总金额</li>
</ol>
</div>

<span id="more"></span>

<h3 id="红包算法"><a href="#红包算法" class="headerlink" title="红包算法"></a>红包算法</h3><h4 id="剩余金额随机法"><a href="#剩余金额随机法" class="headerlink" title="剩余金额随机法"></a>剩余金额随机法</h4><div class="note success no-icon"><p>  以<code>10</code>元<code>10</code>个红包为例，去除每个红包的最小金额后，红包剩余<code>9.9</code>元；</p>
<ol>
<li>第一个红包在<code>[0,9.9]</code>范围随机，假设随机得<code>1</code>元，则第一个红包金额为<code>1.1</code>元，红包剩余<code>8.9</code>元。</li>
<li>第二个红包在<code>[0,8.9]</code>范围随机，假设随机得<code>1.5</code>元，则第二个红包金额为<code>1.6</code>元，红包剩余<code>7.4</code>元。</li>
<li>第三个红包在<code>[0,7.4]</code>范围随机，假设随机得<code>0.5</code>元，则第三个红包金额为<code>0.6</code>元，红包剩余<code>6.9</code>元。</li>
<li>以此类推。</li>
</ol>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化测试场景</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rrr <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//测试个场景</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decimals <span class="token operator">:</span> rrr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> amount <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> num <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"个人抢======================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test1</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> min<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> remain <span class="token operator">=</span> amount<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> hundred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> sum <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> redpeck<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> nextInt <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>nextInt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>remain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>hundred<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            remain <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个人抢到红包金额为："</span> <span class="token operator">+</span> min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验每个红包累计额度是否等于红包总额结果："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>amount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  测试结果如下:可以看出此算法有明显缺陷，即：先领取的红包金额较大，后领取的红包金额较小，这就使得抢红包便的不公平。</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token number">0.1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.01</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.09</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.28</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.19</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.20</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.15</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.02</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.03</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.02</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">100</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">19.99</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">29.58</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">38.27</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">11.85</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.11</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.13</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.03</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.02</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1000</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">60.00</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">695.54</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">229.72</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">8.95</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.29</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">4.64</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.69</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.12</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.04</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="二倍均值法-微信红包采用此法"><a href="#二倍均值法-微信红包采用此法" class="headerlink" title="二倍均值法(微信红包采用此法)"></a>二倍均值法(<code>微信红包采用此法</code>)</h4><div class="note success no-icon"><p>  还是以<code>10</code>元<code>10</code>个红包为例，去除每个红包的最小金额后，红包剩余<code>9.9</code>元，二倍均值计算公式：<code>2 * 剩余金额/剩余红包数</code></p>
<ol>
<li>第一个红包在<code>[0,1.98]</code>范围随机，假设随机得<code>1.9</code>，则第一个红包金额为<code>2.0</code>，红包剩余<code>8</code>元。</li>
<li>第二个红包在<code>[0,2]</code>范围随机，假设随机的<code>1</code>元，则第二个红包金额为<code>1.1</code>元，红包剩余<code>7</code>元。</li>
<li>第三个红包在<code>[0,2]</code>范围随机，假设随机的<code>0.5</code>元，则第三个红包金额为<code>0.6</code>元，红包剩余<code>5.5</code>元。</li>
<li>以此类推。</li>
</ol>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化测试场景</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rrr <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//测试个场景</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decimals <span class="token operator">:</span> rrr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> amount <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> num <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"个人抢======================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test2</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> min <span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> remain <span class="token operator">=</span> amount<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> hundred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> sum <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> redpeck<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> nextInt <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>nextInt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">CEILING</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>hundred<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个人抢到红包金额为："</span><span class="token operator">+</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验每个红包累计额度是否等于红包总额结果："</span><span class="token operator">+</span>amount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  测试结果如下:此算法很好的保证了抢红包几率大致均等。</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token number">0.1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.01</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">100</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">6.20</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">7.09</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">10.62</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">18.68</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">18.74</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">2.32</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">15.44</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">5.43</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">15.16</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.32</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.08</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.05</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.17</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.17</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.08</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.06</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.18</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.10</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.02</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.09</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1000</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">125.99</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">165.08</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">31.90</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">94.78</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">137.79</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">88.89</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">156.44</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">7.97</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">151.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">40.15</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="整体随机法"><a href="#整体随机法" class="headerlink" title="整体随机法"></a>整体随机法</h4><div class="note success no-icon"><p>  还是以<code>10</code>元<code>10</code>个红包为例，随机<code>10</code>个数，红包金额公式为：<code>红包总额 * 随机数/随机数总和</code>，假设<code>10</code>个随机数为<code>[5,9,8,7,6,5,4,3,2,1]</code>,<code>10</code>个随机数总和为<code>50</code>，</p>
<ol>
<li>第一个红包<code>10*5/50</code>，得<code>1</code>元。</li>
<li>第二个红包<code>10*9/50</code>，得<code>1.8</code>元。</li>
<li>第三个红包<code>10*8/50</code>，得<code>1.6</code>元。</li>
<li>以此类推。</li>
</ol>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化测试场景</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rrr <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//测试个场景</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decimals <span class="token operator">:</span> rrr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> amount <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> num <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"个人抢======================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test3</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> min <span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> sum1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> redpeck <span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> remain <span class="token operator">=</span> amount<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rand<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum1<span class="token operator">=</span> sum1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个人抢到红包金额为："</span><span class="token operator">+</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验每个红包累计额度是否等于红包总额结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>amount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  测试结果如下:此算法随机性较大。</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token number">0.1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.01</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">100</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">2.35</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">14.12</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">5.74</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">6.61</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.65</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">10.97</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">9.15</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">7.93</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">1.31</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">41.17</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.10</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.02</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.12</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.03</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.05</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.12</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.06</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.04</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.45</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1000</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">148.96</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">116.57</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">80.49</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">32.48</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">89.39</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">65.60</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">20.77</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">16.03</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">36.79</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">392.92</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="割线法"><a href="#割线法" class="headerlink" title="割线法"></a>割线法</h4><div class="note success no-icon"><p>  还是以<code>10</code>元<code>10</code>个红包为例，在<code>(0,10)</code>范围随机<code>9</code>个间隔<code>大于等于0.01</code>数，假设为<code>[1,1.2,2,3,4,5,6,7,8]</code></p>
<ol>
<li>第一个红包得<code>1</code>元</li>
<li>第二个红包得<code>0.2</code>元</li>
<li>第三个红得<code>0.8</code>元。</li>
<li>以此类推。</li>
</ol>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//初始化测试场景</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rrr <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//测试个场景</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decimals <span class="token operator">:</span> rrr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> amount <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> num <span class="token operator">=</span> decimals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token string">"元"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"个人抢======================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test3</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> min <span class="token punctuation">,</span><span class="token class-name">BigDecimal</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> sum1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> redpeck <span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> remain <span class="token operator">=</span> amount<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rand<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            redpeck <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">FLOOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            remain <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum1<span class="token operator">=</span> sum1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个人抢到红包金额为："</span><span class="token operator">+</span>min<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redpeck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验每个红包累计额度是否等于红包总额结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>amount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  测试结果如下:此算法随机性较大，且性能不好</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token number">0.1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.01</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.01</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">100</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">19.84</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">2.73</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">8.95</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">14.10</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">18.60</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">3.66</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">9.17</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">15.49</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">5.61</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">1.85</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">0.02</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">0.28</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">0.03</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">0.02</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">0.11</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">0.23</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">0.18</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">0.09</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">0.03</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">0.01</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span class="token number">1000</span>元<span class="token number">10</span>个人抢<span class="token separator comment">=======================================================</span>
第<span class="token number">1</span>个人抢到红包金额为：<span class="token number">69.28</span>
第<span class="token number">2</span>个人抢到红包金额为：<span class="token number">14.68</span>
第<span class="token number">3</span>个人抢到红包金额为：<span class="token number">373.16</span>
第<span class="token number">4</span>个人抢到红包金额为：<span class="token number">274.73</span>
第<span class="token number">5</span>个人抢到红包金额为：<span class="token number">30.77</span>
第<span class="token number">6</span>个人抢到红包金额为：<span class="token number">30.76</span>
第<span class="token number">7</span>个人抢到红包金额为：<span class="token number">95.55</span>
第<span class="token number">8</span>个人抢到红包金额为：<span class="token number">85.20</span>
第<span class="token number">9</span>个人抢到红包金额为：<span class="token number">10.44</span>
第<span class="token number">10</span>个人抢到红包金额为：<span class="token number">15.43</span>
校验每个红包累计额度是否等于红包总额结果：<span class="token boolean">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p><a href="https://www.zybuluo.com/yulin718/note/93148">微信红包的架构设计简介</a><br><a href="https://www.cnblogs.com/chenyanbin/p/13587508.html">java实现qq抢红包_Redis秒杀实战</a><br><a href="https://blog.csdn.net/linkingfei/article/details/109541118">实用算法原理及简介</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之部署skywalking实现全链路监控功能</title>
    <url>/post/4612f524.html</url>
    <content><![CDATA[<img data-src="/post/4612f524/skywalking-001.png" style="box-shadow:none!important;">

<span id="more"></span>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  skywalking是一个开放源码的，用于收集、分析，聚合，可视化来自于不同服务和本地基础服务的数据的可观察的平台，<br>  skywalking提供了一个简单的方法来让你对你的分布式系统甚至是跨云的服务有清晰的了解。<br>  它更像是一个现代的系统性能管理，特别为分布式系统而设计。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>  skywalking提供了在很多不同的场景下用于观察和监控分布式系统的方式。 首先，像传统的方法，skywalking为java,c#,Node.js等提供了自动探针代理. 同时，它为Go,C++提供了手工探针。<br>  随着本地服务越来越多，需要越来越多的语言，掌控代码的风险也在增加， Skywalking可以使用网状服务探针收集数据，以了解整个分布式系统。 通常，skywalking提供了观察service,service instance,endpoint的能力。</p>
<div class="note success no-icon"><ul>
<li><code>service</code>: 一个服务</li>
<li><code>Service Instance</code>: 服务的实例(1个服务会启动多个节点)</li>
<li><code>Endpoint</code>: 一个服务中的其中一个接口</li>
</ul>
</div>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><img data-src="/post/4612f524/skywalking-002.jpg" class="" title="skywalking架构图">
<h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull elasticsearch:7.17.3
docker pull apache/skywalking-oap-server:9.0.0
docker pull apache/skywalking-ui:9.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="note success no-icon"><ol>
<li><code>elasticsearch</code> 作为 skywalking 的存储，保存链路和日志数据等</li>
<li><code>oap</code> 数据接收和分析 Observability Analysis Platform</li>
<li><code>ui</code>  web端的数据展示</li>
</ol>
</div>

<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装<code>elasticsearch</code></h5><p>  安装过程，参考：  <a href="/post/5aa01560.html" title="【Docker】之安装 ElasticSearch">【Docker】之安装 ElasticSearch</a> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改系统参数</span>
<span class="token function">vi</span> /etc/sysctl.conf
<span class="token comment"># 调整参数</span>
<span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span>
<span class="token comment"># 刷新参数</span>
<span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  启动elasticsearch</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d --name=es7 \
-p 9200:9200 -p 9300:9300 \
-e "discovery.type=single-node" elasticsearch:7.17.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  等待30秒左右，查看docker日志，如果有出现</p>
<pre class="line-numbers language-none"><code class="language-none">"publish_address {172.17.0.2:9300}, bound_addresses {0.0.0.0:9300}"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  说明启动成功了。<br>  创建持久化目录，并重启启动elasticsearch</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">mkdir -p /data/elasticsearch
docker cp es7:/usr/share/elasticsearch/data /data/elasticsearch/
docker cp es7:/usr/share/elasticsearch/logs /data/elasticsearch/
docker rm -f es7
docker run -d --name=es7 \
  --restart=always \
  -p 9200:9200 -p 9300:9300 \
  -e "discovery.type=single-node" \
  -v /data/elasticsearch/data:/usr/share/elasticsearch/data \
  -v /data/elasticsearch/logs:/usr/share/elasticsearch/logs \
elasticsearch:7.17.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="安装oap"><a href="#安装oap" class="headerlink" title="安装oap"></a>安装<code>oap</code></h5><p>  注意：<code>等待elasticsearch完全启动之后，再启动oap</code><br>  参考：<a href="https://skywalking.apache.org/docs/main/latest/en/setup/backend/backend-docker/">https://skywalking.apache.org/docs/main/latest/en/setup/backend/backend-docker/</a></p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run \
--name skywalking-oap \
--restart always \
-p 11800:11800 \
-p 12800:12800 -d \
--privileged=true \
-e TZ=Asia/Shanghai \
-e SW_STORAGE=elasticsearch \
-e SW_STORAGE_ES_CLUSTER_NODES=10.211.55.81:9200 \
-v /etc/localtime:/etc/localtime:ro \
apache/skywalking-oap-server:9.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run \
--name skywalking-oap \
--restart always \
-p 11800:11800 \
-p 12800:12800 -d \
--privileged=true \
-e TZ=Asia/Shanghai \
-e SW_STORAGE=elasticsearch7 \
-e SW_STORAGE_ES_CLUSTER_NODES=10.211.55.81:9200 \
-v /etc/localtime:/etc/localtime:ro \
apache/skywalking-oap-server:8.6.0-es7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  说明：这里指定<code>elasticsearch</code> 来存储数据</p>
<h5 id="安装ui"><a href="#安装ui" class="headerlink" title="安装ui"></a>安装<code>ui</code></h5><p>  参考： <a href="https://skywalking.apache.org/docs/main/latest/en/setup/backend/ui-setup/">https://skywalking.apache.org/docs/main/latest/en/setup/backend/ui-setup/</a></p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run \
--name skywalking-ui \
--restart always \
-p 8086:8080 -d \
--privileged=true \
--link skywalking-oap:skywalking-oap \
-e TZ=Asia/Shanghai \
-e SW_OAP_ADDRESS=http://10.211.55.81:12800 \
-v /etc/localtime:/etc/localtime:ro \
apache/skywalking-ui:9.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run \
--name skywalking-ui \
--restart always \
-p 8086:8080 -d \
--privileged=true \
--link skywalking-oap:skywalking-oap \
-e TZ=Asia/Shanghai \
-e SW_OAP_ADDRESS=10.211.55.81:12800 \
-v /etc/localtime:/etc/localtime:ro \
apache/skywalking-ui:8.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="docker-compose-的方式"><a href="#docker-compose-的方式" class="headerlink" title="docker-compose 的方式"></a>docker-compose 的方式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建配置文件保存的目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/docker/admin/skywalking
<span class="token comment"># 切换到刚创建的目录</span>
<span class="token builtin class-name">cd</span> /data/docker/admin/skywalking
<span class="token comment"># 将下面的 docker-compose.yml 文件保存到这个目录</span>
<span class="token function">vi</span> docker-compose.yml
<span class="token comment"># 拉去镜像并启动</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
<span class="token comment"># 查看日志</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>docker-compose.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.14.1
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD-SHELL"</span><span class="token punctuation">,</span> <span class="token string">"curl --silent --fail localhost:9200/_cluster/health || exit 1"</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 40s
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> discovery.type=single<span class="token punctuation">-</span>node
      <span class="token punctuation">-</span> bootstrap.memory_lock=true
      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>
        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>
  <span class="token key atrule">oap</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>oap<span class="token punctuation">-</span>server<span class="token punctuation">:</span>8.7.0<span class="token punctuation">-</span>es7
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> oap
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elasticsearch
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elasticsearch
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 11800<span class="token punctuation">:</span><span class="token number">11800</span>
      <span class="token punctuation">-</span> 12800<span class="token punctuation">:</span><span class="token number">12800</span>
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD-SHELL"</span><span class="token punctuation">,</span> <span class="token string">"/skywalking/bin/swctl"</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 40s
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
      <span class="token key atrule">SW_STORAGE</span><span class="token punctuation">:</span> elasticsearch7
      <span class="token key atrule">SW_STORAGE_ES_CLUSTER_NODES</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>
  <span class="token key atrule">ui</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>8.7.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ui
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> oap
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> oap
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8088<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
      <span class="token key atrule">SW_OAP_ADDRESS</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//oap<span class="token punctuation">:</span><span class="token number">12800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="Spring-boot实例部署"><a href="#Spring-boot实例部署" class="headerlink" title="Spring-boot实例部署"></a>Spring-boot实例部署</h3><p>  下载agent：<a href="https://skywalking.apache.org/downloads/">https://skywalking.apache.org/downloads/</a></p>
<img data-src="/post/4612f524/skywalking-003.png" class="" title="Agents">
<p>  以agent的方式启动，对代码没有侵入性，直接在启动命令上指定javaagent即可。<br>  启动命令javaagent参数添加：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>xiaosige<span class="token operator">/</span><span class="token class-name">Downloads</span><span class="token operator">/</span>skywalking<span class="token operator">-</span>agent<span class="token operator">/</span>skywalking<span class="token operator">-</span>agent<span class="token punctuation">.</span>jar 
  <span class="token operator">-</span><span class="token constant">DSW_AGENT_COLLECTOR_BACKEND_SERVICES</span><span class="token operator">=</span><span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.81</span><span class="token operator">:</span><span class="token number">11800</span> 
  <span class="token operator">-</span><span class="token constant">DSW_AGENT_NAME</span><span class="token operator">=</span>user<span class="token operator">-</span>ser 
  <span class="token operator">-</span>jar user<span class="token operator">-</span>service<span class="token operator">-</span><span class="token number">1.0</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="查看监控情况"><a href="#查看监控情况" class="headerlink" title="查看监控情况"></a>查看监控情况</h3><p>  启动程序后，登录skywalking查看监控情况：<code>http://10.211.55.81:8086</code></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p><a href="http://dljz.nicethemes.cn/news/show-121700.html">链路追踪：SkyWalking</a><br><a href="http://yelog.org/2021/09/26/spring-cloud-skywalking/">SpringCloud系列之接入SkyWalking进行链路追踪和日志收集</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>APM</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装 RabbitMQ</title>
    <url>/post/c0af152c.html</url>
    <content><![CDATA[<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># (镜像未配有控制台)</span>
docker pull rabbitmq:3.9.16
<span class="token comment"># (镜像配有控制台)</span>
docker pull rabbitmq:3.9.16-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>注意此处需要安装management的版本才有界面，其他tag的版本是没有管理界面的</code></p>
<span id="more"></span>

<h3 id="创建并启动RabbitMQ容器"><a href="#创建并启动RabbitMQ容器" class="headerlink" title="创建并启动RabbitMQ容器"></a>创建并启动RabbitMQ容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/voldata/rabbitmq/<span class="token punctuation">{</span>data,etc,log<span class="token punctuation">}</span>
<span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> rabbitmq

<span class="token function">docker</span> <span class="token function">cp</span> <span class="token parameter variable">-a</span> <span class="token function">docker</span> <span class="token function">cp</span> <span class="token parameter variable">-a</span> 容器ID:/var/lib/rabbitmq /home/rabbitmq/lib/
<span class="token function">docker</span> <span class="token function">cp</span> <span class="token parameter variable">-a</span> 容器ID:/etc/rabbitmq /home/rabbitmq/etc/
<span class="token function">docker</span> <span class="token function">cp</span> <span class="token parameter variable">-a</span> 容器ID:/var/log/rabbitmq /home/rabbitmq/log/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d --name rabbitmq \
-p 5672:5672 -p 15672:15672 \
--restart=always \
-v `pwd`/rabbitmq/data:/var/lib/rabbitmq \
-v `pwd`/rabbitmq/log:/var/log/rabbitmq \
-v `pwd`/rabbitmq/etc:/etc/rabbitmq \
--hostname myRabbit \
-e RABBITMQ_DEFAULT_VHOST=my_vhost  \
-e RABBITMQ_DEFAULT_USER=admin \
-e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.9.16-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 启动rabbitmq_management, rabbitmq 为容器的名称，使用id也可以</span>
docker exec -it rabbitmq rabbitmq-plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<div class="note info no-icon"><ul>
<li><code>-d</code> 后台运行容器；</li>
<li><code>--name</code> 指定容器名；</li>
<li><code>-p</code> 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）</li>
<li><code>-v</code> 映射目录或文件；</li>
<li><code>--hostname</code> 主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）</li>
<li><code>-e</code> 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名，RABBITMQ_DEFAULT_USER：默认的用户名，RABBITMQ_DEFAULT_PASS：默认用户名的密码）</li>
</ul>
</div>
<h3 id="开启防火墙15672端口"><a href="#开启防火墙15672端口" class="headerlink" title="开启防火墙15672端口"></a>开启防火墙<code>15672</code>端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">15672</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="访问web管理端"><a href="#访问web管理端" class="headerlink" title="访问web管理端"></a>访问web管理端</h3><pre class="line-numbers language-none"><code class="language-none">http://Server-IP:15672<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装 ElasticSearch</title>
    <url>/post/5aa01560.html</url>
    <content><![CDATA[<img data-src="/post/5aa01560/elk001.png" style="box-shadow:none!important;">

<span id="more"></span>


<h3 id="下载-ElasticSearch-和-Kibana-镜像"><a href="#下载-ElasticSearch-和-Kibana-镜像" class="headerlink" title="下载 ElasticSearch 和 Kibana 镜像"></a>下载 <code>ElasticSearch</code> 和 <code>Kibana</code> 镜像</h3><p>  以 <code>7.17.3</code> 版本为例，<code>elasticsearch</code> 和 <code>kibana</code> 的版本要对应：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull elasticsearch:7.17.3
docker pull kibana:7.17.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  更多版本的镜像可以访问 Docker 官网：<a href="https://hub.docker.com/_/elasticsearch?tab=tags****">https://hub.docker.com/_/elasticsearch?tab=tags</a></p>
<h3 id="创建并运行-ElasticSearch-容器"><a href="#创建并运行-ElasticSearch-容器" class="headerlink" title="创建并运行 ElasticSearch 容器"></a>创建并运行 <code>ElasticSearch</code> 容器</h3><p>  配置相关映射文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建挂载目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/voldata/elasticsearch/<span class="token punctuation">{</span>config,data,logs,plugins<span class="token punctuation">}</span>

<span class="token comment"># 创建配置文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">&gt;</span> /root/.docker/voldata/elasticsearch/config/elasticsearch.yml

<span class="token comment"># 给挂载目录添加权限</span>
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /root/.docker/voldata/elasticsearch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  启动容器：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d -p 9200:9200 -p 9300:9300 \
-e "discovery.type=single-node" \
-e ES_JAVA_OPTS="-Xms84m -Xmx512m" \
-v /root/.docker/voldata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
-v /root/.docker/voldata/elasticsearch/data:/usr/share/elasticsearch/data \
-v /root/.docker/voldata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \
-v /root/.docker/voldata/elasticsearch/logs:/usr/share/elasticsearch/logs \
--name elasticsearch \
elasticsearch:7.17.3 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><ul>
<li><code>-d</code>：表示在后台运行容器；</li>
<li><code>-p</code>：将容器的端口 9200（TCP 请求端口） 和 9300（HTTP 请求端口）映射到主机上对应的端口；</li>
<li><code>-e</code>：设置环境变量；</li>
<li><code>-v</code>：挂载目录；</li>
<li><code>--name</code>：设置容器名称；</li>
<li><code>elasticsearch:7.17.3</code>：容器使用的镜像名称；</li>
</ul>
</div>
<p>  查看启动情况：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker ps -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  设置 <code>docker</code> 启动时自动运行：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker update elasticsearch --restart=always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建并运行启动-Kibana-容器"><a href="#创建并运行启动-Kibana-容器" class="headerlink" title="创建并运行启动 Kibana 容器"></a>创建并运行启动 <code>Kibana</code> 容器</h3><p>  启动命令：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d -p 5601:5601 \
-e ELASTICSEARCH_HOSTS=http://10.211.55.81:9200 \
--name kibana \
kibana:7.17.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><ul>
<li><code>-d</code>：表示在后台运行容器；</li>
<li><code>-p 5601:5601</code>：将容器的 5601 端口映射到主机的 5601 端口上；</li>
<li><code>-e ELASTICSEARCH_HOSTS</code>：设置环境变量，ELASTICSEARCH_HOSTS 指定了 elasticsearch 服务运行的 IP 地址；</li>
<li><code>--name kibana</code>：设置容器名称；</li>
<li><code>kibana:7.17.3</code>：容器使用的镜像名称；</li>
</ul>
</div>
<p>  查看启动情况：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker ps -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  设置 docker 启动时自动运行：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker update kibana --restart=always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="访问-ElasticSearch-和-Kibana"><a href="#访问-ElasticSearch-和-Kibana" class="headerlink" title="访问 ElasticSearch 和 Kibana"></a>访问 <code>ElasticSearch</code> 和 <code>Kibana</code></h3><p>1）查看 <code>elasticsearch</code> 版本信息：浏览器输入地址 <code>http://10.211.55.81:9200</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"57eae3752c89"</span><span class="token punctuation">,</span>
  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>
  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"qiyzlDQ7Sb69Kmh9uW9bYQ"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.17.3"</span><span class="token punctuation">,</span>
    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>
    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"5ad023604c8d7416c9eb6c0eadb62b14e766caff"</span><span class="token punctuation">,</span>
    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2022-04-19T08:11:19.070913226Z"</span><span class="token punctuation">,</span>
    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.11.1"</span><span class="token punctuation">,</span>
    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>
    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2）显示 <code>elasticsearch</code> 节点信息：浏览器输入地址 <code>http://10.211.55.81:9200/_cat/nodes</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token number">127.0</span>.<span class="token number">0.1</span> <span class="token number">19</span> <span class="token number">97</span> <span class="token number">5</span> <span class="token number">0.09</span> <span class="token number">0.24</span> <span class="token number">0.24</span> cdfhilmrstw * 57eae3752c89<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3）访问 <code>Kibana</code>：浏览器输入地址 <code>http://10.211.55.81:5601/app/kibana</code></p>
<img data-src="/post/5aa01560/kibana-001.png" class="" title="kibana"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之 Dockerfile 镜像打包，保存镜像至本地，导入镜像</title>
    <url>/post/887706e1.html</url>
    <content><![CDATA[<img data-src="/post/887706e1/dockerfile001.png" style="height:260px;width:100%;box-shadow:none!important;">

<span id="more"></span>


<h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><p>  在Dockerfile 目录下cmd窗口执行以下命令：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build -t 镜像名称 -f Dockerfile .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<!-- more -->

<div class="note success no-icon"><p><code>-t</code> : 镜像名和版本。<br><code>-f</code> : Dockerfile，默认当前目录Dockerfile，当然也可以是其他名字。<br><code>.</code>  : 注意，最后这个<code>.</code>，必须有。</p>
</div>
<p>  例如：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build -f Dockerfile -t user:v1.0 .
docker build -f dockerfile-alpine-glibc-jdk18 -t xiaosige/alpine-glibc:8_jdk .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h3 id="镜像保存"><a href="#镜像保存" class="headerlink" title="镜像保存"></a>镜像保存</h3><p>  cmd窗口执行：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker save -o 保存至本地文件名 待保存镜像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  例如：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker save -o user.tar user:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="镜像导入"><a href="#镜像导入" class="headerlink" title="镜像导入"></a>镜像导入</h3><p>  cmd窗口执行：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker load --input 本地文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  例如：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker load -i user.tar <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><ol>
<li>如果镜像保存的时候为 <code>save</code> 那么导入应该使用<code>load</code></li>
<li>如果镜像保存的时候为 <code>export</code> 那么导入应该使用 <code>import</code><br>  否则在导入时会<code>报错</code></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>  <a href="https://scwcd.cn/archives/28.html">Dockerfile 定制镜像基础知识</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决】Idea中Pom.xml变灰并加横线</title>
    <url>/post/454169be.html</url>
    <content><![CDATA[<p>  问题描述：有时候我们在删除某些项目，重新新建之后有时候会发现<code>pom.xml</code>文件上有<code>一条横线</code>，解决方式如下:</p>
<span id="more"></span>


<img data-src="/post/454169be/ideapom001.png" class="" title="IDEA-Maven-Pom.xml变灰,出现删除线">

<p>  设置完成后，重启IDEA。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置 HTTPS（多域名）</title>
    <url>/post/643b08ac.html</url>
    <content><![CDATA[<h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><p>  首先, 需要把 <code>http</code> 都转发到 <code>https</code>, 需要使用 <code>rewrite</code>, 这样, 当访问 <code>http://example.cn</code> 会自动转发到 <code>https://example.cn</code></p>
<span id="more"></span>

<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
   	<span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment"># redirect to 443</span>
    	<span class="token directive"><span class="token keyword">server_name</span> AAA.example.cn www.AAA.example.cn</span><span class="token punctuation">;</span>
    	<span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$  https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

   <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
           <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment"># redirect to 443</span>
           <span class="token directive"><span class="token keyword">server_name</span> BBB.example.cn www.BBB.example.cn</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$  https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就是真正的 <code>https</code> 部分了, 虽然域名不同, 但都监听 <code>443</code> 端口, 但有着不同的 <code>server_name</code>, 这样当收到请求时就可以根据请求的 <code>server_name</code> 不同来转发到不同的服务.</p>
<p>而服务自身像往常一样只要继续监听 <code>8090</code>、<code>8091</code> 即可.</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
           	<span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
           	<span class="token directive"><span class="token keyword">server_name</span> AAA.example.cn www.AAA.example.cn</span><span class="token punctuation">;</span>    

           	<span class="token directive"><span class="token keyword">ssl_certificate</span> <span class="token string">"/home/yushan/demontf/2076603_AAA.example.cn.pem"</span></span><span class="token punctuation">;</span>   
           	<span class="token directive"><span class="token keyword">ssl_certificate_key</span> <span class="token string">"/home/yushan/demontf/2076603_AAA.example.cn.key"</span></span><span class="token punctuation">;</span>    
           
           	<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
               			<span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8090</span><span class="token punctuation">;</span>
               			<span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
               			<span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
               			<span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>
               			<span class="token directive"><span class="token keyword">proxy_set_header</span> X-NginX-Proxy true</span><span class="token punctuation">;</span>
               			<span class="token directive"><span class="token keyword">proxy_redirect</span> default</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
   		<span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span> <span class="token comment"># redirect to https</span>
   		<span class="token directive"><span class="token keyword">server_name</span> BBB.example.cn www.BBB.example.cn</span><span class="token punctuation">;</span>
   		
   		<span class="token directive"><span class="token keyword">ssl_certificate</span> <span class="token string">"/home/yushan/demontf/2005538_BBB.example.cn.pem"</span></span><span class="token punctuation">;</span>
   		<span class="token directive"><span class="token keyword">ssl_certificate_key</span> <span class="token string">"/home/yushan/demontf/2005538_BBB.example.cn.key"</span></span><span class="token punctuation">;</span>
   		
   		<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
   		              <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8091</span><span class="token punctuation">;</span>
   		              <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
   		              <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
   		              <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>
   		              <span class="token directive"><span class="token keyword">proxy_set_header</span> X-NginX-Proxy true</span><span class="token punctuation">;</span>
   		              <span class="token directive"><span class="token keyword">proxy_redirect</span> default</span><span class="token punctuation">;</span>
   		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置修改好之后, 需要重启 Nginx.</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat---setenv.sh</title>
    <url>/post/38ddfd80.html</url>
    <content><![CDATA[<h2 id="tomcat-setenv-sh"><a href="#tomcat-setenv-sh" class="headerlink" title="tomcat,setenv.sh"></a>tomcat,setenv.sh</h2><p>  代码比较简单</p>
<span id="more"></span>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">
<span class="token comment">#!/bin/sh</span>

<span class="token comment"># 使用的Tomcat目录</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">CATALINA_HOME=/usr/local/tomcat8</span>

<span class="token comment"># JAVA_OPTS参数需要CATALINA_PID参数，windows下不配CATALINA_PID</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">CATALINA_PID="$CATALINA_HOME/tomcat.pid"</span>


<span class="token comment">#CATALINA_OPTS</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Djava.awt.headless=true"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.port=8998"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.rmi.port=8999"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.ssl=false"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.authenticate=true"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.passwd"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Djava.rmi.server.hostname=10.211.55.81"</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">CATALINA_OPTS</span>

<span class="token comment"># 使用的jdk目录</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">JAVA_HOME=/usr/java/jdk1.8.0_321-amd64</span>

<span class="token comment"># Tomcat的JVM参数设置</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -server "</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Duser.timezone=GMT+08 "</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Xms512m -Xmx512m"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Xss256k"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:NewSize=128m -XX:MaxNewSize=256m"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+DisableExplicitGC"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+AggressiveOpts"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+UseBiasedLocking"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:MaxTenuringThreshold=15"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+UseConcMarkSweepGC"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+UseParNewGC"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+CMSParallelRemarkEnabled"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:LargePageSizeInBytes=128m"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+UseFastAccessorMethods"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -XX:+UseCMSInitiatingOccupancyOnly"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Djava.awt.headless=true"</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">JAVA_OPTS</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>java visualVM(jconsole)远程监控服务器java进程</title>
    <url>/post/dc26ce6d.html</url>
    <content><![CDATA[<h2 id="JMX方式（jconsole也可通过此方式进行连接）"><a href="#JMX方式（jconsole也可通过此方式进行连接）" class="headerlink" title="JMX方式（jconsole也可通过此方式进行连接）"></a>JMX方式（jconsole也可通过此方式进行连接）</h2><p>  jmx方式能监控到CPU信息，但无法使用visualVM的visualVM GC插件</p>
<span id="more"></span>

<h3 id="jmx无密码方式"><a href="#jmx无密码方式" class="headerlink" title="jmx无密码方式"></a>jmx无密码方式</h3><h4 id="监控普通的java进程"><a href="#监控普通的java进程" class="headerlink" title="监控普通的java进程"></a>监控普通的java进程</h4><ol>
<li>设置hostname<br>  在<code>/etc/hosts</code>中添加<code>hostname</code>解析，解析地址可以不是外网<code>ip</code>（可通过hostname命令查看hostname是多少）</li>
<li>启动时添加参数<pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">22334</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span> <span class="token class-name">Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
  其中<code>xxx.xxx.xxx</code>为本机外网ip,<code>22334</code>为提供<code>jmx</code>访问的端口，可自己指定<br>  如果没有配置<code>hostname</code>解析可能会出现如下异常：<br><code>Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException:</code><pre class="line-numbers language-java" data-language="java"><code class="language-java">nohup java <span class="token operator">-</span><span class="token class-name">Xms64m</span> <span class="token operator">-</span><span class="token class-name">Xmx128m</span> 
        <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">10.211</span><span class="token number">.55</span><span class="token number">.81</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">22334</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">22335</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span> 
        <span class="token operator">-</span><span class="token class-name">Dcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span> 
        <span class="token operator">-</span><span class="token class-name">Dserver</span><span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">9091</span> <span class="token operator">-</span>jar mybatisplus<span class="token punctuation">.</span>jar  <span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在防火墙中开放端口<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token parameter variable">-i</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> “启动的java进程pid”<span class="token punctuation">(</span>可通过jps查看<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  将查看上一步查看到的<code>tcp</code>监听端口全部在防火墙中进行开放，注意关闭该<code>java</code>进程后重新启动需要重新配置开发的端口，因为监听的端口会发生变化</li>
<li>打开<code>visualVm</code>或<code>jconsole</code><br>  输入<code>ip</code>（<code>2</code>中配置的<code>xxx.xxx.xxx</code>）和端口（<code>22334</code>）进行连接即可查看监控，无需输入用户名和密码</li>
</ol>
<h4 id="监控普通的tomcat"><a href="#监控普通的tomcat" class="headerlink" title="监控普通的tomcat"></a>监控普通的tomcat</h4><ol>
<li>下载<code>catalina-jmx-remote.jar</code>，放在<code>tomcat/lib</code>目录下面<br>  请根据自己的tomcat版本选择对应的包:<br>  地址示例： <a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.35/bin/extras/"><code>http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.35/bin/extras/</code></a><br>  地址示例： <a href="http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.35/bin/extras/"><code>http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.35/bin/extras/</code></a><br>  下载地址： <a href="http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina-jmx-remote"><code>http://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina-jmx-remote</code></a> </li>
<li>配置<code>conf/server.xml</code><br>  在<code>server.xml</code>中添加如下监听配置:<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.catalina.mbeans.JmxRemoteLifecycleListener<span class="token punctuation">"</span></span>  
       <span class="token attr-name">rmiRegistryPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22334<span class="token punctuation">"</span></span> <span class="token attr-name">rmiServerPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22334<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  有了该可使得每次重启<code>tomat</code>不需要重新在防火墙中开放端口，因为会使用配置的<code>22334</code>端口</li>
<li>修改<code>bin/catalina.sh</code>或<code>bin/setenv.sh</code><br>  添加配置：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"${CATALINA_OPTS} -Djava.rmi.server.hostname=服务器的外网ip地址"                                                                                                                                                                                                      </span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"${CATALINA_OPTS} -Dcom.sun.management.jmxremote=true"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"${CATALINA_OPTS} -Dcom.sun.management.jmxremote.ssl=false"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"${CATALINA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在防火墙中开放端口<br>  在防火墙中开发<code>22334</code>端口<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">22334</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>打开<code>visualVm</code>或<code>jconsole</code><br>  输入<code>ip</code>（<code>3</code>中配置的服务器的外网<code>ip</code>地址）和端口（<code>22334</code>）进行连接即可查看监控，无需输入用户名和密码</li>
</ol>
<h3 id="jmx有密码方式"><a href="#jmx有密码方式" class="headerlink" title="jmx有密码方式"></a>jmx有密码方式</h3><ol>
<li>添加账号<br>  进入<code>/usr/java/jdk1.8.0_321-amd64/jre/lib/management/</code>目录（可通过<code>jinfo  pid|grep java.home</code>的查看自己的<code>java.home</code>）<br>  执行命令：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> jmxremote.password.template jmxremote.password
<span class="token function">chmod</span> <span class="token number">600</span> jmxremote.password
<span class="token function">vim</span> jmxremote.password

<span class="token comment"># 将被注释的monitorRole，和controlRole放开，并修改密码123456</span>
monitorRole  <span class="token number">123456</span>
controlRole  <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <code>或</code><br>  进入<code>/tomcat/conf/</code>目录   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> jmxremote.access
username  readwrite

<span class="token function">vi</span> jmxremote.password
username password

<span class="token function">chmod</span> <span class="token number">600</span> jmxremote.access
<span class="token function">chmod</span> <span class="token number">600</span> jmxremote.password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改之前的启动配置<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#CATALINA_OPTS</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Djava.awt.headless=true"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.port=22334"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.rmi.port=22335"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.ssl=false"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.authenticate=true"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access"</span>
<span class="token key attr-name">CATALINA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$CATALINA_OPTS -Djava.rmi.server.hostname=10.211.55.81"</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">CATALINA_OPTS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <code>或</code><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.port=8998"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.rmi.port=8998"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=ture"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=../conf/jmxremote.password"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Dcom.sun.management.jmxremote.access.file=../conf/jmxremote.access"</span>
<span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Djava.rmi.server.hostname=10.211.55.81"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启动<br>  打开<code>visualVm</code>或<code>jconsole</code>输入<code>ip+端口</code>，然后输入之前设置的账号<code>controlRole</code> 和密码 <code>123456</code>即可连上</li>
</ol>
<h2 id="jstatd方式"><a href="#jstatd方式" class="headerlink" title="jstatd方式"></a>jstatd方式</h2><p>  jstatd方式能使用visualVM的visualVM GC插件，但无法监控到CPU信息</p>
<ol>
<li>开启权限<br>  在<code>/usr/java/jdk1.8.0_321-amd64/jre/lib/security/java.policy</code>中添加<br><code>permission java.security.AllPermission;</code></li>
<li>启动<pre class="line-numbers language-java" data-language="java"><code class="language-java">rmiregistry <span class="token number">2020</span><span class="token operator">&amp;</span>jstatd <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>security<span class="token punctuation">.</span>policy<span class="token operator">=</span>all<span class="token punctuation">.</span>policy <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>logCalls<span class="token operator">=</span><span class="token boolean">true</span> 
        <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span>服务器外网ip <span class="token operator">-</span>p <span class="token number">1099</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>开放端口<br>  通过<code>netstat -ntlp|grep jstatd</code>查看监听的端口（注意有两个监听端口），在防火墙中进行开放该端口<br>如果出现：<code>java.rmi.NotBoundException: JStatRemoteHost</code><br>一般等一段时间就恢复正常了</li>
<li>打开<code>visualVm</code>添加远程主机会自动加载远程<code>java</code>进程</li>
</ol>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ol>
<li>setenv.sh<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> setenv.sh
<span class="token function">chmod</span> +x setenv.sh
<span class="token function">chmod</span> <span class="token number">600</span> jmxremote.password
<span class="token function">chmod</span> <span class="token number">600</span> jxmremote.access<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>java.rmi.server.ExportException: internal error: ObjID already in use</code><br>  把文件<code>server.xml</code>中的下面<code>删除</code>即可。<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.catalina.mbeans.JmxRemoteLifecycleListener<span class="token punctuation">"</span></span>  
 <span class="token attr-name">rmiRegistryPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8998<span class="token punctuation">"</span></span> <span class="token attr-name">rmiServerPortPlatform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8999<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>Mac 下 java 的路径：<br><code>/usr/libexec/java_home -V</code></li>
</ol>
<br>

<blockquote>
<p>参考<br><a href="https://www.cnblogs.com/zhengshiqiang47/p/7634522.html">visualVM使用jstatd和jmx连接远程jvm及遇到的问题解决</a><br><a href="https://www.iteye.com/blog/ganxueyun-2511891"> visualvm远程连接配置 </a><br><a href="https://visualvm.github.io/index.html">visualvm 下载</a><br><a href="https://visualvm.github.io/pluginscenters.html">visualvm 插件</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用VMWare虚拟，设置网络</title>
    <url>/post/942dd570.html</url>
    <content><![CDATA[<h3 id="vmnet8重启网卡"><a href="#vmnet8重启网卡" class="headerlink" title="vmnet8重启网卡"></a>vmnet8重启网卡</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span>  /Applications/VMware<span class="token punctuation">\</span> Fusion.app/Contents/Library/vmnet-cli <span class="token parameter variable">--start</span>
<span class="token function">sudo</span>  /Applications/VMware<span class="token punctuation">\</span> Fusion.app/Contents/Library/vmnet-cli <span class="token parameter variable">--stop</span>
<span class="token function">sudo</span>  /Applications/VMware<span class="token punctuation">\</span> Fusion.app/Contents/Library/vmnet-cli <span class="token parameter variable">--status</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="网卡配置文件路径"><a href="#网卡配置文件路径" class="headerlink" title="网卡配置文件路径"></a>网卡配置文件路径</h3><p>  <code>/Library/Preferences/VMware\ Fusion/networking</code><br>  查看<code>vmnet8</code>的网关，配置文件<code>/Library/Preferences/VMware\ Fusion/vmnet8/nat.conf</code>，默认网关是<code>xxx.xxx.xxx.2</code>，可修改。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 解决开机启动时的 systemd-modules-load.service 失败的问题</title>
    <url>/post/f25aacc.html</url>
    <content><![CDATA[<p>  !解决开机启动时的systemd-modules-load.service失败的问题</p>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  昨天我运行了<code>dnf</code>更新,<code>Centos Stream 8</code> 内核是 4.18.0-365.el8.x86_64，重新启动多次失败。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Harbor ~<span class="token punctuation">]</span><span class="token comment"># systemctl status systemd-modules-load.service</span>
● systemd-modules-load.service - Load Kernel Modules
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/systemd-modules-load.service<span class="token punctuation">;</span> static<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>
   Active: failed <span class="token punctuation">(</span>Result: exit-code<span class="token punctuation">)</span> since Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:22:22 CST<span class="token punctuation">;</span> 52s ago
     Docs: man:systemd-modules-load.service<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
           man:modules-load.d<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  Process: <span class="token number">923</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/lib/systemd/systemd-modules-load <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>/FAILURE<span class="token punctuation">)</span>
 Main PID: <span class="token number">923</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>/FAILURE<span class="token punctuation">)</span>

<span class="token number">3</span>月 07 <span class="token number">16</span>:22:22 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">923</span><span class="token punctuation">]</span>: Module <span class="token string">'msr'</span> is <span class="token builtin class-name">builtin</span>
<span class="token number">3</span>月 07 <span class="token number">16</span>:22:22 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">923</span><span class="token punctuation">]</span>: Failed to insert <span class="token string">'ipmi_si'</span><span class="token builtin class-name">:</span> No such device
<span class="token number">3</span>月 07 <span class="token number">16</span>:22:22 Harbor systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: systemd-modules-load.service: Main process exited, <span class="token assign-left variable">code</span><span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>/FAILURE
<span class="token number">3</span>月 07 <span class="token number">16</span>:22:22 Harbor systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: systemd-modules-load.service: Failed with result <span class="token string">'exit-code'</span><span class="token builtin class-name">.</span>
<span class="token number">3</span>月 07 <span class="token number">16</span>:22:22 Harbor systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Failed to start Load Kernel Modules.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Harbor ~<span class="token punctuation">]</span><span class="token comment"># journalctl _PID=912</span>
-- Logs begin at Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:38:27 CST, end at Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:39:43 CST. --
<span class="token number">3</span>月 07 <span class="token number">16</span>:38:33 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">912</span><span class="token punctuation">]</span>: Module <span class="token string">'msr'</span> is <span class="token builtin class-name">builtin</span>
<span class="token number">3</span>月 07 <span class="token number">16</span>:38:33 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">912</span><span class="token punctuation">]</span>: Failed to insert <span class="token string">'ipmi_si'</span><span class="token builtin class-name">:</span> No such device
<span class="token punctuation">[</span>root@Harbor ~<span class="token punctuation">]</span><span class="token comment"># journalctl _SYSTEMD_UNIT=systemd-modules-load.service</span>
-- Logs begin at Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:38:27 CST, end at Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:39:43 CST. --
<span class="token number">3</span>月 07 <span class="token number">16</span>:38:33 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">912</span><span class="token punctuation">]</span>: Module <span class="token string">'msr'</span> is <span class="token builtin class-name">builtin</span>
<span class="token number">3</span>月 07 <span class="token number">16</span>:38:33 Harbor systemd-modules-load<span class="token punctuation">[</span><span class="token number">912</span><span class="token punctuation">]</span>: Failed to insert <span class="token string">'ipmi_si'</span><span class="token builtin class-name">:</span> No such device
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>  解决办法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/modprobe.d/blacklist-ipmi.conf 
blacklist ipmi_si
blacklist ipmi_devintf
blacklist ipmi_msghandler
blacklist ipmi_ssif
blacklist ipmi_watchdog
blacklist ipmi_poweroff
blacklist acpi_ipmi
blacklist ibmaem
blacklist ibmpex
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  启动正常了！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@Harbor ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart systemd-modules-load.service</span>
<span class="token punctuation">[</span>root@Harbor ~<span class="token punctuation">]</span><span class="token comment"># systemctl status systemd-modules-load.service</span>
● systemd-modules-load.service - Load Kernel Modules
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/systemd-modules-load.service<span class="token punctuation">;</span> static<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>
   Active: active <span class="token punctuation">(</span>exited<span class="token punctuation">)</span> since Mon <span class="token number">2022</span>-03-07 <span class="token number">16</span>:51:50 CST<span class="token punctuation">;</span> 1s ago
     Docs: man:systemd-modules-load.service<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
           man:modules-load.d<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  Process: <span class="token number">1860</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/lib/systemd/systemd-modules-load <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>
 Main PID: <span class="token number">1860</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>

<span class="token number">3</span>月 07 <span class="token number">16</span>:51:50 Harbor systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Load Kernel Modules<span class="token punctuation">..</span>.
<span class="token number">3</span>月 07 <span class="token number">16</span>:51:50 Harbor systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started Load Kernel Modules.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<div class="note info no-icon"><p>  <a href="https://blog.csdn.net/x_idea/article/details/123334398">【Linux】解决开机启动时的systemd-modules-load.service失败的问题 </a></p>
</div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装Redis6并且配置redis.conf</title>
    <url>/post/63ae3ee4.html</url>
    <content><![CDATA[<h3 id="安装方式一"><a href="#安装方式一" class="headerlink" title="安装方式一"></a>安装方式一</h3><h4 id="拉取Docker的Redis镜像"><a href="#拉取Docker的Redis镜像" class="headerlink" title="拉取Docker的Redis镜像"></a>拉取Docker的Redis镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull redis:6.2.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h4 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/dockerdata/redis6/data

<span class="token comment"># 授予权限</span>
<span class="token function">chmod</span> <span class="token number">777</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="redis-conf配置"><a href="#redis-conf配置" class="headerlink" title="redis.conf配置"></a>redis.conf配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/dockerdata/redis6
<span class="token function">wget</span> http://download.redis.io/redis-stable/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Redis configuration file example.</span>
 
<span class="token comment">####### Main configuration start #######</span>
 
<span class="token comment">#注释掉bind 127.0.0.1，使redis可以外部访问</span>
<span class="token comment">#bind 127.0.0.1</span>
 
<span class="token comment"># 端口号</span>
<span class="token key attr-name">port</span> <span class="token value attr-value">6379</span>
 
<span class="token comment">#给redis设置密码</span>
<span class="token key attr-name">requirepass</span> <span class="token value attr-value">redis123</span>
 
<span class="token comment">##redis持久化　　默认是no</span>
<span class="token key attr-name">appendonly</span> <span class="token value attr-value">yes</span>
 
<span class="token comment">#开启protected-mode保护模式，需配置bind ip或者设置访问密码</span>
<span class="token comment">#关闭protected-mode模式，此时外部网络可以直接访问</span>
<span class="token key attr-name">protected-mode</span> <span class="token value attr-value">yes</span>
 
<span class="token comment">#是否开启集群</span>
<span class="token comment">#cluster-enabled no</span>
 
<span class="token comment">#集群的配置文件,该文件自动生成</span>
<span class="token comment">#cluster-config-file nodes.conf</span>
 
<span class="token comment">#集群的超时时间</span>
<span class="token comment">#cluster-node-timeout 5000</span>
 
<span class="token comment">#用守护线程的方式启动</span>
<span class="token key attr-name">daemonize</span> <span class="token value attr-value">no   </span>
 
<span class="token comment">#防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</span>
<span class="token key attr-name">tcp-keepalive</span> <span class="token value attr-value">300</span>
 
<span class="token comment">####### Main configuration end #######</span>
 
<span class="token key attr-name">timeout</span> <span class="token value attr-value">0</span>
 
<span class="token key attr-name">tcp-backlog</span> <span class="token value attr-value">511</span>
 
<span class="token comment"># Note: these supervision methods only signal "process is ready."</span>
<span class="token comment">#       They do not enable continuous liveness pings back to your supervisor.</span>
<span class="token key attr-name">supervised</span> <span class="token value attr-value">no</span>
 
<span class="token comment"># If a pid file is specified, Redis writes it where specified at startup</span>
<span class="token comment"># and removes it at exit.</span>
<span class="token comment">#</span>
<span class="token comment"># When the server runs non daemonized, no pid file is created if none is</span>
<span class="token comment"># specified in the configuration. When the server is daemonized, the pid file</span>
<span class="token comment"># is used even if not specified, defaulting to "/var/run/redis.pid".</span>
<span class="token comment">#</span>
<span class="token comment"># Creating a pid file is best effort: if Redis is not able to create it</span>
<span class="token comment"># nothing bad happens, the server will start and run normally.</span>
<span class="token key attr-name">pidfile</span> <span class="token value attr-value">/var/run/redis_6379.pid</span>
 
<span class="token comment"># Specify the server verbosity level.</span>
<span class="token comment"># This can be one of:</span>
<span class="token comment"># debug (a lot of information, useful for development/testing)</span>
<span class="token comment"># verbose (many rarely useful info, but not a mess like the debug level)</span>
<span class="token comment"># notice (moderately verbose, what you want in production probably)</span>
<span class="token comment"># warning (only very important / critical messages are logged)</span>
<span class="token key attr-name">loglevel</span> <span class="token value attr-value">notice</span>
 
<span class="token comment"># Specify the log file name. Also the empty string can be used to force</span>
<span class="token comment"># Redis to log on the standard output. Note that if you use standard</span>
<span class="token comment"># output for logging but daemonize, logs will be sent to /dev/null</span>
<span class="token key attr-name">logfile</span> <span class="token value attr-value">""</span>
 
<span class="token comment"># To enable logging to the system logger, just set 'syslog-enabled' to yes,</span>
<span class="token comment"># and optionally update the other syslog parameters to suit your needs.</span>
<span class="token comment"># syslog-enabled no</span>
 
<span class="token comment"># Specify the syslog identity.</span>
<span class="token comment"># syslog-ident redis</span>
 
<span class="token comment"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span>
<span class="token comment"># syslog-facility local0</span>
 
<span class="token comment"># Set the number of databases. The default database is DB 0, you can select</span>
<span class="token comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span>
<span class="token comment"># dbid is a number between 0 and 'databases'-1</span>
<span class="token key attr-name">databases</span> <span class="token value attr-value">16</span>
 
<span class="token comment"># By default Redis shows an ASCII art logo only when started to log to the</span>
<span class="token comment"># standard output and if the standard output is a TTY. Basically this means</span>
<span class="token comment"># that normally a logo is displayed only in interactive sessions.</span>
<span class="token comment">#</span>
<span class="token comment"># However it is possible to force the pre-4.0 behavior and always show a</span>
<span class="token comment"># ASCII art logo in startup logs by setting the following option to yes.</span>
<span class="token key attr-name">always-show-logo</span> <span class="token value attr-value">yes</span>
 
<span class="token comment">################################ SNAPSHOTTING  ################################</span>
<span class="token comment">#</span>
<span class="token comment"># Save the DB on disk:</span>
<span class="token comment">#</span>
<span class="token comment">#   save &lt;seconds&gt; &lt;changes&gt;</span>
<span class="token comment">#</span>
<span class="token comment">#   Will save the DB if both the given number of seconds and the given</span>
<span class="token comment">#   number of write operations against the DB occurred.</span>
<span class="token comment">#</span>
<span class="token comment">#   In the example below the behaviour will be to save:</span>
<span class="token comment">#   after 900 sec (15 min) if at least 1 key changed</span>
<span class="token comment">#   after 300 sec (5 min) if at least 10 keys changed</span>
<span class="token comment">#   after 60 sec if at least 10000 keys changed</span>
<span class="token comment">#</span>
<span class="token comment">#   Note: you can disable saving completely by commenting out all "save" lines.</span>
<span class="token comment">#</span>
<span class="token comment">#   It is also possible to remove all the previously configured save</span>
<span class="token comment">#   points by adding a save directive with a single empty string argument</span>
<span class="token comment">#   like in the following example:</span>
<span class="token comment">#</span>
<span class="token comment">#   save ""</span>
 
<span class="token key attr-name">save</span> <span class="token value attr-value">900 1</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">300 10</span>
<span class="token key attr-name">save</span> <span class="token value attr-value">60 10000</span>
 
<span class="token comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span>
<span class="token comment"># (at least one save point) and the latest background save failed.</span>
<span class="token comment"># This will make the user aware (in a hard way) that data is not persisting</span>
<span class="token comment"># on disk properly, otherwise chances are that no one will notice and some</span>
<span class="token comment"># disaster will happen.</span>
<span class="token comment">#</span>
<span class="token comment"># If the background saving process will start working again Redis will</span>
<span class="token comment"># automatically allow writes again.</span>
<span class="token comment">#</span>
<span class="token comment"># However if you have setup your proper monitoring of the Redis server</span>
<span class="token comment"># and persistence, you may want to disable this feature so that Redis will</span>
<span class="token comment"># continue to work as usual even if there are problems with disk,</span>
<span class="token comment"># permissions, and so forth.</span>
<span class="token key attr-name">stop-writes-on-bgsave-error</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># Compress string objects using LZF when dump .rdb databases?</span>
<span class="token comment"># For default that's set to 'yes' as it's almost always a win.</span>
<span class="token comment"># If you want to save some CPU in the saving child set it to 'no' but</span>
<span class="token comment"># the dataset will likely be bigger if you have compressible values or keys.</span>
<span class="token key attr-name">rdbcompression</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span>
<span class="token comment"># This makes the format more resistant to corruption but there is a performance</span>
<span class="token comment"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span>
<span class="token comment"># for maximum performances.</span>
<span class="token comment">#</span>
<span class="token comment"># RDB files created with checksum disabled have a checksum of zero that will</span>
<span class="token comment"># tell the loading code to skip the check.</span>
<span class="token key attr-name">rdbchecksum</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># The filename where to dump the DB</span>
<span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump.rdb</span>
 
<span class="token comment"># Remove RDB files used by replication in instances without persistence</span>
<span class="token comment"># enabled. By default this option is disabled, however there are environments</span>
<span class="token comment"># where for regulations or other security concerns, RDB files persisted on</span>
<span class="token comment"># disk by masters in order to feed replicas, or stored on disk by replicas</span>
<span class="token comment"># in order to load them for the initial synchronization, should be deleted</span>
<span class="token comment"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span>
<span class="token comment"># and RDB persistence disabled, otherwise is completely ignored.</span>
<span class="token comment">#</span>
<span class="token comment"># An alternative (and sometimes better) way to obtain the same effect is</span>
<span class="token comment"># to use diskless replication on both master and replicas instances. However</span>
<span class="token comment"># in the case of replicas, diskless is not always an option.</span>
<span class="token key attr-name">rdb-del-sync-files</span> <span class="token value attr-value">no</span>
 
<span class="token comment"># The working directory.</span>
<span class="token comment">#</span>
<span class="token comment"># The DB will be written inside this directory, with the filename specified</span>
<span class="token comment"># above using the 'dbfilename' configuration directive.</span>
<span class="token comment">#</span>
<span class="token comment"># The Append Only File will also be created inside this directory.</span>
<span class="token comment">#</span>
<span class="token comment"># Note that you must specify a directory here, not a file name.</span>
<span class="token key attr-name">dir</span> <span class="token value attr-value">./</span>
 
 
<span class="token comment"># When a replica loses its connection with the master, or when the replication</span>
<span class="token comment"># is still in progress, the replica can act in two different ways:</span>
<span class="token comment">#</span>
<span class="token comment"># 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will</span>
<span class="token comment">#    still reply to client requests, possibly with out of date data, or the</span>
<span class="token comment">#    data set may just be empty if this is the first synchronization.</span>
<span class="token comment">#</span>
<span class="token comment"># 2) if replica-serve-stale-data is set to 'no' the replica will reply with</span>
<span class="token comment">#    an error "SYNC with master in progress" to all the kind of commands</span>
<span class="token comment">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span>
<span class="token comment">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span>
<span class="token comment">#    COMMAND, POST, HOST: and LATENCY.</span>
<span class="token comment">#</span>
<span class="token key attr-name">replica-serve-stale-data</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># You can configure a replica instance to accept writes or not. Writing against</span>
<span class="token comment"># a replica instance may be useful to store some ephemeral data (because data</span>
<span class="token comment"># written on a replica will be easily deleted after resync with the master) but</span>
<span class="token comment"># may also cause problems if clients are writing to it because of a</span>
<span class="token comment"># misconfiguration.</span>
<span class="token comment">#</span>
<span class="token comment"># Since Redis 2.6 by default replicas are read-only.</span>
<span class="token comment">#</span>
<span class="token comment"># Note: read only replicas are not designed to be exposed to untrusted clients</span>
<span class="token comment"># on the internet. It's just a protection layer against misuse of the instance.</span>
<span class="token comment"># Still a read only replica exports by default all the administrative commands</span>
<span class="token comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span>
<span class="token comment"># security of read only replicas using 'rename-command' to shadow all the</span>
<span class="token comment"># administrative / dangerous commands.</span>
<span class="token key attr-name">replica-read-only</span> <span class="token value attr-value">yes</span>
 
 
<span class="token comment"># When diskless replication is used, the master waits a configurable amount of</span>
<span class="token comment"># time (in seconds) before starting the transfer in the hope that multiple</span>
<span class="token comment"># replicas will arrive and the transfer can be parallelized.</span>
<span class="token comment">#</span>
<span class="token comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span>
<span class="token comment"># works better.</span>
<span class="token key attr-name">repl-diskless-sync</span> <span class="token value attr-value">no</span>
 
<span class="token comment"># When diskless replication is enabled, it is possible to configure the delay</span>
<span class="token comment"># the server waits in order to spawn the child that transfers the RDB via socket</span>
<span class="token comment"># to the replicas.</span>
<span class="token comment">#</span>
<span class="token comment"># This is important since once the transfer starts, it is not possible to serve</span>
<span class="token comment"># new replicas arriving, that will be queued for the next RDB transfer, so the</span>
<span class="token comment"># server waits a delay in order to let more replicas arrive.</span>
<span class="token comment">#</span>
<span class="token comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span>
<span class="token comment"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span>
<span class="token key attr-name">repl-diskless-sync-delay</span> <span class="token value attr-value">5</span>
 
 
<span class="token comment"># In many cases the disk is slower than the network, and storing and loading</span>
<span class="token comment"># the RDB file may increase replication time (and even increase the master's</span>
<span class="token comment"># Copy on Write memory and salve buffers).</span>
<span class="token comment"># However, parsing the RDB file directly from the socket may mean that we have</span>
<span class="token comment"># to flush the contents of the current database before the full rdb was</span>
<span class="token comment"># received. For this reason we have the following options:</span>
<span class="token comment">#</span>
<span class="token comment"># "disabled"    - Don't use diskless load (store the rdb file to the disk first)</span>
<span class="token comment"># "on-empty-db" - Use diskless load only when it is completely safe.</span>
<span class="token comment"># "swapdb"      - Keep a copy of the current db contents in RAM while parsing</span>
<span class="token comment">#                 the data directly from the socket. note that this requires</span>
<span class="token comment">#                 sufficient memory, if you don't have it, you risk an OOM kill.</span>
<span class="token key attr-name">repl-diskless-load</span> <span class="token value attr-value">disabled</span>
 
 
<span class="token comment"># Disable TCP_NODELAY on the replica socket after SYNC?</span>
<span class="token comment">#</span>
<span class="token comment"># If you select "yes" Redis will use a smaller number of TCP packets and</span>
<span class="token comment"># less bandwidth to send data to replicas. But this can add a delay for</span>
<span class="token comment"># the data to appear on the replica side, up to 40 milliseconds with</span>
<span class="token comment"># Linux kernels using a default configuration.</span>
<span class="token comment">#</span>
<span class="token comment"># If you select "no" the delay for data to appear on the replica side will</span>
<span class="token comment"># be reduced but more bandwidth will be used for replication.</span>
<span class="token comment">#</span>
<span class="token comment"># By default we optimize for low latency, but in very high traffic conditions</span>
<span class="token comment"># or when the master and replicas are many hops away, turning this to "yes" may</span>
<span class="token comment"># be a good idea.</span>
<span class="token key attr-name">repl-disable-tcp-nodelay</span> <span class="token value attr-value">no</span>
 
 
<span class="token comment"># The replica priority is an integer number published by Redis in the INFO</span>
<span class="token comment"># output. It is used by Redis Sentinel in order to select a replica to promote</span>
<span class="token comment"># into a master if the master is no longer working correctly.</span>
<span class="token comment">#</span>
<span class="token comment"># A replica with a low priority number is considered better for promotion, so</span>
<span class="token comment"># for instance if there are three replicas with priority 10, 100, 25 Sentinel</span>
<span class="token comment"># will pick the one with priority 10, that is the lowest.</span>
<span class="token comment">#</span>
<span class="token comment"># However a special priority of 0 marks the replica as not able to perform the</span>
<span class="token comment"># role of master, so a replica with priority of 0 will never be selected by</span>
<span class="token comment"># Redis Sentinel for promotion.</span>
<span class="token comment">#</span>
<span class="token comment"># By default the priority is 100.</span>
<span class="token key attr-name">replica-priority</span> <span class="token value attr-value">100</span>
 
 
<span class="token comment"># ACL LOG</span>
<span class="token comment">#</span>
<span class="token comment"># The ACL Log tracks failed commands and authentication events associated</span>
<span class="token comment"># with ACLs. The ACL Log is useful to troubleshoot failed commands blocked </span>
<span class="token comment"># by ACLs. The ACL Log is stored in memory. You can reclaim memory with </span>
<span class="token comment"># ACL LOG RESET. Define the maximum entry length of the ACL Log below.</span>
<span class="token key attr-name">acllog-max-len</span> <span class="token value attr-value">128</span>
 
<span class="token comment"># Using an external ACL file</span>
<span class="token comment">#</span>
<span class="token comment"># Instead of configuring users here in this file, it is possible to use</span>
<span class="token comment"># a stand-alone file just listing users. The two methods cannot be mixed:</span>
<span class="token comment"># if you configure users here and at the same time you activate the exteranl</span>
<span class="token comment"># ACL file, the server will refuse to start.</span>
<span class="token comment">#</span>
<span class="token comment"># The format of the external ACL user file is exactly the same as the</span>
<span class="token comment"># format that is used inside redis.conf to describe users.</span>
<span class="token comment">#</span>
<span class="token comment"># aclfile /etc/redis/users.acl</span>
 
 
<span class="token comment"># Command renaming (DEPRECATED).</span>
<span class="token comment">#</span>
<span class="token comment"># ------------------------------------------------------------------------</span>
<span class="token comment"># WARNING: avoid using this option if possible. Instead use ACLs to remove</span>
<span class="token comment"># commands from the default user, and put them only in some admin user you</span>
<span class="token comment"># create for administrative purposes.</span>
<span class="token comment"># ------------------------------------------------------------------------</span>
<span class="token comment">#</span>
<span class="token comment"># It is possible to change the name of dangerous commands in a shared</span>
<span class="token comment"># environment. For instance the CONFIG command may be renamed into something</span>
<span class="token comment"># hard to guess so that it will still be available for internal-use tools</span>
<span class="token comment"># but not available for general clients.</span>
<span class="token comment">#</span>
<span class="token comment"># Example:</span>
<span class="token comment">#</span>
<span class="token comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span>
<span class="token comment">#</span>
<span class="token comment"># It is also possible to completely kill a command by renaming it into</span>
<span class="token comment"># an empty string:</span>
<span class="token comment">#</span>
<span class="token comment"># rename-command CONFIG ""</span>
<span class="token comment">#</span>
<span class="token comment"># Please note that changing the name of commands that are logged into the</span>
<span class="token comment"># AOF file or transmitted to replicas may cause problems.</span>
 
<span class="token comment">################################### CLIENTS ####################################</span>
 
<span class="token comment"># Set the max number of connected clients at the same time. By default</span>
<span class="token comment"># this limit is set to 10000 clients, however if the Redis server is not</span>
<span class="token comment"># able to configure the process file limit to allow for the specified limit</span>
<span class="token comment"># the max number of allowed clients is set to the current file limit</span>
<span class="token comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span>
<span class="token comment">#</span>
<span class="token comment"># Once the limit is reached Redis will close all the new connections sending</span>
<span class="token comment"># an error 'max number of clients reached'.</span>
<span class="token comment">#</span>
<span class="token comment"># IMPORTANT: When Redis Cluster is used, the max number of connections is also</span>
<span class="token comment"># shared with the cluster bus: every node in the cluster will use two</span>
<span class="token comment"># connections, one incoming and another outgoing. It is important to size the</span>
<span class="token comment"># limit accordingly in case of very large clusters.</span>
<span class="token comment">#</span>
<span class="token comment"># maxclients 10000</span>
 
<span class="token comment">############################## MEMORY MANAGEMENT ################################</span>
 
<span class="token comment"># Set a memory usage limit to the specified amount of bytes.</span>
<span class="token comment"># When the memory limit is reached Redis will try to remove keys</span>
<span class="token comment"># according to the eviction policy selected (see maxmemory-policy).</span>
<span class="token comment">#</span>
<span class="token comment"># If Redis can't remove keys according to the policy, or if the policy is</span>
<span class="token comment"># set to 'noeviction', Redis will start to reply with errors to commands</span>
<span class="token comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span>
<span class="token comment"># to reply to read-only commands like GET.</span>
<span class="token comment">#</span>
<span class="token comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span>
<span class="token comment"># set a hard memory limit for an instance (using the 'noeviction' policy).</span>
<span class="token comment">#</span>
<span class="token comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span>
<span class="token comment"># the size of the output buffers needed to feed the replicas are subtracted</span>
<span class="token comment"># from the used memory count, so that network problems / resyncs will</span>
<span class="token comment"># not trigger a loop where keys are evicted, and in turn the output</span>
<span class="token comment"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span>
<span class="token comment"># of more keys, and so forth until the database is completely emptied.</span>
<span class="token comment">#</span>
<span class="token comment"># In short... if you have replicas attached it is suggested that you set a lower</span>
<span class="token comment"># limit for maxmemory so that there is some free RAM on the system for replica</span>
<span class="token comment"># output buffers (but this is not needed if the policy is 'noeviction').</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory &lt;bytes&gt;</span>
 
<span class="token comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span>
<span class="token comment"># is reached. You can select one from the following behaviors:</span>
<span class="token comment">#</span>
<span class="token comment"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span>
<span class="token comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span>
<span class="token comment"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span>
<span class="token comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span>
<span class="token comment"># volatile-random -&gt; Remove a random key having an expire set.</span>
<span class="token comment"># allkeys-random -&gt; Remove a random key, any key.</span>
<span class="token comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span>
<span class="token comment"># noeviction -&gt; Don't evict anything, just return an error on write operations.</span>
<span class="token comment">#</span>
<span class="token comment"># LRU means Least Recently Used</span>
<span class="token comment"># LFU means Least Frequently Used</span>
<span class="token comment">#</span>
<span class="token comment"># Both LRU, LFU and volatile-ttl are implemented using approximated</span>
<span class="token comment"># randomized algorithms.</span>
<span class="token comment">#</span>
<span class="token comment"># Note: with any of the above policies, Redis will return an error on write</span>
<span class="token comment">#       operations, when there are no suitable keys for eviction.</span>
<span class="token comment">#</span>
<span class="token comment">#       At the date of writing these commands are: set setnx setex append</span>
<span class="token comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span>
<span class="token comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span>
<span class="token comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span>
<span class="token comment">#       getset mset msetnx exec sort</span>
<span class="token comment">#</span>
<span class="token comment"># The default is:</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory-policy noeviction</span>
 
<span class="token comment"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span>
<span class="token comment"># algorithms (in order to save memory), so you can tune it for speed or</span>
<span class="token comment"># accuracy. For default Redis will check five keys and pick the one that was</span>
<span class="token comment"># used less recently, you can change the sample size using the following</span>
<span class="token comment"># configuration directive.</span>
<span class="token comment">#</span>
<span class="token comment"># The default of 5 produces good enough results. 10 Approximates very closely</span>
<span class="token comment"># true LRU but costs more CPU. 3 is faster but not very accurate.</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory-samples 5</span>
 
<span class="token comment"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span>
<span class="token comment"># (unless it is promoted to master after a failover or manually). It means</span>
<span class="token comment"># that the eviction of keys will be just handled by the master, sending the</span>
<span class="token comment"># DEL commands to the replica as keys evict in the master side.</span>
<span class="token comment">#</span>
<span class="token comment"># This behavior ensures that masters and replicas stay consistent, and is usually</span>
<span class="token comment"># what you want, however if your replica is writable, or you want the replica</span>
<span class="token comment"># to have a different memory setting, and you are sure all the writes performed</span>
<span class="token comment"># to the replica are idempotent, then you may change this default (but be sure</span>
<span class="token comment"># to understand what you are doing).</span>
<span class="token comment">#</span>
<span class="token comment"># Note that since the replica by default does not evict, it may end using more</span>
<span class="token comment"># memory than the one set via maxmemory (there are certain buffers that may</span>
<span class="token comment"># be larger on the replica, or data structures may sometimes take more memory</span>
<span class="token comment"># and so forth). So make sure you monitor your replicas and make sure they</span>
<span class="token comment"># have enough memory to never hit a real out-of-memory condition before the</span>
<span class="token comment"># master hits the configured maxmemory setting.</span>
<span class="token comment">#</span>
<span class="token comment"># replica-ignore-maxmemory yes</span>
 
<span class="token comment"># Redis reclaims expired keys in two ways: upon access when those keys are</span>
<span class="token comment"># found to be expired, and also in background, in what is called the</span>
<span class="token comment"># "active expire key". The key space is slowly and interactively scanned</span>
<span class="token comment"># looking for expired keys to reclaim, so that it is possible to free memory</span>
<span class="token comment"># of keys that are expired and will never be accessed again in a short time.</span>
<span class="token comment">#</span>
<span class="token comment"># The default effort of the expire cycle will try to avoid having more than</span>
<span class="token comment"># ten percent of expired keys still in memory, and will try to avoid consuming</span>
<span class="token comment"># more than 25% of total memory and to add latency to the system. However</span>
<span class="token comment"># it is possible to increase the expire "effort" that is normally set to</span>
<span class="token comment"># "1", to a greater value, up to the value "10". At its maximum value the</span>
<span class="token comment"># system will use more CPU, longer cycles (and technically may introduce</span>
<span class="token comment"># more latency), and will tollerate less already expired keys still present</span>
<span class="token comment"># in the system. It's a tradeoff betweeen memory, CPU and latecy.</span>
<span class="token comment">#</span>
<span class="token comment"># active-expire-effort 1</span>
 
<span class="token comment">############################# LAZY FREEING ####################################</span>
 
<span class="token comment"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span>
<span class="token comment"># deletion of the object. It means that the server stops processing new commands</span>
<span class="token comment"># in order to reclaim all the memory associated with an object in a synchronous</span>
<span class="token comment"># way. If the key deleted is associated with a small object, the time needed</span>
<span class="token comment"># in order to execute the DEL command is very small and comparable to most other</span>
<span class="token comment"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span>
<span class="token comment"># aggregated value containing millions of elements, the server can block for</span>
<span class="token comment"># a long time (even seconds) in order to complete the operation.</span>
<span class="token comment">#</span>
<span class="token comment"># For the above reasons Redis also offers non blocking deletion primitives</span>
<span class="token comment"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span>
<span class="token comment"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span>
<span class="token comment"># are executed in constant time. Another thread will incrementally free the</span>
<span class="token comment"># object in the background as fast as possible.</span>
<span class="token comment">#</span>
<span class="token comment"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span>
<span class="token comment"># It's up to the design of the application to understand when it is a good</span>
<span class="token comment"># idea to use one or the other. However the Redis server sometimes has to</span>
<span class="token comment"># delete keys or flush the whole database as a side effect of other operations.</span>
<span class="token comment"># Specifically Redis deletes objects independently of a user call in the</span>
<span class="token comment"># following scenarios:</span>
<span class="token comment">#</span>
<span class="token comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span>
<span class="token comment">#    in order to make room for new data, without going over the specified</span>
<span class="token comment">#    memory limit.</span>
<span class="token comment"># 2) Because of expire: when a key with an associated time to live (see the</span>
<span class="token comment">#    EXPIRE command) must be deleted from memory.</span>
<span class="token comment"># 3) Because of a side effect of a command that stores data on a key that may</span>
<span class="token comment">#    already exist. For example the RENAME command may delete the old key</span>
<span class="token comment">#    content when it is replaced with another one. Similarly SUNIONSTORE</span>
<span class="token comment">#    or SORT with STORE option may delete existing keys. The SET command</span>
<span class="token comment">#    itself removes any old content of the specified key in order to replace</span>
<span class="token comment">#    it with the specified string.</span>
<span class="token comment"># 4) During replication, when a replica performs a full resynchronization with</span>
<span class="token comment">#    its master, the content of the whole database is removed in order to</span>
<span class="token comment">#    load the RDB file just transferred.</span>
<span class="token comment">#</span>
<span class="token comment"># In all the above cases the default is to delete objects in a blocking way,</span>
<span class="token comment"># like if DEL was called. However you can configure each case specifically</span>
<span class="token comment"># in order to instead release memory in a non-blocking way like if UNLINK</span>
<span class="token comment"># was called, using the following configuration directives.</span>
 
<span class="token key attr-name">lazyfree-lazy-eviction</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">lazyfree-lazy-expire</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">lazyfree-lazy-server-del</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">replica-lazy-flush</span> <span class="token value attr-value">no</span>
 
<span class="token comment"># It is also possible, for the case when to replace the user code DEL calls</span>
<span class="token comment"># with UNLINK calls is not easy, to modify the default behavior of the DEL</span>
<span class="token comment"># command to act exactly like UNLINK, using the following configuration</span>
<span class="token comment"># directive:</span>
 
<span class="token key attr-name">lazyfree-lazy-user-del</span> <span class="token value attr-value">no</span>
 
 
 
<span class="token comment"># The name of the append only file (default: "appendonly.aof")</span>
 
<span class="token key attr-name">appendfilename</span> <span class="token value attr-value">"appendonly.aof"</span>
 
<span class="token comment"># The fsync() call tells the Operating System to actually write data on disk</span>
<span class="token comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span>
<span class="token comment"># data on disk, some other OS will just try to do it ASAP.</span>
<span class="token comment">#</span>
<span class="token comment"># Redis supports three different modes:</span>
<span class="token comment">#</span>
<span class="token comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span>
<span class="token comment"># always: fsync after every write to the append only log. Slow, Safest.</span>
<span class="token comment"># everysec: fsync only one time every second. Compromise.</span>
<span class="token comment">#</span>
<span class="token comment"># The default is "everysec", as that's usually the right compromise between</span>
<span class="token comment"># speed and data safety. It's up to you to understand if you can relax this to</span>
<span class="token comment"># "no" that will let the operating system flush the output buffer when</span>
<span class="token comment"># it wants, for better performances (but if you can live with the idea of</span>
<span class="token comment"># some data loss consider the default persistence mode that's snapshotting),</span>
<span class="token comment"># or on the contrary, use "always" that's very slow but a bit safer than</span>
<span class="token comment"># everysec.</span>
<span class="token comment">#</span>
<span class="token comment"># More details please check the following article:</span>
<span class="token comment"># http://antirez.com/post/redis-persistence-demystified.html</span>
<span class="token comment">#</span>
<span class="token comment"># If unsure, use "everysec".</span>
 
<span class="token comment"># appendfsync always</span>
<span class="token key attr-name">appendfsync</span> <span class="token value attr-value">everysec</span>
<span class="token comment"># appendfsync no</span>
 
<span class="token comment"># When the AOF fsync policy is set to always or everysec, and a background</span>
<span class="token comment"># saving process (a background save or AOF log background rewriting) is</span>
<span class="token comment"># performing a lot of I/O against the disk, in some Linux configurations</span>
<span class="token comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span>
<span class="token comment"># this currently, as even performing fsync in a different thread will block</span>
<span class="token comment"># our synchronous write(2) call.</span>
<span class="token comment">#</span>
<span class="token comment"># In order to mitigate this problem it's possible to use the following option</span>
<span class="token comment"># that will prevent fsync() from being called in the main process while a</span>
<span class="token comment"># BGSAVE or BGREWRITEAOF is in progress.</span>
<span class="token comment">#</span>
<span class="token comment"># This means that while another child is saving, the durability of Redis is</span>
<span class="token comment"># the same as "appendfsync none". In practical terms, this means that it is</span>
<span class="token comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span>
<span class="token comment"># default Linux settings).</span>
<span class="token comment">#</span>
<span class="token comment"># If you have latency problems turn this to "yes". Otherwise leave it as</span>
<span class="token comment"># "no" that is the safest pick from the point of view of durability.</span>
 
<span class="token key attr-name">no-appendfsync-on-rewrite</span> <span class="token value attr-value">no</span>
 
<span class="token comment"># Automatic rewrite of the append only file.</span>
<span class="token comment"># Redis is able to automatically rewrite the log file implicitly calling</span>
<span class="token comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span>
<span class="token comment">#</span>
<span class="token comment"># This is how it works: Redis remembers the size of the AOF file after the</span>
<span class="token comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span>
<span class="token comment"># the AOF at startup is used).</span>
<span class="token comment">#</span>
<span class="token comment"># This base size is compared to the current size. If the current size is</span>
<span class="token comment"># bigger than the specified percentage, the rewrite is triggered. Also</span>
<span class="token comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span>
<span class="token comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span>
<span class="token comment"># is reached but it is still pretty small.</span>
<span class="token comment">#</span>
<span class="token comment"># Specify a percentage of zero in order to disable the automatic AOF</span>
<span class="token comment"># rewrite feature.</span>
 
<span class="token key attr-name">auto-aof-rewrite-percentage</span> <span class="token value attr-value">100</span>
<span class="token key attr-name">auto-aof-rewrite-min-size</span> <span class="token value attr-value">64mb</span>
 
<span class="token comment"># An AOF file may be found to be truncated at the end during the Redis</span>
<span class="token comment"># startup process, when the AOF data gets loaded back into memory.</span>
<span class="token comment"># This may happen when the system where Redis is running</span>
<span class="token comment"># crashes, especially when an ext4 filesystem is mounted without the</span>
<span class="token comment"># data=ordered option (however this can't happen when Redis itself</span>
<span class="token comment"># crashes or aborts but the operating system still works correctly).</span>
<span class="token comment">#</span>
<span class="token comment"># Redis can either exit with an error when this happens, or load as much</span>
<span class="token comment"># data as possible (the default now) and start if the AOF file is found</span>
<span class="token comment"># to be truncated at the end. The following option controls this behavior.</span>
<span class="token comment">#</span>
<span class="token comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span>
<span class="token comment"># the Redis server starts emitting a log to inform the user of the event.</span>
<span class="token comment"># Otherwise if the option is set to no, the server aborts with an error</span>
<span class="token comment"># and refuses to start. When the option is set to no, the user requires</span>
<span class="token comment"># to fix the AOF file using the "redis-check-aof" utility before to restart</span>
<span class="token comment"># the server.</span>
<span class="token comment">#</span>
<span class="token comment"># Note that if the AOF file will be found to be corrupted in the middle</span>
<span class="token comment"># the server will still exit with an error. This option only applies when</span>
<span class="token comment"># Redis will try to read more data from the AOF file but not enough bytes</span>
<span class="token comment"># will be found.</span>
<span class="token key attr-name">aof-load-truncated</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span>
<span class="token comment"># AOF file for faster rewrites and recoveries. When this option is turned</span>
<span class="token comment"># on the rewritten AOF file is composed of two different stanzas:</span>
<span class="token comment">#</span>
<span class="token comment">#   [RDB file][AOF tail]</span>
<span class="token comment">#</span>
<span class="token comment"># When loading Redis recognizes that the AOF file starts with the "REDIS"</span>
<span class="token comment"># string and loads the prefixed RDB file, and continues loading the AOF</span>
<span class="token comment"># tail.</span>
<span class="token key attr-name">aof-use-rdb-preamble</span> <span class="token value attr-value">yes</span>
 
<span class="token comment">################################ LUA SCRIPTING  ###############################</span>
 
<span class="token comment"># Max execution time of a Lua script in milliseconds.</span>
<span class="token comment">#</span>
<span class="token comment"># If the maximum execution time is reached Redis will log that a script is</span>
<span class="token comment"># still in execution after the maximum allowed time and will start to</span>
<span class="token comment"># reply to queries with an error.</span>
<span class="token comment">#</span>
<span class="token comment"># When a long running script exceeds the maximum execution time only the</span>
<span class="token comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span>
<span class="token comment"># used to stop a script that did not yet called write commands. The second</span>
<span class="token comment"># is the only way to shut down the server in the case a write command was</span>
<span class="token comment"># already issued by the script but the user doesn't want to wait for the natural</span>
<span class="token comment"># termination of the script.</span>
<span class="token comment">#</span>
<span class="token comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span>
<span class="token key attr-name">lua-time-limit</span> <span class="token value attr-value">5000</span>
 
<span class="token comment">################################ REDIS CLUSTER  ###############################</span>
 
<span class="token comment"># Normal Redis instances can't be part of a Redis Cluster; only nodes that are</span>
<span class="token comment"># started as cluster nodes can. In order to start a Redis instance as a</span>
<span class="token comment"># cluster node enable the cluster support uncommenting the following:</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-enabled yes</span>
 
<span class="token comment"># Every cluster node has a cluster configuration file. This file is not</span>
<span class="token comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span>
<span class="token comment"># Every Redis Cluster node requires a different cluster configuration file.</span>
<span class="token comment"># Make sure that instances running in the same system do not have</span>
<span class="token comment"># overlapping cluster configuration file names.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-config-file nodes-6379.conf</span>
 
<span class="token comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span>
<span class="token comment"># for it to be considered in failure state.</span>
<span class="token comment"># Most other internal time limits are multiple of the node timeout.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-node-timeout 15000</span>
 
<span class="token comment"># A replica of a failing master will avoid to start a failover if its data</span>
<span class="token comment"># looks too old.</span>
<span class="token comment">#</span>
<span class="token comment"># There is no simple way for a replica to actually have an exact measure of</span>
<span class="token comment"># its "data age", so the following two checks are performed:</span>
<span class="token comment">#</span>
<span class="token comment"># 1) If there are multiple replicas able to failover, they exchange messages</span>
<span class="token comment">#    in order to try to give an advantage to the replica with the best</span>
<span class="token comment">#    replication offset (more data from the master processed).</span>
<span class="token comment">#    Replicas will try to get their rank by offset, and apply to the start</span>
<span class="token comment">#    of the failover a delay proportional to their rank.</span>
<span class="token comment">#</span>
<span class="token comment"># 2) Every single replica computes the time of the last interaction with</span>
<span class="token comment">#    its master. This can be the last ping or command received (if the master</span>
<span class="token comment">#    is still in the "connected" state), or the time that elapsed since the</span>
<span class="token comment">#    disconnection with the master (if the replication link is currently down).</span>
<span class="token comment">#    If the last interaction is too old, the replica will not try to failover</span>
<span class="token comment">#    at all.</span>
<span class="token comment">#</span>
<span class="token comment"># The point "2" can be tuned by user. Specifically a replica will not perform</span>
<span class="token comment"># the failover if, since the last interaction with the master, the time</span>
<span class="token comment"># elapsed is greater than:</span>
<span class="token comment">#</span>
<span class="token comment">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span>
<span class="token comment">#</span>
<span class="token comment"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span>
<span class="token comment"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span>
<span class="token comment"># replica will not try to failover if it was not able to talk with the master</span>
<span class="token comment"># for longer than 310 seconds.</span>
<span class="token comment">#</span>
<span class="token comment"># A large replica-validity-factor may allow replicas with too old data to failover</span>
<span class="token comment"># a master, while a too small value may prevent the cluster from being able to</span>
<span class="token comment"># elect a replica at all.</span>
<span class="token comment">#</span>
<span class="token comment"># For maximum availability, it is possible to set the replica-validity-factor</span>
<span class="token comment"># to a value of 0, which means, that replicas will always try to failover the</span>
<span class="token comment"># master regardless of the last time they interacted with the master.</span>
<span class="token comment"># (However they'll always try to apply a delay proportional to their</span>
<span class="token comment"># offset rank).</span>
<span class="token comment">#</span>
<span class="token comment"># Zero is the only value able to guarantee that when all the partitions heal</span>
<span class="token comment"># the cluster will always be able to continue.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-replica-validity-factor 10</span>
 
<span class="token comment"># Cluster replicas are able to migrate to orphaned masters, that are masters</span>
<span class="token comment"># that are left without working replicas. This improves the cluster ability</span>
<span class="token comment"># to resist to failures as otherwise an orphaned master can't be failed over</span>
<span class="token comment"># in case of failure if it has no working replicas.</span>
<span class="token comment">#</span>
<span class="token comment"># Replicas migrate to orphaned masters only if there are still at least a</span>
<span class="token comment"># given number of other working replicas for their old master. This number</span>
<span class="token comment"># is the "migration barrier". A migration barrier of 1 means that a replica</span>
<span class="token comment"># will migrate only if there is at least 1 other working replica for its master</span>
<span class="token comment"># and so forth. It usually reflects the number of replicas you want for every</span>
<span class="token comment"># master in your cluster.</span>
<span class="token comment">#</span>
<span class="token comment"># Default is 1 (replicas migrate only if their masters remain with at least</span>
<span class="token comment"># one replica). To disable migration just set it to a very large value.</span>
<span class="token comment"># A value of 0 can be set but is useful only for debugging and dangerous</span>
<span class="token comment"># in production.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-migration-barrier 1</span>
 
<span class="token comment"># By default Redis Cluster nodes stop accepting queries if they detect there</span>
<span class="token comment"># is at least an hash slot uncovered (no available node is serving it).</span>
<span class="token comment"># This way if the cluster is partially down (for example a range of hash slots</span>
<span class="token comment"># are no longer covered) all the cluster becomes, eventually, unavailable.</span>
<span class="token comment"># It automatically returns available as soon as all the slots are covered again.</span>
<span class="token comment">#</span>
<span class="token comment"># However sometimes you want the subset of the cluster which is working,</span>
<span class="token comment"># to continue to accept queries for the part of the key space that is still</span>
<span class="token comment"># covered. In order to do so, just set the cluster-require-full-coverage</span>
<span class="token comment"># option to no.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-require-full-coverage yes</span>
 
<span class="token comment"># This option, when set to yes, prevents replicas from trying to failover its</span>
<span class="token comment"># master during master failures. However the master can still perform a</span>
<span class="token comment"># manual failover, if forced to do so.</span>
<span class="token comment">#</span>
<span class="token comment"># This is useful in different scenarios, especially in the case of multiple</span>
<span class="token comment"># data center operations, where we want one side to never be promoted if not</span>
<span class="token comment"># in the case of a total DC failure.</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-replica-no-failover no</span>
 
<span class="token comment"># This option, when set to yes, allows nodes to serve read traffic while the</span>
<span class="token comment"># the cluster is in a down state, as long as it believes it owns the slots. </span>
<span class="token comment">#</span>
<span class="token comment"># This is useful for two cases.  The first case is for when an application </span>
<span class="token comment"># doesn't require consistency of data during node failures or network partitions.</span>
<span class="token comment"># One example of this is a cache, where as long as the node has the data it</span>
<span class="token comment"># should be able to serve it. </span>
<span class="token comment">#</span>
<span class="token comment"># The second use case is for configurations that don't meet the recommended  </span>
<span class="token comment"># three shards but want to enable cluster mode and scale later. A </span>
<span class="token comment"># master outage in a 1 or 2 shard configuration causes a read/write outage to the</span>
<span class="token comment"># entire cluster without this option set, with it set there is only a write outage.</span>
<span class="token comment"># Without a quorum of masters, slot ownership will not change automatically. </span>
<span class="token comment">#</span>
<span class="token comment"># cluster-allow-reads-when-down no</span>
 
<span class="token comment"># In order to setup your cluster make sure to read the documentation</span>
<span class="token comment"># available at http://redis.io web site.</span>
 
<span class="token comment">########################## CLUSTER DOCKER/NAT support  ########################</span>
 
<span class="token comment"># In certain deployments, Redis Cluster nodes address discovery fails, because</span>
<span class="token comment"># addresses are NAT-ted or because ports are forwarded (the typical case is</span>
<span class="token comment"># Docker and other containers).</span>
<span class="token comment">#</span>
<span class="token comment"># In order to make Redis Cluster working in such environments, a static</span>
<span class="token comment"># configuration where each node knows its public address is needed. The</span>
<span class="token comment"># following two options are used for this scope, and are:</span>
<span class="token comment">#</span>
<span class="token comment"># * cluster-announce-ip</span>
<span class="token comment"># * cluster-announce-port</span>
<span class="token comment"># * cluster-announce-bus-port</span>
<span class="token comment">#</span>
<span class="token comment"># Each instruct the node about its address, client port, and cluster message</span>
<span class="token comment"># bus port. The information is then published in the header of the bus packets</span>
<span class="token comment"># so that other nodes will be able to correctly map the address of the node</span>
<span class="token comment"># publishing the information.</span>
<span class="token comment">#</span>
<span class="token comment"># If the above options are not used, the normal Redis Cluster auto-detection</span>
<span class="token comment"># will be used instead.</span>
<span class="token comment">#</span>
<span class="token comment"># Note that when remapped, the bus port may not be at the fixed offset of</span>
<span class="token comment"># clients port + 10000, so you can specify any port and bus-port depending</span>
<span class="token comment"># on how they get remapped. If the bus-port is not set, a fixed offset of</span>
<span class="token comment"># 10000 will be used as usually.</span>
<span class="token comment">#</span>
<span class="token comment"># Example:</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-announce-ip 10.1.1.5</span>
<span class="token comment"># cluster-announce-port 6379</span>
<span class="token comment"># cluster-announce-bus-port 6380</span>
 
<span class="token comment">################################## SLOW LOG ###################################</span>
 
<span class="token comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span>
<span class="token comment"># execution time. The execution time does not include the I/O operations</span>
<span class="token comment"># like talking with the client, sending the reply and so forth,</span>
<span class="token comment"># but just the time needed to actually execute the command (this is the only</span>
<span class="token comment"># stage of command execution where the thread is blocked and can not serve</span>
<span class="token comment"># other requests in the meantime).</span>
<span class="token comment">#</span>
<span class="token comment"># You can configure the slow log with two parameters: one tells Redis</span>
<span class="token comment"># what is the execution time, in microseconds, to exceed in order for the</span>
<span class="token comment"># command to get logged, and the other parameter is the length of the</span>
<span class="token comment"># slow log. When a new command is logged the oldest one is removed from the</span>
<span class="token comment"># queue of logged commands.</span>
 
<span class="token comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span>
<span class="token comment"># to one second. Note that a negative number disables the slow log, while</span>
<span class="token comment"># a value of zero forces the logging of every command.</span>
<span class="token key attr-name">slowlog-log-slower-than</span> <span class="token value attr-value">10000</span>
 
<span class="token comment"># There is no limit to this length. Just be aware that it will consume memory.</span>
<span class="token comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span>
<span class="token key attr-name">slowlog-max-len</span> <span class="token value attr-value">128</span>
 
 
<span class="token comment"># By default latency monitoring is disabled since it is mostly not needed</span>
<span class="token comment"># if you don't have latency issues, and collecting data has a performance</span>
<span class="token comment"># impact, that while very small, can be measured under big load. Latency</span>
<span class="token comment"># monitoring can easily be enabled at runtime using the command</span>
<span class="token comment"># "CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" if needed.</span>
<span class="token key attr-name">latency-monitor-threshold</span> <span class="token value attr-value">0</span>
 
<span class="token comment">#  By default all notifications are disabled because most users don't need</span>
<span class="token comment">#  this feature and the feature has some overhead. Note that if you don't</span>
<span class="token comment">#  specify at least one of K or E, no events will be delivered.</span>
<span class="token key attr-name">notify-keyspace-events</span> <span class="token value attr-value">""</span>
 
 
 
<span class="token comment">############################### ADVANCED CONFIG ###############################</span>
 
<span class="token comment"># Hashes are encoded using a memory efficient data structure when they have a</span>
<span class="token comment"># small number of entries, and the biggest entry does not exceed a given</span>
<span class="token comment"># threshold. These thresholds can be configured using the following directives.</span>
<span class="token key attr-name">hash-max-ziplist-entries</span> <span class="token value attr-value">512</span>
<span class="token key attr-name">hash-max-ziplist-value</span> <span class="token value attr-value">64</span>
 
<span class="token comment"># Lists are also encoded in a special way to save a lot of space.</span>
<span class="token comment"># The number of entries allowed per internal list node can be specified</span>
<span class="token comment"># as a fixed maximum size or a maximum number of elements.</span>
<span class="token comment"># For a fixed maximum size, use -5 through -1, meaning:</span>
<span class="token comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span>
<span class="token comment"># -4: max size: 32 Kb  &lt;-- not recommended</span>
<span class="token comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span>
<span class="token comment"># -2: max size: 8 Kb   &lt;-- good</span>
<span class="token comment"># -1: max size: 4 Kb   &lt;-- good</span>
<span class="token comment"># Positive numbers mean store up to _exactly_ that number of elements</span>
<span class="token comment"># per list node.</span>
<span class="token comment"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span>
<span class="token comment"># but if your use case is unique, adjust the settings as necessary.</span>
<span class="token key attr-name">list-max-ziplist-size</span> <span class="token value attr-value">-2</span>
 
<span class="token comment"># Lists may also be compressed.</span>
<span class="token comment"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span>
<span class="token comment"># the list to *exclude* from compression.  The head and tail of the list</span>
<span class="token comment"># are always uncompressed for fast push/pop operations.  Settings are:</span>
<span class="token comment"># 0: disable all list compression</span>
<span class="token comment"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span>
<span class="token comment">#    going from either the head or tail"</span>
<span class="token comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span>
<span class="token comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span>
<span class="token comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span>
<span class="token comment">#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span>
<span class="token comment">#    but compress all nodes between them.</span>
<span class="token comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span>
<span class="token comment"># etc.</span>
<span class="token key attr-name">list-compress-depth</span> <span class="token value attr-value">0</span>
 
<span class="token comment"># Sets have a special encoding in just one case: when a set is composed</span>
<span class="token comment"># of just strings that happen to be integers in radix 10 in the range</span>
<span class="token comment"># of 64 bit signed integers.</span>
<span class="token comment"># The following configuration setting sets the limit in the size of the</span>
<span class="token comment"># set in order to use this special memory saving encoding.</span>
<span class="token key attr-name">set-max-intset-entries</span> <span class="token value attr-value">512</span>
 
<span class="token comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span>
<span class="token comment"># order to save a lot of space. This encoding is only used when the length and</span>
<span class="token comment"># elements of a sorted set are below the following limits:</span>
<span class="token key attr-name">zset-max-ziplist-entries</span> <span class="token value attr-value">128</span>
<span class="token key attr-name">zset-max-ziplist-value</span> <span class="token value attr-value">64</span>
 
<span class="token comment"># The suggested value is ~ 3000 in order to have the benefits of</span>
<span class="token comment"># the space efficient encoding without slowing down too much PFADD,</span>
<span class="token comment"># which is O(N) with the sparse encoding. The value can be raised to</span>
<span class="token comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span>
<span class="token comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span>
<span class="token key attr-name">hll-sparse-max-bytes</span> <span class="token value attr-value">3000</span>
 
<span class="token comment"># Streams macro node max size / items. The stream data structure is a radix</span>
<span class="token comment"># tree of big nodes that encode multiple items inside. Using this configuration</span>
<span class="token comment"># it is possible to configure how big a single node can be in bytes, and the</span>
<span class="token comment"># maximum number of items it may contain before switching to a new node when</span>
<span class="token comment"># appending new stream entries. If any of the following settings are set to</span>
<span class="token comment"># zero, the limit is ignored, so for instance it is possible to set just a</span>
<span class="token comment"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span>
<span class="token comment"># value.</span>
<span class="token key attr-name">stream-node-max-bytes</span> <span class="token value attr-value">4096</span>
<span class="token key attr-name">stream-node-max-entries</span> <span class="token value attr-value">100</span>
 
 
<span class="token comment"># use "activerehashing yes" if you don't have such hard requirements but</span>
<span class="token comment"># want to free memory asap when possible.</span>
<span class="token key attr-name">activerehashing</span> <span class="token value attr-value">yes</span>
 
 
<span class="token comment"># Instead there is a default limit for pubsub and replica clients, since</span>
<span class="token comment"># subscribers and replicas receive data in a push fashion.</span>
<span class="token comment">#</span>
<span class="token comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">normal 0 0 0</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">replica 256mb 64mb 60</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">pubsub 32mb 8mb 60</span>
 
<span class="token comment"># Client query buffers accumulate new commands. They are limited to a fixed</span>
<span class="token comment"># amount by default in order to avoid that a protocol desynchronization (for</span>
<span class="token comment"># instance due to a bug in the client) will lead to unbound memory usage in</span>
<span class="token comment"># the query buffer. However you can configure it here if you have very special</span>
<span class="token comment"># needs, such us huge multi/exec requests or alike.</span>
<span class="token comment">#</span>
<span class="token comment"># client-query-buffer-limit 1gb</span>
 
<span class="token comment"># In the Redis protocol, bulk requests, that are, elements representing single</span>
<span class="token comment"># strings, are normally limited ot 512 mb. However you can change this limit</span>
<span class="token comment"># here.</span>
<span class="token comment">#</span>
<span class="token comment"># proto-max-bulk-len 512mb</span>
 
 
<span class="token comment"># The range is between 1 and 500, however a value over 100 is usually not</span>
<span class="token comment"># a good idea. Most users should use the default of 10 and raise this up to</span>
<span class="token comment"># 100 only in environments where very low latency is required.</span>
<span class="token key attr-name">hz</span> <span class="token value attr-value">10</span>
 
 
<span class="token comment"># When dynamic HZ is enabled, the actual configured HZ will be used</span>
<span class="token comment"># as a baseline, but multiples of the configured HZ value will be actually</span>
<span class="token comment"># used as needed once more clients are connected. In this way an idle</span>
<span class="token comment"># instance will use very little CPU time while a busy instance will be</span>
<span class="token comment"># more responsive.</span>
<span class="token key attr-name">dynamic-hz</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># When a child rewrites the AOF file, if the following option is enabled</span>
<span class="token comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span>
<span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span>
<span class="token comment"># big latency spikes.</span>
<span class="token key attr-name">aof-rewrite-incremental-fsync</span> <span class="token value attr-value">yes</span>
 
<span class="token comment"># When redis saves RDB file, if the following option is enabled</span>
<span class="token comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span>
<span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span>
<span class="token comment"># big latency spikes.</span>
<span class="token key attr-name">rdb-save-incremental-fsync</span> <span class="token value attr-value">yes</span>
 
 
 
<span class="token comment"># Jemalloc background thread for purging will be enabled by default</span>
<span class="token key attr-name">jemalloc-bg-thread</span> <span class="token value attr-value">yes</span>
 
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">
docker run -p 6379:6379 --name redis6 \
--net mynet --ip 172.172.0.10 \
-v /root/dockerdata/redis6/redis.conf:/etc/redis/redis.conf \
-v /root/dockerdata/redis6/data:/data \
-d redis:6.2.6 redis-server /etc/redis/redis.conf --appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装方式二"><a href="#安装方式二" class="headerlink" title="安装方式二"></a>安装方式二</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">version: "3"
services:
  redis:
    image: redis:6.0.6
    container_name: myRedis
    restart: always
    ports:
      - 6380:6379
    volumes:
      - /var/redis/data:/data:rw
      - /usr/local/redis/redis.conf:/etc/redis/redis.conf:rw
    command:
      redis-server /etc/redis/redis.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 启动 WARNING：IPv4 forwarding is disabled. Networking will not work.</title>
    <url>/post/f745277d.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Centos 7 docker 启动了一个web服务 但是启动时 报：</p>
<pre class="line-numbers language-none"><code class="language-none">WARNING: IPv4 forwarding is disabled. Networking will not work.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h5 id="用VIM编辑配置文件"><a href="#用VIM编辑配置文件" class="headerlink" title="用VIM编辑配置文件"></a>用VIM编辑配置文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="添加如下代码"><a href="#添加如下代码" class="headerlink" title="添加如下代码"></a>添加如下代码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">net.ipv4.ip_forward</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="重启network服务"><a href="#重启network服务" class="headerlink" title="重启network服务"></a>重启network服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart network
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="查看是否修改成功"><a href="#查看是否修改成功" class="headerlink" title="查看是否修改成功"></a>查看是否修改成功</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@studyCMachine aaaaaaa<span class="token punctuation">]</span><span class="token comment"># sysctl net.ipv4.ip_forward</span>
net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<p><code>完成以后，删除错误的容器，再次创建新容器，就OK了。</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux编译部署LNMP环境</title>
    <url>/post/7eb6696d.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Lnmp架构<br>  Lnmp(web应用软件组合)<br>  Linux+Nginx+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。</p>
<p>  LAMP的架构以及通信过程<br>  Lnmp是一个cs架构的平台（client/server架构， 即客户端/服务器架构)，web客户端基于TCP/IP通过http协议发起传送这个请求可能是动态的也可能是静态的，所有的服务器通过发起请求的后缀来判断，如果是静态的就由web服务器自己处理，然后将资源发给客户端。如果请求是动态的这时web服务器会通过FSATCGI协议发给php，通过php模块去MySQL拿数据在通过Nginx交给客户端。</p>
<span id="more"></span>

<h3 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment">#安装依赖</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++ <span class="token function">make</span> zlib zlib-devel pcre pcre-devel libjpeg libjpeg-devel libpng libpng-devel freetypefreetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel <span class="token function">bzip2</span> bzip2-devel ncurses ncurses-devel <span class="token function">curl</span> curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers libxslt libxslt-devel  oniguruma oniguruma-devel sqlite-devel
<span class="token comment">#下载编译包</span>
<span class="token function">wget</span> http://nginx.org/download/nginx-1.18.0.tar.gz
<span class="token function">tar</span> xvf nginx-1.18.0.tar.gz
<span class="token comment">#提前创建文件夹</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/nginx/tmp/nginx/client/
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  /usr/local/nginx
<span class="token comment">#创建用户</span>
<span class="token function">useradd</span> <span class="token parameter variable">-s</span> /sbin/nologin nginx <span class="token parameter variable">-M</span>
<span class="token comment">#进入目录编译</span>
<span class="token builtin class-name">cd</span> nginx-1.18.0/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx/nginx --sbin-path<span class="token operator">=</span>/usr/local/nginx/sbin/nginx/nginx --conf-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.conf --error-log-path<span class="token operator">=</span>/usr/local/nginx/log/error.log --http-log-path<span class="token operator">=</span>/usr/local/nginx/log/access.log --pid-path<span class="token operator">=</span>/usr/local/nginx/run/nginx/nginx.pid --lock-path<span class="token operator">=</span>/usr/local/nginx/lock/nginx.lock <span class="token parameter variable">--user</span><span class="token operator">=</span>nginx <span class="token parameter variable">--group</span><span class="token operator">=</span>nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/tmp/nginx/client/ --http-proxy-temp-path<span class="token operator">=</span>/usr/local/nginx/tmp/nginx/proxy/ --http-fastcgi-temp-path<span class="token operator">=</span>/usr/local/nginx/tmp/nginx/fcgi/ --http-uwsgi-temp-path<span class="token operator">=</span>/usr/local/nginx/tmp/nginx/uwsgi --http-scgi-temp-path<span class="token operator">=</span>/usr/local/nginx/tmp/nginx/scgi --with-pcre
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token comment">#配置环境</span>
<span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/nginx
<span class="token builtin class-name">echo</span> <span class="token string">"PATH=<span class="token environment constant">$PWD</span>:\<span class="token environment constant">$PATH</span>"</span> <span class="token operator">&gt;</span> /etc/profile.d/nginx.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  注意通过我的命令编译的目录结构如下，大家可以对比一下，然后酌情处理目录哈</p>
<h3 id="2-安装PHP"><a href="#2-安装PHP" class="headerlink" title="2. 安装PHP"></a>2. 安装PHP</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载编译包</span>
<span class="token function">wget</span> http://mirrors.sohu.com/php/php-8.0.0.tar.gz
<span class="token function">tar</span> xvf php-8.0.0.tar.gz
<span class="token builtin class-name">cd</span> php-8.0.0/
<span class="token comment">#编译</span>
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/php8 --with-curl --with-mysql-sock<span class="token operator">=</span>/var/tmp/mysql/mysql.sock --with-jpeg-dir --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libxml-dir --with-mysqli<span class="token operator">=</span>mysqlnd --with-openssl --with-pcre-regex --with-pdo-mysql<span class="token operator">=</span>mysqlnd --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --with-pdo-mysql --with-fpm-user<span class="token operator">=</span>nginx --with-fpm-group<span class="token operator">=</span>nginx --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --enable-mysqlnd --enable-maintainer-zts
 <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token comment">#配置</span>
<span class="token function">cp</span> php.ini-production /usr/local/php8/etc/php.ini
<span class="token builtin class-name">cd</span> /usr/local/php8
<span class="token builtin class-name">cd</span> /etc
<span class="token function">cp</span> php-fpm.conf.default php-fpm.conf
<span class="token builtin class-name">cd</span> php-fpm.d/
<span class="token function">cp</span> www.conf.default www.conf
<span class="token comment">#配置环境</span>
<span class="token builtin class-name">cd</span> /usr/local/php8/sbin
<span class="token builtin class-name">echo</span> <span class="token string">"PATH=<span class="token environment constant">$PWD</span>:\<span class="token environment constant">$PATH</span>"</span> <span class="token operator">&gt;</span> /etc/profile.d/php.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-配置nginx"><a href="#3-配置nginx" class="headerlink" title="3. 配置nginx"></a>3. 配置nginx</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">[root@study2 /usr/local/nginx/conf <span class="token directive"><span class="token keyword">10:31:16]#cat</span> nginx.conf
<span class="token comment">#user  nobody;</span>
worker_processes  <span class="token number">1</span></span><span class="token punctuation">;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>
<span class="token comment">#pid        logs/nginx.pid;</span>
<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>
    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>
    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>
    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>
    <span class="token comment">#access_log  logs/access.log  main;</span>
    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>
        <span class="token comment">#charset koi8-r;</span>
        <span class="token comment">#access_log  logs/host.access.log  main;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">#error_page  404              /404.html;</span>
        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment">#</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ {</span>
        <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment">#}</span>
        <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment">#</span>
        <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span>           html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">fastcgi_pass</span>   127.0.0.1:9000</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">fastcgi_index</span>  index.php</span><span class="token punctuation">;</span>
        <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
            <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment"># concurs with nginx's one</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ /\.ht {</span>
        <span class="token comment">#    deny  all;</span>
        <span class="token comment">#}</span>
    <span class="token punctuation">}</span>
    <span class="token comment"># another virtual host using mix of IP-, name-, and port-based configuration</span>
    <span class="token comment">#</span>
    <span class="token comment">#server {</span>
    <span class="token comment">#    listen       8000;</span>
    <span class="token comment">#    listen       somename:8080;</span>
    <span class="token comment">#    server_name  somename  alias  another.alias;</span>
    <span class="token comment">#    location / {</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    }</span>
    <span class="token comment">#}</span>
 <span class="token comment"># HTTPS server</span>
    <span class="token comment">#</span>
    <span class="token comment">#server {</span>
    <span class="token comment">#    listen       443 ssl;</span>
    <span class="token comment">#    server_name  localhost;</span>
    <span class="token comment">#    ssl_certificate      cert.pem;</span>
    <span class="token comment">#    ssl_certificate_key  cert.key;</span>
    <span class="token comment">#    ssl_session_cache    shared:SSL:1m;</span>
    <span class="token comment">#    ssl_session_timeout  5m;</span>
    <span class="token comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>
    <span class="token comment">#    ssl_prefer_server_ciphers  on;</span>
    <span class="token comment">#    location / {</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    }</span>
    <span class="token comment">#}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-创建探针"><a href="#4-创建探针" class="headerlink" title="4.创建探针"></a>4.创建探针</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在html下创建</span>
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">10</span>:33:52<span class="token punctuation">]</span><span class="token comment">#echo '&lt;?php phpinfo();?&gt;' &gt; index.php</span>
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">10</span>:34:19<span class="token punctuation">]</span><span class="token comment">#cat index.php</span>
<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">&gt;</span>
<span class="token comment">#启动nginx，php-fpm</span>
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">10</span>:34:21<span class="token punctuation">]</span><span class="token comment">#nginx</span>
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">10</span>:34:26<span class="token punctuation">]</span><span class="token comment">#php-fpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-安装mysql"><a href="#5-安装mysql" class="headerlink" title="5. 安装mysql"></a>5. 安装mysql</h3><p>  这里我才用的rpm包在线安装的方式。当然你也可采用二进制或者离线包安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装并启动</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> mariadb-libs mariadb-server mariadb-devel
systemctl start mariadb
<span class="token comment">#默认是没有配置账号密码的我们需要开启一下</span>
mysql_secure_installation
<span class="token comment">#输入以上命令后，输入你的命令</span>
<span class="token comment">#然后现在通过客户端连接</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-ppasswd</span>
<span class="token comment">#进入mysql后开启这个用户这个密码所有IP可以访问</span>
GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'passwd'</span> WITH GRANT OPTION<span class="token punctuation">;</span>
FLUSH   PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  通过以上数据库的一些操作已经可以远程连接了，还有一些高端的命令与设置我没说。我们的目的是让mysql可以与PHP连接哈，后续会详细说mysql的哈。</p>
<p>  然后我们用工具连接一下看一下：</p>
<p>  好了已经确定可以连接了，然后我们创建一个PHP文件，还是原来创建探针的那个目录下哈。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">11</span>:50:09<span class="token punctuation">]</span><span class="token comment">#ls</span>
50x.html  index.html  index.php  mysql.php
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">11</span>:56:42<span class="token punctuation">]</span><span class="token comment">#cat mysql.php</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>?php
<span class="token builtin class-name">echo</span> <span class="token string">"Hello World!&lt;br /&gt;"</span><span class="token punctuation">;</span>
<span class="token variable">$link</span> <span class="token operator">=</span> mysqli_connect<span class="token punctuation">(</span><span class="token string">'172.16.80.131'</span>, <span class="token string">'root'</span>, <span class="token string">'passwd'</span>, <span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
if<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"数据库连接成功&lt;br /&gt;"</span><span class="token punctuation">;</span>
<span class="token variable">$close</span><span class="token operator">=</span>mysqli_close<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
if<span class="token punctuation">(</span><span class="token variable">$close</span><span class="token punctuation">)</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"数据库关闭成功&lt;br /&gt;"</span><span class="token punctuation">;</span>
?<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
<span class="token punctuation">[</span>root@study2 /usr/local/nginx/nginx/html <span class="token number">11</span>:56:57<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装MongoDB</title>
    <url>/post/a639ff5d.html</url>
    <content><![CDATA[<h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><h4 id="获取MongoDB镜像"><a href="#获取MongoDB镜像" class="headerlink" title="获取MongoDB镜像"></a>获取MongoDB镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull mongo:5.0.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h4 id="本地创建数据库目录"><a href="#本地创建数据库目录" class="headerlink" title="本地创建数据库目录"></a>本地创建数据库目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/dockerdata/mongo/<span class="token punctuation">{</span>data,configdb,backup,logs<span class="token punctuation">}</span>

<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> /root/dockerdata/mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p>data :     数据文件<br>configdb : 配置文件<br>backup :   备份文件<br>logs :     日志文件</p>
</div>

<h4 id="创建-mongodb配置文件"><a href="#创建-mongodb配置文件" class="headerlink" title="创建 mongodb配置文件"></a>创建 mongodb配置文件</h4><p>  创建 mongo.conf配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/dockerdata/mongo/configdb
<span class="token function">vi</span> mongo.conf

port <span class="token operator">=</span> <span class="token number">27017</span>
<span class="token assign-left variable">dbpath</span><span class="token operator">=</span>/data/db
maxConns <span class="token operator">=</span> <span class="token number">10000</span>
auth <span class="token operator">=</span> <span class="token boolean">true</span>
bind_ip <span class="token operator">=</span> <span class="token number">0.0</span>.0.0
<span class="token assign-left variable">logpath</span><span class="token operator">=</span>/data/log/mongo.log
<span class="token assign-left variable">logappend</span><span class="token operator">=</span>true
objcheck <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p>注意<br>logpath: /data/log/mongo.log<br>logAppend: true<br>写入日志文件的地址是容器中的路径(不是宿主机里的地址)</p>
<p>dbpath: /data/db<br>数据库目录是容器中的路径 (不是宿主机里的地址路径)</p>
<p>port: 27037<br>bind_ip: 0.0.0.0<br>指定容器mongodb启动监听 27037 端口<br>0.0.0.0 是为了让宿主机可以访问容器的mongodb服务.</p>
<p>auth:<br>是开启账号密码登录验证方式,用井号做了注释,暂时不需要账号密码验证方式登录.</p>
</div>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d --restart=always \
--privileged=true \
-p 27017:27017 \
--net mynet --ip 172.172.0.9 \
--name mymongo \
-v /root/dockerdata/mongo/logs:/data/log/ \
-v /root/dockerdata/mongo/data:/data/db \
-v /root/dockerdata/mongo/backup:/data/backup 
-v /root/dockerdata/mongo/configdb:/data/configdb  \
-v /root/dockerdata/mongo/configdb/mongo.conf:/data/configdb/mongo.conf \
-e MONGODB_INITDB_ROOT_USERNAME=admin \
-e MONGODB_INITDB_ROOT_PASSWORD=12345678 \
-d mongo:5.0.6 --auth --bind_ip_all

<span class="token comment"># 如果想要使用配置文件启动mongodb，则执行自己的启动命令：</span>

docker run -d --restart=always \
--privileged=true \
-p 27017:27017 \
--net mynet --ip 172.172.0.9 \
--name mymongo \
-v /root/dockerdata/mongo/logs:/data/log/ \
-v /root/dockerdata/mongo/data:/data/db \
-v /root/dockerdata/mongo/backup:/data/backup 
-v /root/dockerdata/mongo/configdb:/data/configdb  \
-v /root/dockerdata/mongo/configdb/mongo.conf:/data/configdb/mongo.conf \
-e MONGODB_INITDB_ROOT_USERNAME=admin \
-e MONGODB_INITDB_ROOT_PASSWORD=12345678 \
-d mongo:5.0.6 \
mongod -f /data/configdb/mongo.conf --auth --bind_ip_all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>记住：自己的mongod启动命令是在容器内执行的，因此使用的配置文件路径是相对于容器的内部路径。</code></p>
<div class="note info no-icon"><ol>
<li><code>-v /root/dockerdata/mongo/data/db:/data/db</code> 使用卷持久化数据</li>
<li><code>-e MONGODB_INITDB_ROOT_USERNAME=admin</code>       授予超级用户权限</li>
<li><code>-e MONGODB_INITDB_ROOT_PASSWORD=leeze</code>       授予超级用户权限</li>
<li><code>-e MONGODB_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo-root-pw</code> docker inspect用于查看容器的变量时，您的密码都将不可见</li>
<li><code>-v ./mongo.conf:/etc/mongo/mongo.conf</code>       Mongo 配置文件</li>
<li><code>-e MONGODB_INITDB_DATABASE=xiaosige</code>         更改此默认数据库</li>
<li><code>--privileged</code>                                拥有真正的root权限</li>
<li><code>----restart=always</code>                          Docker服务重启容器也启动</li>
<li><code>--bind_ip_all</code>                               允许所以IP访问</li>
<li><code>--auth</code>                                     是开启权限认证</li>
<li><code>-f  /data/configdb/mongo.conf</code>             <code>容器目录下配置文件路径</code></li>
</ol>
</div>


<h4 id="创建mongoDb用户"><a href="#创建mongoDb用户" class="headerlink" title="创建mongoDb用户"></a>创建mongoDb用户</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#进入mongoDb容器，创建管理员</span>
docker exec -it mongoDb bash
<span class="token comment">#进入mongoDb</span>
mongo
&gt; use admin
switched to db admin
&gt; db.createUser({user:"admin",pwd:"123456",roles:[{role:"root",db:"admin"}]});
Successfully added user: {
	"user" : "admin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}
&gt; db.auth('admin','123456') # 认证
<span class="token comment">#出现创建成功提示就对了，退出管理员</span>
&gt; exit;
<span class="token comment">#用刚创建的管理用户登录在创建个普通用户</span>
mongo --port 27017 -u admin -p admin --authenticationDatabase admin
&gt; use test
switched to db test
&gt; db.createUser({user:"tester",pwd:"tester",roles:[{role:"readWrite",db:"test"}]});
Successfully added user: {
	"user" : "tester",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "test"
		}
	]
}
&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="mongoDb用户角色权限说明"><a href="#mongoDb用户角色权限说明" class="headerlink" title="mongoDb用户角色权限说明"></a>mongoDb用户角色权限说明</h4><div class="note info no-icon"><ul>
<li>数据库用户角色 <code>read</code>、<code>readWrite</code></li>
<li>数据库管理角色 <code>dbAdmin</code>、<code>dbOwner</code>、<code>userAdmin</code></li>
<li>集群管理角色 <code>clusterAdmin</code>、<code>clusterManager</code>、<code>clusterMonitor</code>、 <code>hostManager</code></li>
<li>备份恢复角色 <code>backup</code>、<code>restore</code></li>
<li>所有数据库角色 <code>readAnyDatabase</code>、<code>readWriteAnyDatabase</code>、<code>userAdminAnyDatabase</code>、<code>dbAdminAnyDatabase</code></li>
<li>超级用户角色 <code>root</code></li>
<li>内部角色 <code>__system</code></li>
</ul>
</div>

<p>  角色说明</p>
<div class="note info no-icon"><ul>
<li><code>Read</code> 允许用户读取指定数据库</li>
<li><code>readWrite</code> 允许用户读写指定数据库</li>
<li><code>dbAdmin</code> 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li>
<li><code>userAdmin</code> 允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li>
<li><code>clusterAdmin</code> 只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</li>
<li><code>readAnyDatabase</code> 只在admin数据库中可用，赋予用户所有数据库的读权限</li>
<li><code>readWriteAnyDatabase</code> 只在admin数据库中可用，赋予用户所有数据库的读写权限</li>
<li><code>userAdminAnyDatabase</code> 只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</li>
<li><code>dbAdminAnyDatabase</code> 只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</li>
<li><code>root</code> 只在admin数据库中可用。超级账号，超级权限</li>
</ul>
</div>
<p>  至此mongoDb数据库据安装好了，可以愉快的玩耍使用了</p>
<h3 id="mongodb副本集"><a href="#mongodb副本集" class="headerlink" title="mongodb副本集"></a>mongodb副本集</h3><p>  一个最小的副本集为3个成员，包括主节点，备节点和仲裁节点，如果没有仲裁节点，备节点是不会自动升级为主节点的。</p>
<h4 id="创建mongodb节点"><a href="#创建mongodb节点" class="headerlink" title="创建mongodb节点"></a>创建mongodb节点</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 创建一个网络</span>
docker network create tms

docker run --name m1 -p 27001:27017  --network tms --network-alias m1 -d mongo:5.0.6 --replSet mset --bind_ip 0.0.0.0
docker run --name m2 -p 27002:27017  --network tms --network-alias m2 -d mongo:5.0.6 --replSet mset --bind_ip 0.0.0.0
docker run --name m3 -p 27003:27017  --network tms --network-alias m3 -d mongo:5.0.6 --replSet mset --bind_ip 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>注意一定要将bind_ip设置成不是只有本地访问，否则副本集不能初始化成功。</code></p>
<h4 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rs.initiate<span class="token punctuation">(</span><span class="token punctuation">{</span> _id:<span class="token string">"mset"</span>, members:<span class="token punctuation">[</span>
<span class="token punctuation">{</span>_id:0,host:<span class="token string">"m1:27017"</span>,priority:2<span class="token punctuation">}</span>, <span class="token punctuation">{</span>_id:1,host:<span class="token string">"m2:27017"</span>,priority:1<span class="token punctuation">}</span>, <span class="token punctuation">{</span>_id:2,host:<span class="token string">"m3:27017"</span>,arbiterOnly:true<span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
priority：设置优先级，数字越大优先级越高，优先级最高的是主节点

rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 查看状态</span>

<span class="token comment"># 默认备份节点不能读写，可以设置</span>
rs.slaveOk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 增加节点，需要进入主节点执行</span>
rs.add<span class="token punctuation">(</span><span class="token string">'ip:port'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">use admin
db.createUser({ 
    user:'admin',
    pwd:'123456',
    roles:[{role:'root',db:'admin'}],
})

db.auth('admin','123456') <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="开启认证"><a href="#开启认证" class="headerlink" title="开启认证"></a>开启认证</h4><p>  如果需要开启认证，使用ssl的keyfile文件作为认证文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl rand <span class="token parameter variable">-base64</span> <span class="token number">666</span> <span class="token operator">&gt;</span> mongodb.key <span class="token comment"># 生成认证文件</span>
<span class="token function">chmod</span> <span class="token number">600</span> mongodb.key <span class="token comment"># 设置执行权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>设置配置文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /mnt/mongodb/mconf/mongod.conf</span>
net:
  port: <span class="token number">27017</span>
  bindIp: <span class="token number">0.0</span>.0.0

systemLog:
  logAppend: <span class="token boolean">true</span>

processManagement:
  fork: <span class="token boolean">false</span>

security:
  keyFile: <span class="token string">"/data/configdb/mongodb.key"</span>
  clusterAuthMode: <span class="token string">"keyFile"</span>
  authorization: <span class="token string">"enabled"</span>

replication:
  replSetName: <span class="token string">"mset"</span>
  secondaryIndexPrefetch: <span class="token string">"all"</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启动容器<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> m1 <span class="token parameter variable">-p</span> <span class="token number">27001</span>:27017 <span class="token parameter variable">-v</span> /mnt/mongodb/mconf:/data/configdb <span class="token parameter variable">--network</span> tms --network-alias m1 <span class="token parameter variable">-d</span> mongo:5.0.6 mongod <span class="token parameter variable">-f</span> /data/configdb/mongod.conf
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> m2 <span class="token parameter variable">-p</span> <span class="token number">27002</span>:27017 <span class="token parameter variable">-v</span> /mnt/mongodb/mconf:/data/configdb <span class="token parameter variable">--network</span> tms --network-alias m2 <span class="token parameter variable">-d</span> mongo:5.0.6 mongod <span class="token parameter variable">-f</span> /data/configdb/mongod.conf
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> m3 <span class="token parameter variable">-p</span> <span class="token number">27003</span>:27017 <span class="token parameter variable">-v</span> /mnt/mongodb/mconf:/data/configdb <span class="token parameter variable">--network</span> tms --network-alias m3 <span class="token parameter variable">-d</span> mongo:5.0.6 mongod <span class="token parameter variable">-f</span> /data/configdb/mongod.conf
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p><code>mongodb://10.211.55.81:27017</code><br><code>mongodb://leeze:leeze@10.211.55.81:27017/?authSource=flux</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源 </span>
<span class="token function">apt-get</span> update 
<span class="token comment"># 安装 </span>
<span class="token function">vim</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> 
<span class="token comment"># 修改 mongo 配置文件 </span>
<span class="token function">vim</span> /etc/mongod.conf.orig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><div class="note success no-icon"><p><a href="https://www.cnblogs.com/cwp-bg/p/10403327.html">docker之安装和管理mongodb </a><br><a href="https://www.cnblogs.com/smiler/p/10112676.html">Docker搭建MongoDB</a><br><a href="https://cloud.tencent.com/developer/article/1409001">docker安装mongodb并备份</a><br><a href="https://www.cnblogs.com/caibao666/p/12575569.html">docker配置搭建mongo复制集 </a></p>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装Nginx</title>
    <url>/post/6ef4601f.html</url>
    <content><![CDATA[<img data-src="/post/6ef4601f/nginx.png" style="height:260px;width:100%;box-shadow:none!important;">

<span id="more"></span>

<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull nginx:1.22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/docker/nginx/<span class="token punctuation">{</span>www,logs,conf<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -p 80:80 --name nginx \
-v /root/docker/nginx/html:/usr/share/nginx/html \
-v /root/docker/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /root/docker/nginx/conf.d:/etc/nginx/conf.d \
-v /root/docker/nginx/logs:/var/log/nginx \
-d nginx:1.22
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="复制Nginx配置"><a href="#复制Nginx配置" class="headerlink" title="复制Nginx配置"></a>复制Nginx配置</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker cp nginx:/etc/nginx/nginx.conf /root/docker/nginx/conf
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="在www目录下创建index-html"><a href="#在www目录下创建index-html" class="headerlink" title="在www目录下创建index.html"></a>在<code>www</code>目录下创建index.html</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>docker搭建nginx<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>docker搭建nginx映射成功<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>test<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Docker-compose-yaml"><a href="#Docker-compose-yaml" class="headerlink" title="Docker-compose.yaml"></a>Docker-compose.yaml</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">"3.9"</span>
    
services:
  web:
    image: nginx:1.22
    container_name: nginx
    restart: always
    ports: 
    	- <span class="token number">80</span>:80
    volumes:
      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
    
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Docker容器内无法解析DNS的问题</title>
    <url>/post/3458217c.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>  最近Docker上重装Nexus3，<code>一直报错 UnknownHostException: rhc.sonatype.com </code> (在另一个场景中报 NoRouteToHostException: No route to host )</p>
<span id="more"></span>

<p>  于是在docker中启动了一个centos镜像用于测试 <code>ping www.baidu.com</code>.<br>  几乎试遍了能找到的所有方法，包括“修改DNS”，“修改Docker配置”，“关闭防火墙”，“禁用virbr0网络连接”等，全部无效。 无意中发现直接ping ip地址居然可以ping通，确定问题发生在DNS解析上，并猜测多半还是跟防火墙有关。于是改用关键字docker dns 防火墙进行搜索。于是找到了如下方法。</p>
<ul>
<li>注：Docker 容器默认网络模式为bridge</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>注：以下指令均在宿主Linux系统中运行，而非容器中</li>
</ul>
<ol>
<li>方法1. 关闭防火墙(不推荐)<br>  关闭防火墙后需重启docker，否则会报错<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>方法2. 宿主机防火墙开启伪装IP功能<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// https://www.cnblogs.com/architectforest/p/12389218.html
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-masquerade <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span>
systemctl restart firewalld
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  还看到另一个方法，未测试有效性，先放在这里<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// https://blog.csdn.net/mostone/article/details/105815866
// 将网络接口 docker0 加入 trusted zone
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --add-interface<span class="token operator">=</span>docker0

firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --change-interface<span class="token operator">=</span>br-d2aa50162455<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>方法3. 通过host模式启动容器<br>  这是最简单的方法，容器启动即可直接访问外网，但是无法指定容器对外暴漏的端口，将使用默认端口。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--net</span><span class="token operator">=</span>host centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<br>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li>今天部署docker又发现一个网络的问题，程序中给出的错误是<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java.net.NoRouteToHostException: Host is unreachable <span class="token punctuation">(</span>Host unreachable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  在docker容器内ping宿主ip，可以ping通。 wget读取宿主8080端口（有效的）失败，提示<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget: can't connect to remote <span class="token function">host</span> <span class="token builtin class-name">:</span> Host is unreachable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  又尝试wget读取baidu.com成功。所有十有八九问题又出在宿主防火墙上了。 解决方法：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --add-rich-rule<span class="token operator">=</span><span class="token string">'rule family=ipv4 source address=172.20.0.0/16 accept'</span> <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span>
systemctl restart firewalld
// 验证规则是否添加成功
firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  address对应docker容器的ip网段，如果没有添加–permanent防火墙重启后会失效（被坑了好几次）</li>
<li>VMware和Docker容器无法ping通宿主（win10）<br>  方法1、宿主关闭防火墙<br>  方法2、宿主打开防火墙高级设置（或直接搜索“高级安全 Windows Defender 防火墙”）-入站规则 启用规则“文件和打印机共享(回显请求 - ICMPv4-In)”</li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7/8 firewall 和 docker 冲突解决</title>
    <url>/post/76a6f1b6.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><div class="note success no-icon"><p>  centos7/8 自带防火墙是firewalld。firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 Docker 产生冲突。当 firewalld 启动或者重启的时候，将会从 iptables 中移除 DOCKER 的规则，从而影响了 Docker 的正常工作。当你使用的是 Systemd 的时候， firewalld 会在 Docker 之前启动，但是如果你在 Docker 启动之后再启动 或者重启 firewalld ，你就需要重启 Docker 进程了。</p>
</div>

<span id="more"></span>

<h3 id="docker-网络模式"><a href="#docker-网络模式" class="headerlink" title="docker 网络模式"></a>docker 网络模式</h3><div class="note info no-icon"><blockquote>
<p>docker 有4种网络模式 ：</p>
</blockquote>
<ol>
<li>bridge模式（默认）：网桥模式，通过虚拟网桥使容器通信。容器有自己的独立ip和端口。</li>
<li>host模式：主机模式，与主机共用一个网络，容器ip是主机的ip，端口占用主机的端口范围。</li>
<li>container模式：与指定容器共享一个网络，类似host模式，但是是两个容器间共用一个ip。</li>
<li>none模式：无网络模式，容器有自己的内部网络，但是没有分配ip，路由等信息，需要自己分配。</li>
</ol>
</div>

<p>  默认是bridge 网桥模式，docker会在宿住机配置一个虚拟网卡，并将容器连接到该网卡，而docker网络与宿住机外部网络的通信，是借助nat来实现的。所以当Iptable出现问题时，就会导致docker容器网络异常centos7 自带防火墙是firewalld。在某下情况下可能导致docker 的某些网络问题。</p>
<h3 id="查看-firewalld-日志"><a href="#查看-firewalld-日志" class="headerlink" title="查看 firewalld 日志"></a>查看 firewalld 日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-10</span> /var/log/firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在日志中可以看到一些警告信息，是docker添加的nat规则，但是因为chain不存在，所以添加失败。一般情况下是没有什么问题，但是某些情况，比如容器内需要访问宿住机的服务，则可能出现问题。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2021</span>-12-08 <span class="token number">17</span>:21:43 WARNING: COMMAND_FAILED: <span class="token string">'/usr/sbin/iptables -w10 -t filter -X DOCKER-ISOLATION'</span> failed: iptables: No chain/target/match by that name.
 
<span class="token number">2021</span>-12-08 <span class="token number">17</span>:21:43 WARNING: COMMAND_FAILED: <span class="token string">'/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o docker0 -j DROP'</span> failed: iptables: Bad rule <span class="token punctuation">(</span>does a matching rule exist <span class="token keyword">in</span> that chain?<span class="token punctuation">)</span>.
 
<span class="token number">2021</span>-12-08 <span class="token number">17</span>:21:43 WARNING: COMMAND_FAILED: <span class="token string">'/usr/sbin/iptables -w10 -D FORWARD -i br-7407bd71b6f0 -o br-7407bd71b6f0 -j DROP'</span> failed: iptables: Bad rule <span class="token punctuation">(</span>does a matching rule exist <span class="token keyword">in</span> that chain?<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol>
<li>将firewalld换成iptables（推荐）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看firewalld是否启用</span>
systemctl status firewalld
<span class="token comment">#停止firewalld</span>
systemctl stop firewalld
<span class="token comment">#禁用firewalld（否则重启系统后会再次启动）</span>
systemctl disable firewalld
<span class="token comment">#查看是否安装iptables</span>
yum list installed <span class="token operator">|</span> <span class="token function">grep</span> iptables-services
<span class="token comment">#如果没安装则安装下</span>
yum <span class="token function">install</span> iptables-services <span class="token parameter variable">-y</span>
<span class="token comment">#重启iptables</span>
systemctl restart iptables
<span class="token comment">#设置开机自启</span>
systemctl <span class="token builtin class-name">enable</span> iptables
<span class="token comment">#重启docker</span>
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>关闭防火墙(不推荐)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看firewalld是否启用</span>
systemctl status firewalld
<span class="token comment">#停止firewalld</span>
systemctl stop firewalld
<span class="token comment">#禁用firewalld（否则重启系统后会再次启动）</span>
systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改<code>daemon.json</code><br>  在 <code>/etc/docker/daemon.json</code> 文件中添加<code> "iptables": false</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>
    <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span>,
        <span class="token string">"iptables"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
  然后:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>修改<code>docker.service</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /usr/lib/systemd/system/docker.service

<span class="token comment"># 找到 ExecStart=/usr/bin/dockerd -H tcp://127.0.0.1:2375 -H unix://var/run/docker.sock 在中间添加 --iptables=false</span>

<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">--iptables</span><span class="token operator">=</span>false <span class="token parameter variable">-H</span> tcp://127.0.0.1:2375 <span class="token parameter variable">-H</span> unix://var/run/docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  然后:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<p><a href="https://www.h3399.cn/202008/779160.html">解 docker 容器端口绕过 firewall,centos7 的防火墙不能控制 docker 容器端口的问题</a><br><a href="https://www.hm1006.cn/archives/centos7firewall-docker">Centos7 firewall 和 docker冲突解决</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile构建基础镜像为alpine的jdk1.8镜像</title>
    <url>/post/a90d146c.html</url>
    <content><![CDATA[<h3 id="新建dockerfile目录"><a href="#新建dockerfile目录" class="headerlink" title="新建dockerfile目录"></a>新建<code>dockerfile</code>目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/mydockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h3 id="拉取alpine镜像"><a href="#拉取alpine镜像" class="headerlink" title="拉取alpine镜像"></a>拉取<code>alpine</code>镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull alpine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="编写dockerfile-alpine-jdk1-8文件"><a href="#编写dockerfile-alpine-jdk1-8文件" class="headerlink" title="编写dockerfile-alpine-jdk1.8文件"></a>编写<code>dockerfile-alpine-jdk1.8</code>文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/mydockerfile

<span class="token function">vim</span> dockerfile-alpine-jdk18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> alpine:latest</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> xiaosige <span class="token string">"leeze0216@163.com"</span></span>

<span class="token comment">#更换aline源</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"http://mirrors.aliyun.com/alpine/latest-stable/community"</span> &gt; /etc/apk/repositories</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"http://mirrors.aliyun.com/alpine/latest-stable/main"</span> &gt;&gt; /etc/apk/repositories</span>

<span class="token comment">#update apk</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk update &amp;&amp; apk upgrade</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add ca-certificates</span>

<span class="token comment"># bash vim wget curl net-tools</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add bash bash-doc bash-completion</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add vim wget curl net-tools</span>
<span class="token instruction"><span class="token keyword">RUN</span> rm -rf /var/cache/apk/*</span>
<span class="token instruction"><span class="token keyword">RUN</span> /bin/bash</span>

<span class="token comment"># setup glibc</span>
<span class="token comment">#RUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-2.34-r0.apk</span>
<span class="token comment">#RUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-bin-2.34-r0.apk</span>
<span class="token comment">#RUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-i18n-2.34-r0.apk</span>
<span class="token comment">#RUN wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.32-r0/glibc-dev-2.34-r0.apk</span>
<span class="token comment"># glibc安装包如果从网络下载速度实在是太慢了，先提前下载复制到镜像中</span>
<span class="token instruction"><span class="token keyword">COPY</span> glibc-2.34-r0.apk .</span>
<span class="token instruction"><span class="token keyword">COPY</span> glibc-bin-2.34-r0.apk .</span>
<span class="token instruction"><span class="token keyword">COPY</span> glibc-dev-2.34-r0.apk .</span>
<span class="token instruction"><span class="token keyword">COPY</span> glibc-i18n-2.34-r0.apk .</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add glibc-2.34-r0.apk</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add glibc-bin-2.34-r0.apk</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add glibc-dev-2.34-r0.apk</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add glibc-i18n-2.34-r0.apk</span>
<span class="token instruction"><span class="token keyword">RUN</span> rm -rf *.apk</span>

<span class="token comment">#setup date</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add tzdata</span>
<span class="token instruction"><span class="token keyword">RUN</span> cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span>

<span class="token comment">#setup language 解决中文乱码</span>
<span class="token instruction"><span class="token keyword">RUN</span> /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8</span>
<span class="token instruction"><span class="token keyword">ENV</span> LANG=en_US.UTF-8</span>

<span class="token comment"># 添加alias ll='ls -al'</span>
<span class="token instruction"><span class="token keyword">ADD</span> ./ll /bin/ll</span>
<span class="token instruction"><span class="token keyword">RUN</span> chmod 777 /bin/ll</span>

<span class="token comment">#copy jdk-8u311-linux-x64.tar.gz</span>
<span class="token instruction"><span class="token keyword">ADD</span> jdk-8u311-linux-x64.tar.gz /usr/local</span>

<span class="token comment">#setup java env</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=/usr/local/jdk1.8.0_311</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:.:<span class="token variable">$JAVA_HOME</span>/bin</span>
<span class="token instruction"><span class="token keyword">ENV</span> CALSSPATH=<span class="token variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker build -f dockerfile-alpine-jdk18 -t xiaosige/alpine-jdk:1.0.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige mydockerfile<span class="token punctuation">]</span><span class="token comment"># docker build -f dockerfile-alpine-jdk18 -t xiaosige/alpine-jdk:1.0.0 .</span>
Sending build context to Docker daemon  <span class="token number">173</span>.6MB
Step <span class="token number">1</span>/30 <span class="token builtin class-name">:</span> FROM alpine:latest
 ---<span class="token operator">&gt;</span> 14119a10abf4
Step <span class="token number">2</span>/30 <span class="token builtin class-name">:</span> MAINTAINER xiaosige <span class="token string">"leeze0216@163.com"</span>
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 1ca7e3fe8cd4
Removing intermediate container 1ca7e3fe8cd4
 ---<span class="token operator">&gt;</span> a12b929884c6
Step <span class="token number">3</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token builtin class-name">echo</span> <span class="token string">"http://mirrors.aliyun.com/alpine/latest-stable/community"</span> <span class="token operator">&gt;</span> /etc/apk/repositories
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> d30141b40989
Removing intermediate container d30141b40989
 ---<span class="token operator">&gt;</span> bdd0194242df
Step <span class="token number">4</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token builtin class-name">echo</span> <span class="token string">"http://mirrors.aliyun.com/alpine/latest-stable/main"</span> <span class="token operator">&gt;&gt;</span> /etc/apk/repositories
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> fdef39d291da
Removing intermediate container fdef39d291da
 ---<span class="token operator">&gt;</span> 9b05d8656e9f
Step <span class="token number">5</span>/30 <span class="token builtin class-name">:</span> RUN apk update <span class="token operator">&amp;&amp;</span> apk upgrade
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> f0fc168abe7a
fetch http://mirrors.aliyun.com/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz
fetch http://mirrors.aliyun.com/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz
v3.14.2-117-gc76a8e57ec <span class="token punctuation">[</span>http://mirrors.aliyun.com/alpine/latest-stable/community<span class="token punctuation">]</span>
v3.14.2-116-gea9b052f30 <span class="token punctuation">[</span>http://mirrors.aliyun.com/alpine/latest-stable/main<span class="token punctuation">]</span>
OK: <span class="token number">14943</span> distinct packages available
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Upgrading alpine-keys <span class="token punctuation">(</span><span class="token number">2.3</span>-r1 -<span class="token operator">&gt;</span> <span class="token number">2.4</span>-r0<span class="token punctuation">)</span>
OK: <span class="token number">6</span> MiB <span class="token keyword">in</span> <span class="token number">14</span> packages
Removing intermediate container f0fc168abe7a
 ---<span class="token operator">&gt;</span> e4ebb6b07c41
Step <span class="token number">6</span>/30 <span class="token builtin class-name">:</span> RUN apk --no-cache <span class="token function">add</span> ca-certificates
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 9d150bc9e523
fetch http://mirrors.aliyun.com/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz
fetch http://mirrors.aliyun.com/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Installing ca-certificates <span class="token punctuation">(</span><span class="token number">20191127</span>-r5<span class="token punctuation">)</span>
Executing busybox-1.33.1-r3.trigger
Executing ca-certificates-20191127-r5.trigger
OK: <span class="token number">6</span> MiB <span class="token keyword">in</span> <span class="token number">15</span> packages
Removing intermediate container 9d150bc9e523
 ---<span class="token operator">&gt;</span> 07bbec5ac046
Step <span class="token number">7</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> <span class="token function">bash</span> bash-doc bash-completion
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 349dbe49e18d
<span class="token punctuation">(</span><span class="token number">1</span>/7<span class="token punctuation">)</span> Installing ncurses-terminfo-base <span class="token punctuation">(</span><span class="token number">6</span>.2_p20210612-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span>/7<span class="token punctuation">)</span> Installing ncurses-libs <span class="token punctuation">(</span><span class="token number">6</span>.2_p20210612-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span>/7<span class="token punctuation">)</span> Installing readline <span class="token punctuation">(</span><span class="token number">8.1</span>.0-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4</span>/7<span class="token punctuation">)</span> Installing <span class="token function">bash</span> <span class="token punctuation">(</span><span class="token number">5.1</span>.4-r0<span class="token punctuation">)</span>
Executing bash-5.1.4-r0.post-install
<span class="token punctuation">(</span><span class="token number">5</span>/7<span class="token punctuation">)</span> Installing pkgconf <span class="token punctuation">(</span><span class="token number">1.7</span>.4-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">6</span>/7<span class="token punctuation">)</span> Installing bash-completion <span class="token punctuation">(</span><span class="token number">2.11</span>-r4<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">7</span>/7<span class="token punctuation">)</span> Installing bash-doc <span class="token punctuation">(</span><span class="token number">5.1</span>.4-r0<span class="token punctuation">)</span>
Executing busybox-1.33.1-r3.trigger
OK: <span class="token number">13</span> MiB <span class="token keyword">in</span> <span class="token number">22</span> packages
Removing intermediate container 349dbe49e18d
 ---<span class="token operator">&gt;</span> c7b45eb58ec3
Step <span class="token number">8</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> <span class="token function">vim</span> <span class="token function">wget</span> <span class="token function">curl</span> net-tools
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 0aa7f4033d62
<span class="token punctuation">(</span><span class="token number">1</span>/12<span class="token punctuation">)</span> Installing brotli-libs <span class="token punctuation">(</span><span class="token number">1.0</span>.9-r5<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span>/12<span class="token punctuation">)</span> Installing nghttp2-libs <span class="token punctuation">(</span><span class="token number">1.43</span>.0-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span>/12<span class="token punctuation">)</span> Installing libcurl <span class="token punctuation">(</span><span class="token number">7.79</span>.1-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4</span>/12<span class="token punctuation">)</span> Installing <span class="token function">curl</span> <span class="token punctuation">(</span><span class="token number">7.79</span>.1-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">5</span>/12<span class="token punctuation">)</span> Installing mii-tool <span class="token punctuation">(</span><span class="token number">1</span>.60_git20140218-r2<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">6</span>/12<span class="token punctuation">)</span> Installing net-tools <span class="token punctuation">(</span><span class="token number">1</span>.60_git20140218-r2<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">7</span>/12<span class="token punctuation">)</span> Installing xxd <span class="token punctuation">(</span><span class="token number">8.2</span>.3437-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">8</span>/12<span class="token punctuation">)</span> Installing lua5.3-libs <span class="token punctuation">(</span><span class="token number">5.3</span>.6-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">9</span>/12<span class="token punctuation">)</span> Installing <span class="token function">vim</span> <span class="token punctuation">(</span><span class="token number">8.2</span>.3437-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">10</span>/12<span class="token punctuation">)</span> Installing libunistring <span class="token punctuation">(</span><span class="token number">0.9</span>.10-r1<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">11</span>/12<span class="token punctuation">)</span> Installing libidn2 <span class="token punctuation">(</span><span class="token number">2.3</span>.1-r0<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">12</span>/12<span class="token punctuation">)</span> Installing <span class="token function">wget</span> <span class="token punctuation">(</span><span class="token number">1.21</span>.1-r1<span class="token punctuation">)</span>
Executing busybox-1.33.1-r3.trigger
OK: <span class="token number">37</span> MiB <span class="token keyword">in</span> <span class="token number">34</span> packages
Removing intermediate container 0aa7f4033d62
 ---<span class="token operator">&gt;</span> a8148d692752
Step <span class="token number">9</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/cache/apk/*
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 246b97afc896
Removing intermediate container 246b97afc896
 ---<span class="token operator">&gt;</span> 797ad812172c
Step <span class="token number">10</span>/30 <span class="token builtin class-name">:</span> RUN /bin/bash
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 1451436e6e2f
Removing intermediate container 1451436e6e2f
 ---<span class="token operator">&gt;</span> <span class="token number">174286182698</span>
Step <span class="token number">11</span>/30 <span class="token builtin class-name">:</span> COPY glibc-2.34-r0.apk <span class="token builtin class-name">.</span>
 ---<span class="token operator">&gt;</span> 652c53def449
Step <span class="token number">12</span>/30 <span class="token builtin class-name">:</span> COPY glibc-bin-2.34-r0.apk <span class="token builtin class-name">.</span>
 ---<span class="token operator">&gt;</span> 160e773ea556
Step <span class="token number">13</span>/30 <span class="token builtin class-name">:</span> COPY glibc-dev-2.34-r0.apk <span class="token builtin class-name">.</span>
 ---<span class="token operator">&gt;</span> 0ddaa22afa7b
Step <span class="token number">14</span>/30 <span class="token builtin class-name">:</span> COPY glibc-i18n-2.34-r0.apk <span class="token builtin class-name">.</span>
 ---<span class="token operator">&gt;</span> e1251741ca54
Step <span class="token number">15</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token function">wget</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-O</span> /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> a33efe825376
Removing intermediate container a33efe825376
 ---<span class="token operator">&gt;</span> d1cbf5b00ba7
Step <span class="token number">16</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> glibc-2.34-r0.apk
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 5b9e9837c65a
fetch http://mirrors.aliyun.com/alpine/latest-stable/community/x86_64/APKINDEX.tar.gz
fetch http://mirrors.aliyun.com/alpine/latest-stable/main/x86_64/APKINDEX.tar.gz
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Installing glibc <span class="token punctuation">(</span><span class="token number">2.34</span>-r0<span class="token punctuation">)</span>
OK: <span class="token number">41</span> MiB <span class="token keyword">in</span> <span class="token number">35</span> packages
Removing intermediate container 5b9e9837c65a
 ---<span class="token operator">&gt;</span> 0ff4b785adb0
Step <span class="token number">17</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> glibc-bin-2.34-r0.apk
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> b65af13f569b
<span class="token punctuation">(</span><span class="token number">1</span>/2<span class="token punctuation">)</span> Installing libgcc <span class="token punctuation">(</span><span class="token number">10.3</span>.1_git20210424-r2<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> Installing glibc-bin <span class="token punctuation">(</span><span class="token number">2.34</span>-r0<span class="token punctuation">)</span>
Executing glibc-bin-2.34-r0.trigger
OK: <span class="token number">44</span> MiB <span class="token keyword">in</span> <span class="token number">37</span> packages
Removing intermediate container b65af13f569b
 ---<span class="token operator">&gt;</span> 2a553cf15df0
Step <span class="token number">18</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> glibc-dev-2.34-r0.apk
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> d40efc59cc3e
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Installing glibc-dev <span class="token punctuation">(</span><span class="token number">2.34</span>-r0<span class="token punctuation">)</span>
Executing glibc-bin-2.34-r0.trigger
OK: <span class="token number">102</span> MiB <span class="token keyword">in</span> <span class="token number">38</span> packages
Removing intermediate container d40efc59cc3e
 ---<span class="token operator">&gt;</span> 853e57ef2aeb
Step <span class="token number">19</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> glibc-i18n-2.34-r0.apk
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 1007b18bf054
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Installing glibc-i18n <span class="token punctuation">(</span><span class="token number">2.34</span>-r0<span class="token punctuation">)</span>
OK: <span class="token number">128</span> MiB <span class="token keyword">in</span> <span class="token number">39</span> packages
Removing intermediate container 1007b18bf054
 ---<span class="token operator">&gt;</span> 2f11ef6e2a3e
Step <span class="token number">20</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token function">rm</span> <span class="token parameter variable">-rf</span> *.apk
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> a55b3deb9cfa
Removing intermediate container a55b3deb9cfa
 ---<span class="token operator">&gt;</span> f4d875a9bde7
Step <span class="token number">21</span>/30 <span class="token builtin class-name">:</span> RUN apk <span class="token function">add</span> tzdata
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 93f6978051d6
<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Installing tzdata <span class="token punctuation">(</span>2021e-r0<span class="token punctuation">)</span>
Executing busybox-1.33.1-r3.trigger
OK: <span class="token number">131</span> MiB <span class="token keyword">in</span> <span class="token number">40</span> packages
Removing intermediate container 93f6978051d6
 ---<span class="token operator">&gt;</span> 6ce2d9ce1b20
Step <span class="token number">22</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> bc3c55254938
Removing intermediate container bc3c55254938
 ---<span class="token operator">&gt;</span> 4d6ed2cd9790
Step <span class="token number">23</span>/30 <span class="token builtin class-name">:</span> RUN /usr/glibc-compat/bin/localedef <span class="token parameter variable">-i</span> en_US <span class="token parameter variable">-f</span> UTF-8 en_US.UTF-8
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 2be0c47a1bae
Removing intermediate container 2be0c47a1bae
 ---<span class="token operator">&gt;</span> 9cd2cd39dbbd
Step <span class="token number">24</span>/30 <span class="token builtin class-name">:</span> ENV <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> fba634ea0e25
Removing intermediate container fba634ea0e25
 ---<span class="token operator">&gt;</span> 8dbd23bae443
Step <span class="token number">25</span>/30 <span class="token builtin class-name">:</span> ADD ./ll /bin/ll
 ---<span class="token operator">&gt;</span> d523605d3c0d
Step <span class="token number">26</span>/30 <span class="token builtin class-name">:</span> RUN <span class="token function">chmod</span> <span class="token number">777</span> /bin/ll
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 1509523a3b4c
Removing intermediate container 1509523a3b4c
 ---<span class="token operator">&gt;</span> 687db62a12a2
Step <span class="token number">27</span>/30 <span class="token builtin class-name">:</span> ADD jdk-8u311-linux-x64.tar.gz /usr/local
 ---<span class="token operator">&gt;</span> 10f3a0525359
Step <span class="token number">28</span>/30 <span class="token builtin class-name">:</span> ENV <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_311
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 3f12a00f6343
Removing intermediate container 3f12a00f6343
 ---<span class="token operator">&gt;</span> c20380dbec7f
Step <span class="token number">29</span>/30 <span class="token builtin class-name">:</span> ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:.:<span class="token variable">$JAVA_HOME</span>/bin
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 21fb10f3a937
Removing intermediate container 21fb10f3a937
 ---<span class="token operator">&gt;</span> a80795139991
Step <span class="token number">30</span>/30 <span class="token builtin class-name">:</span> ENV <span class="token assign-left variable">CALSSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
 ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 3aee4dfbe86c
Removing intermediate container 3aee4dfbe86c
 ---<span class="token operator">&gt;</span> 358c94e522b9
Successfully built 358c94e522b9
Successfully tagged xiaosige/alpine-jdk:1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige mydockerfile<span class="token punctuation">]</span><span class="token comment"># docker images | grep xiaosige</span>
xiaosige/alpine-jdk         <span class="token number">1.0</span>.0     358c94e522b9   <span class="token number">20</span> minutes ago   526MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="运行容器，验证"><a href="#运行容器，验证" class="headerlink" title="运行容器，验证"></a>运行容器，验证</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run --name jdk18 -it  xiaosige/alpine-jdk:1.0.0 /bin/bash

docker run -it --rm xiaosige/maven:3.8-jdk-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-5.1<span class="token comment"># java -version</span>
<span class="token function">java</span> version <span class="token string">"1.8.0_311"</span>
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_311-b11<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.311</span>-b11, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="将镜像推送到镜像仓库"><a href="#将镜像推送到镜像仓库" class="headerlink" title="将镜像推送到镜像仓库"></a>将镜像推送到镜像仓库</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">
docker tag xiaosige/alpine-jdk:1.0.0 10.211.55.81:8082/xiaosige/alpine-jdk:1.0.0

docker push 10.211.55.81:8082/xiaosige/alpine-jdk:1.0.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">[root@xiaosige mydockerfile]# docker search 10.211.55.81:8082/xiaosige/alpine-jdk:1.0.0
NAME                                          DESCRIPTION   STARS     OFFICIAL   AUTOMATED
10.211.55.81:8082/xiaosige/alpine-jdk:1.0.0  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><h4 id="实现alias-ll-39-ls-al-39"><a href="#实现alias-ll-39-ls-al-39" class="headerlink" title="实现alias ll='ls -al' "></a>实现<code>alias ll='ls -al' </code></h4><ol>
<li>编写<code>ll</code>命令文件: <code>ll</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">"ls -al"</span>
ll <span class="token string">"<span class="token variable">$@</span>"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Dockerifle文件关键内容<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">...省略...
<span class="token instruction"><span class="token keyword">ADD</span> ./ll /bin/ll</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="opt-mydockerfile文件结构"><a href="#opt-mydockerfile文件结构" class="headerlink" title="/opt/mydockerfile文件结构"></a><code>/opt/mydockerfile</code>文件结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rw-r--r--. <span class="token number">1</span> root root      <span class="token number">1898</span> Oct <span class="token number">31</span> <span class="token number">12</span>:35 dockerfile-alpine-jdk18
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">1940882</span> Oct <span class="token number">31</span> <span class="token number">11</span>:53 glibc-2.34-r0.apk
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">1120265</span> Oct <span class="token number">31</span> <span class="token number">11</span>:54 glibc-bin-2.34-r0.apk
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">15940495</span> Oct <span class="token number">31</span> <span class="token number">11</span>:54 glibc-dev-2.34-r0.apk
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">7766693</span> Oct <span class="token number">31</span> <span class="token number">11</span>:54 glibc-i18n-2.34-r0.apk
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">146799982</span> Oct <span class="token number">31</span> <span class="token number">11</span>:34 jdk-8u311-linux-x64.tar.gz
-rw-r--r--. <span class="token number">1</span> root root        <span class="token number">43</span> Oct <span class="token number">31</span> <span class="token number">12</span>:27 ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus搭建Docker私有仓库</title>
    <url>/post/1ed6a709.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  Nexus3是Sonatype提供的仓库管理平台，Nuexus Repository OSS3能够支持Maven、npm、Docker、YUM、Helm等格式数据的存储和发布；并且能够与Jekins、SonaQube和Eclipse等工具进行集成。Nexus3支持作为宿主和代理存储库的Docker存储库，可以直接将这些存储库暴露给客户端工具；也可以以存储库组的方式暴露给客户端工具，存储库组是合并了多个存储库的内容的存储库，能够通过一个URL将多个存储库暴露给客户端工具，从而便于用户的使用。通过nexus3自建能够有效减少访问获取镜像的时间和对带宽使用，并能够通过自有的镜像仓库共享企业自己的镜像。在本文中，采用Docker方式安装部署Nexus3。</p>
<span id="more"></span>

<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">
docker run -d -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 \
--net mynet --ip 172.172.0.11 \
--name nexus3 \
--user root \
--privileged=true \
--restart=unless-stopped \
-e NEXUS_CONTEXT=nexus \
-v /root/docker_data/nexus3/nexus-data:/nexus-data \
 sonatype/nexus3:3.36.0
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p> 映射端口对应的用途：<br> <code>8081</code>：可以通过http访问nexus应用<br> <code>8082</code>：docker(hosted)私有仓库，可以pull和push<br> <code>8083</code>：docker(proxy)代理远程仓库，只能pull<br> <code>8084</code>：docker(group)私有仓库和代理的组，只能pull</p>
<p>  使用参数 -v 建立宿主机与Docker目录映射关系，/nexus-data：docker里存nexus数据目录，所以将数据目录存放到宿主机/root/docker_data/nexus3/nexus-data</p>
</div>

<h4 id="访问网页端"><a href="#访问网页端" class="headerlink" title="访问网页端"></a>访问网页端</h4><p><code>http://10.211.55.81:8081 默认账号密码: admin/admin123</code></p>
<h3 id="创建私有镜像仓库"><a href="#创建私有镜像仓库" class="headerlink" title="创建私有镜像仓库"></a>创建私有镜像仓库</h3><h4 id="repository的类型"><a href="#repository的类型" class="headerlink" title="repository的类型"></a>repository的类型</h4><ol>
<li><code>hosted</code>，本地仓库，通常我们会部署自己的构件到这一类型的仓库。比如公司的第二方库。</li>
<li><code>proxy</code>，代理仓库，它们被用来代理远程的公共仓库，如maven中央仓库。</li>
<li><code>group</code>，仓库组，用来合并多个hosted/proxy仓库，当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可。</li>
</ol>
<img data-src="/post/1ed6a709/nexus001.png" class="" title="repository">

<h4 id="创建-docker-hosted-类型的仓库"><a href="#创建-docker-hosted-类型的仓库" class="headerlink" title="创建 docker(hosted) 类型的仓库"></a>创建 docker(hosted) 类型的仓库</h4><p>  用于将自己的镜像上传至私库。<br>  在创建镜像仓库的页面中，设置镜像仓库的相关信息，包括名称、HTTP端口、是否允许匿名拉取镜像等信息。这里需要注意的是，<br>此处的HTTP端口(此处的值为8082)很重要，后续拉取和推送进行是使用此端口进行的，而不是nexus本身对外暴露的端口。</p>
<img data-src="/post/1ed6a709/nexus002.png" class="" title="hosted">

<h4 id="创建-docker-proxy-类型的仓库"><a href="#创建-docker-proxy-类型的仓库" class="headerlink" title="创建 docker(proxy) 类型的仓库"></a>创建 docker(proxy) 类型的仓库</h4><p>  用于从外网仓库中拉取镜像至本地仓库中。点击“create Repository”，选择docker(proxy)进行创建</p>
<img data-src="/post/1ed6a709/nexus0022.jpg" class="" title="proxy">

<h4 id="创建-docker-group-类型的仓库"><a href="#创建-docker-group-类型的仓库" class="headerlink" title="创建 docker(group) 类型的仓库"></a>创建 docker(group) 类型的仓库</h4><p>  用于pull镜像至本地使用，可下载外网镜像和从本地push到私库的镜像</p>
<img data-src="/post/1ed6a709/nexus0023.jpg" class="" title="group">

<h4 id="配置docker-Realm"><a href="#配置docker-Realm" class="headerlink" title="配置docker Realm"></a>配置<code>docker Realm</code></h4><p>  将Docker Bearer Token Realm配置到右边，点击save即可</p>
<img data-src="/post/1ed6a709/nexus0021.png" class="" title="Realm">

<h4 id="修改docker配置"><a href="#修改docker配置" class="headerlink" title="修改docker配置"></a>修改docker配置</h4><p>    IP地址为私库服务器的IP地址，端口为创建docker group和docker hosted填写的端口,在<code>/etc/docker/daemon.json</code>文件中添加下面的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/docker/daemon.json</span>

<span class="token punctuation">{</span>

    <span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"10.211.55.81:8082"</span>,<span class="token string">"10.211.55.81:8084"</span><span class="token punctuation">]</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>

<span class="token punctuation">[</span>root@xiaosige ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span>

<span class="token punctuation">[</span>root@xiaosige ~<span class="token punctuation">]</span><span class="token comment"># docker info</span>

Insecure Registries:

   <span class="token number">10.211</span>.55.81:8082  <span class="token comment">#生效了</span>

   <span class="token number">127.0</span>.0.0/8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="上传、拉取镜像"><a href="#上传、拉取镜像" class="headerlink" title="上传、拉取镜像"></a>上传、拉取镜像</h4><ol>
<li>登录私服<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige ~<span class="token punctuation">]</span><span class="token comment"># docker login 10.211.55.81:8082</span>

Username: admin

Password: admin123

WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.

Configure a credential helper to remove this warning. See

https://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>

Login Succeeded  <span class="token comment">#登录成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<code>注意：登录时，需要提供用户名和密码。认证的信息会被保存在~/.docker/config.json文件，在后续与私有镜像仓库交互时就可以被重用，而不需要每次都进行登录认证。</code></li>
<li>上传镜像<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker pull hello-world</span>
Using default tag: latest
latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:37a0b92b08d4919615c3ee023f7ddb068d12b8387475d64c622ac30f45c29c51
Status: Downloaded newer image <span class="token keyword">for</span> hello-world:latest
docker.io/library/hello-world:latest
<span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker tag hello-world 10.211.55.81:8082/helloworld:1.0</span>
<span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker push 10.211.55.81:8082/helloworld:1.0</span>
The push refers to repository <span class="token punctuation">[</span><span class="token number">10.211</span>.55.81:8082/helloworld<span class="token punctuation">]</span>
e07ee1baac5f: Layer already exists 
<span class="token number">1.0</span>: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: <span class="token number">525</span>
<span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/1ed6a709/nexus003.png" class="" title="上传私库成功"></li>
<li>拉取镜像<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker pull 10.211.55.81:8082/helloworld:1.0 </span>
<span class="token number">1.0</span>: Pulling from helloworld
2db29710123e: Pull complete 
Digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4
Status: Downloaded newer image <span class="token keyword">for</span> <span class="token number">10.211</span>.55.81:8082/helloworld:1.0
<span class="token number">10.211</span>.55.81:8082/helloworld:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>  创建用户：<br>  默认是使用<code>admin</code>登录的，权限太高，可以给用户单独创建账号<br>  建立 <code>docker</code> 角色组，权限为 <code>nx-repository-view-docker-*-*</code></p>
<img data-src="/post/1ed6a709/nexus004.png" class="" title="新建角色">
<p>  建立新用户，并加入为 <code>docker</code>角色组</p>
<img data-src="/post/1ed6a709/nexus005.png" class="" title="新建用户">

<p>  登录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker logout 10.211.55.81:8082</span>
Removing login credentials <span class="token keyword">for</span> <span class="token number">10.211</span>.55.81:8082
<span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># docker login 10.211.55.81:8082</span>
Username: leeze
Password: 
WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>

Login Succeeded
<span class="token punctuation">[</span>root@xiaosige .docker<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker】之 Docker Compose v2 安装</title>
    <url>/post/496907aa.html</url>
    <content><![CDATA[<img data-src="/post/496907aa/dockerCompose001.png" style="height:300px;width:100%;box-shadow:none!important;">

<span id="more"></span>

<h3 id="Docker-Compose-v2-安装"><a href="#Docker-Compose-v2-安装" class="headerlink" title="Docker Compose v2 安装"></a>Docker Compose v2 安装</h3><h4 id="官网安装地址"><a href="#官网安装地址" class="headerlink" title="官网安装地址"></a>官网安装地址</h4><pre class="line-numbers language-none"><code class="language-none">https://docs.docker.com/compose/cli-command/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DOCKER_CONFIG</span><span class="token operator">=</span><span class="token variable">${DOCKER_CONFIG<span class="token operator">:-</span>$HOME<span class="token operator">/</span>.docker}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="创建存放目录"><a href="#创建存放目录" class="headerlink" title="创建存放目录"></a>创建存放目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="token comment"># 可替换为国内地址</span>
<span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://get.daocloud.io/docker/compose/releases/download/v2.2.3/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token parameter variable">-o</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="修改执行权限"><a href="#修改执行权限" class="headerlink" title="修改执行权限"></a>修改执行权限</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose version
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络和Docker容器网络配置</title>
    <url>/post/2f93af4e.html</url>
    <content><![CDATA[<img data-src="/post/2f93af4e/dockernw001.png" style="height:260px;width:100%;box-shadow:none!important;">

<span id="more"></span>

<h3 id="Docker容器网络"><a href="#Docker容器网络" class="headerlink" title="Docker容器网络"></a>Docker容器网络</h3><p>  Docker在安装后自动提供3种网络，可以使用<code>docker network ls</code>命令查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@anolis containers<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>
NETWORK ID     NAME          DRIVER    SCOPE
26f3662e2a00   bridge        bridge    <span class="token builtin class-name">local</span>
24be6b7fd7f8   docker1       bridge    <span class="token builtin class-name">local</span>
fc16af4c2af2   <span class="token function">host</span>          <span class="token function">host</span>      <span class="token builtin class-name">local</span>
ade5dbee404b   nginx-proxy   bridge    <span class="token builtin class-name">local</span>
fe9fd94c0987   none          null      <span class="token builtin class-name">local</span>
56305c516afe   traefik       bridge    <span class="token builtin class-name">local</span>
<span class="token punctuation">[</span>root@anolis containers<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(<code>docker0</code>)，Docker启动一个容器时会根据Docker网桥的网段分配给<code>容</code>器一个<code>IP地址</code>，称为<code>Container-IP</code>，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</p>
<h4 id="Docker的4种网络模式"><a href="#Docker的4种网络模式" class="headerlink" title="Docker的4种网络模式"></a>Docker的<code>4</code>种网络模式</h4><table>
<thead>
<tr>
<th style="text-align:left">网络模式</th>
<th style="text-align:left">配置</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">host</td>
<td style="text-align:left">–network host</td>
<td style="text-align:left">容器和宿主机共享Network namespace</td>
</tr>
<tr>
<td style="text-align:left">container</td>
<td style="text-align:left">–network container:NAME_OR_ID</td>
<td style="text-align:left">容器和另外一个容器共享Network namespace</td>
</tr>
<tr>
<td style="text-align:left">none</td>
<td style="text-align:left">–network none</td>
<td style="text-align:left">容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等</td>
</tr>
<tr>
<td style="text-align:left">bridge</td>
<td style="text-align:left">–network</td>
<td style="text-align:left">bridge 默认模式</td>
</tr>
</tbody>
</table>
<img data-src="/post/2f93af4e/dockernw002.png" class="" title="Network">




<h5 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h5><div class="note success no-icon"><p>  当Docker进程启动时，会在主机上创建一个名为<code>docker0</code>的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>  从<code>docker0</code>子网中分配一个IP给容器使用，并设置<code>docker0</code>的<code>IP地址</code>为容器的<code>默认网关</code>。在主机上创建一对虚拟网卡<code>veth pair</code>设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为<code>eth0</code>（容器的网卡），另一端放在主机中，以<code>vethxxx</code>这样类似的名字命名，并将这个网络设备加入到<code>docker0</code>网桥中。可以通过<code>brctl show</code>命令查看。</p>
<p>  bridge模式是docker的默认网络模式，不写<code>–network</code>参数，就是bridge模式。使用<code>docker run -p</code>时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用<code>iptables -t nat -vnL</code>查看。</p>
</div>

<p>  bridge模式如下图所示：<br><img data-src="/post/2f93af4e/dockernw003.png" style="height:360px;box-shadow:none!important;"></p>
<p>  假设上图的<code>docker2</code>中运行了一个<code>nginx</code>，大家来想几个问题：</p>
<div class="note info no-icon"><ul>
<li>同主机间两个容器间是否可以直接通信？比如在docker1上能不能直接访问到docker2的nginx站点？</li>
<li>在宿主机上能否直接访问到docker2的nginx站点？</li>
<li>在另一台主机上如何访问node1上的这个nginx站点呢？DNAT发布？</li>
</ul>
</div>
<p>  Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接Container-IP访问到容器。如果容器希望外部访问能够访问到，可以通过映射容器端口到宿主主机（端口映射），即<code>docker run</code>创建容器时候通过 <code>-p</code> 或 <code>-P</code> 参数来启用，访问容器的时候就通过<code>[宿主机IP]</code>:<code>[容器端口]</code>访问容器。</p>
<h5 id="container模式"><a href="#container模式" class="headerlink" title="container模式"></a>container模式</h5><p>  这个模式指定新创建的容器和已经存在的一个<code>容器共享</code>一个 <code>Network Namespace</code>，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 <code>lo</code> 网卡设备通信。<br>  container模式如下图所示：</p>
<img data-src="/post/2f93af4e/dockernw004.png" class="" title="container">



<h5 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h5><p>  如果启动容器的时候使用host模式，那么这个容器将<code>不会</code>获得一个独立的<code>Network Namespace</code>，而是和<code>宿主机共用</code>一个<code>Network Namespace</code>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。<br>  使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是<code>docker host</code>上<code>已经</code>使用的<code>端口</code>就<code>不能</code>再用了，网络的隔离性不好。<br>  Host模式如下图所示：<br><img data-src="/post/2f93af4e/dockernw005.png" style="height:360px;box-shadow:none!important;"></p>
<h5 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h5><p>  使用none模式，Docker容器<code>拥有</code>自己的<code>Network Namespace</code>，但是，并<code>不</code>为Docker容器进行任何<code>网络配置</code>。也就是说，这个Docker容器<code>没有</code>网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。<br>  这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<p>  应用场景：</p>
<div class="note info no-icon"><ul>
<li>启动一个容器处理数据，比如转换数据格式</li>
<li>一些后台的计算和处理任务</li>
</ul>
</div>

<p>  none模式如下图所示：<br><img data-src="/post/2f93af4e/dockernw006.png" style="height:360px;box-shadow:none!important;"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看bridge网络的详细配置</span>
root@localhost:~<span class="token comment"># docker network inspect bridge</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="docker容器网络配置"><a href="#docker容器网络配置" class="headerlink" title="docker容器网络配置"></a>docker容器网络配置</h3><h4 id="Linux内核实现名称空间的创建"><a href="#Linux内核实现名称空间的创建" class="headerlink" title="Linux内核实现名称空间的创建"></a>Linux内核实现名称空间的创建</h4><h5 id="ip-netns命令"><a href="#ip-netns命令" class="headerlink" title="ip netns命令"></a><code>ip netns</code>命令</h5><p>  可以借助<code>ip netns</code>命令来完成对 <code>Network Namespace</code> 的各种操作。ip netns命令来自于<code>iproute</code>安装包，一般系统会默认安装，如果没有的话，请自行安装。</p>
<p><code>注意：ip netns命令修改网络配置时需要 sudo 权限。</code></p>
<p>  可以通过ip netns命令完成对Network Namespace 的相关操作，可以通过ip netns help查看命令帮助信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns help</span>
Usage:  <span class="token function">ip</span> netns list
        <span class="token function">ip</span> netns <span class="token function">add</span> NAME
        <span class="token function">ip</span> netns attach NAME PID
        <span class="token function">ip</span> netns <span class="token builtin class-name">set</span> NAME NETNSID
        <span class="token function">ip</span> <span class="token punctuation">[</span>-all<span class="token punctuation">]</span> netns delete <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span>
        <span class="token function">ip</span> netns identify <span class="token punctuation">[</span>PID<span class="token punctuation">]</span>
        <span class="token function">ip</span> netns pids NAME
        <span class="token function">ip</span> <span class="token punctuation">[</span>-all<span class="token punctuation">]</span> netns <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span> cmd <span class="token punctuation">..</span>.
        <span class="token function">ip</span> netns monitor
        <span class="token function">ip</span> netns list-id <span class="token punctuation">[</span>target-nsid POSITIVE-INT<span class="token punctuation">]</span> <span class="token punctuation">[</span>nsid POSITIVE-INT<span class="token punctuation">]</span>
NETNSID :<span class="token operator">=</span> auto <span class="token operator">|</span> POSITIVE-INT
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  默认情况下，Linux系统中是没有任何 <code>Network Namespace</code>的，所以<code>ip netns list</code>命令不会返回任何信息。</p>
<h5 id="创建Network-Namespace"><a href="#创建Network-Namespace" class="headerlink" title="创建Network Namespace"></a>创建Network Namespace</h5><p>  通过命令创建一个名为<code>ns0</code>的命名空间：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns list</span>
root@localhost:~<span class="token comment"># ip netns add ns0</span>
root@localhost:~<span class="token comment"># ip netns list</span>
ns0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  新创建的 <code>Network Namespace</code> 会出现在<code>/var/run/netns/</code>目录下。如果相同名字的 namespace 已经存在，命令会报Cannot create namespace file “/var/run/netns/ns0”: File exists的错误。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ls /var/run/netns/</span>
ns0
root@localhost:~<span class="token comment"># ip netns add ns0</span>
Cannot create namespace <span class="token function">file</span> <span class="token string">"/var/run/netns/ns0"</span><span class="token builtin class-name">:</span> File exists
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  对于每个 Network Namespace 来说，它会有自己独立的网卡、路由表、ARP 表、iptables 等和网络相关的资源。</p>
<h4 id="操作Network-Namespace"><a href="#操作Network-Namespace" class="headerlink" title="操作Network Namespace"></a>操作Network Namespace</h4><p>  ip命令提供了<code>ip netns exec</code>子命令可以在对应的 Network Namespace 中执行命令。<br>  查看新创建 Network Namespace 的网卡信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns0 ip addr</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  可以看到，新创建的Network Namespace中会默认创建一个lo回环网卡，此时网卡处于关闭状态。此时，尝试去 ping 该lo回环网卡，会提示Network is unreachable</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 127.0.0.1是默认回环网卡</span>
root@localhost:~<span class="token comment"># ip netns exec ns0 ping 127.0.0.1</span>
ping: connect: Network is unreachable
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  通过下面的命令启用lo回环网卡：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns0 ip link set lo up</span>
root@localhost:~<span class="token comment"># ip netns exec ns0 ping 127.0.0.1</span>
PING <span class="token number">127.0</span>.0.1 <span class="token punctuation">(</span><span class="token number">127.0</span>.0.1<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.051</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.066</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.058</span> ms
^C
--- <span class="token number">127.0</span>.0.1 <span class="token function">ping</span> statistics ---
<span class="token number">6</span> packets transmitted, <span class="token number">6</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 5105ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.051</span>/0.064/0.077/0.008 ms
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="转移设备"><a href="#转移设备" class="headerlink" title="转移设备"></a>转移设备</h5><p>  我们可以在不同的 Network Namespace 之间转移设备（如<code>veth</code>）。由于一个设备只能属于一个 Network Namespace ，所以转移后在这个 Network Namespace 内就看不到这个设备了。<br>  其中，<code>veth</code>设备属于可转移设备，而很多其它设备（如lo、vxlan、ppp、bridge等）是不可以转移的。</p>
<h5 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth pair"></a>veth pair</h5><p>  veth pair 全称是 Virtual Ethernet Pair，是一个成对的端口，所有从这对端口一 端进入的数据包都将从另一端出来，反之也是一样。<br>  引入veth pair是为了在不同的 Network Namespace 直接进行通信，利用它可以直接将两个 Network Namespace 连接起来。</p>
<img data-src="/post/2f93af4e/dockernw007.png" style="height:360px;box-shadow:none!important;">

<h5 id="创建veth-pair"><a href="#创建veth-pair" class="headerlink" title="创建veth pair"></a>创建veth pair</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip link add type veth</span>
root@localhost:~<span class="token comment"># ip a</span>

<span class="token number">7</span>: veth0@veth1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">86</span>:5c:bb:8e:0f:71 brd ff:ff:ff:ff:ff:ff
<span class="token number">8</span>: veth1@veth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether c2:e3:c6:13:09:50 brd ff:ff:ff:ff:ff:ff
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  可以看到，此时系统中新增了一对veth pair，将<code>veth0</code>和<code>veth1</code>两个虚拟网卡连接了起来，此时这对 veth pair 处于”未启用“状态。</p>
<h5 id="实现Network-Namespace间通信"><a href="#实现Network-Namespace间通信" class="headerlink" title="实现Network Namespace间通信"></a>实现Network Namespace间通信</h5><p>  下面我们利用<code>veth pair</code>实现两个不同的 Network Namespace 之间的通信。刚才我们已经创建了一个名为<code>ns0</code>的 Network Namespace，下面再创建一个信息Network Namespace，命名为<code>ns1</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns add ns1</span>
root@localhost:~<span class="token comment"># ip netns list</span>
ns1
ns0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  然后我们将<code>veth0</code>加入到<code>ns0</code>，将<code>veth1</code>加入到<code>ns1</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip link set veth0 netns ns0</span>
root@localhost:~<span class="token comment"># ip link set veth1 netns ns1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  然后我们分别为这对<code>veth pair</code>配置上<code>ip</code>地址，并启用它们</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns0 ip link set veth0 up</span>
root@localhost:~<span class="token comment"># ip netns exec ns0 ip addr add 192.0.0.1/24 dev veth0</span>
root@localhost:~<span class="token comment"># ip netns exec ns1 ip link set veth1 up</span>
root@localhost:~<span class="token comment"># ip netns exec ns1 ip addr add 192.0.0.2/24 dev veth1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  查看这对<code>veth pair</code>的状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns0 ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span> 
       valid_lft forever preferred_lft forever
<span class="token number">4</span>: veth0@if5: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default qlen <span class="token number">1000</span>
    link/ether 0a:f4:e2:2d:37:fb brd ff:ff:ff:ff:ff:ff link-netns ns1
    inet <span class="token number">192.0</span>.0.1/24 scope global veth0
       valid_lft forever preferred_lft forever
    inet6 fe80::8f4:e2ff:fe2d:37fb/64 scope <span class="token function">link</span> 
       valid_lft forever preferred_lft forever
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns1 ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span class="token number">5</span>: veth1@if4: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default qlen <span class="token number">1000</span>
    link/ether 5e:7e:f6:59:f0:4f brd ff:ff:ff:ff:ff:ff link-netns ns0
    inet <span class="token number">192.0</span>.0.2/24 scope global veth1
       valid_lft forever preferred_lft forever
    inet6 fe80::5c7e:f6ff:fe59:f04f/64 scope <span class="token function">link</span> 
       valid_lft forever preferred_lft forever
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  从上面可以看出，我们已经成功启用了这个<code>veth pair</code>，并为每个<code>veth</code>设备分配了对应的<code>ip</code>地址。我们尝试在<code>ns1</code>中访问<code>ns0</code>中的ip地址</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost:~<span class="token comment"># ip netns exec ns1 ping 192.0.0.1</span>
PING <span class="token number">192.0</span>.0.1 <span class="token punctuation">(</span><span class="token number">192.0</span>.0.1<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.033</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.041</span> ms
^C
--- <span class="token number">192.0</span>.0.1 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1001ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.033</span>/0.037/0.041/0.004 ms

root@localhost:~<span class="token comment"># ip netns exec ns0 ping 192.0.0.2</span>
PING <span class="token number">192.0</span>.0.2 <span class="token punctuation">(</span><span class="token number">192.0</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.
<span class="token number">64</span> bytes from <span class="token number">192.0</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.025</span> ms
<span class="token number">64</span> bytes from <span class="token number">192.0</span>.0.2: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.025</span> ms
^C
--- <span class="token number">192.0</span>.0.2 <span class="token function">ping</span> statistics ---
<span class="token number">2</span> packets transmitted, <span class="token number">2</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 1038ms
rtt min/avg/max/mdev <span class="token operator">=</span> <span class="token number">0.025</span>/0.025/0.025/0.000 ms
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  可以看到，<code>veth pair</code>成功实现了两个不同Network Namespace之间的网络交互。</p>
<h3 id="四种网络模式配置"><a href="#四种网络模式配置" class="headerlink" title="四种网络模式配置"></a>四种网络模式配置</h3><h4 id="bridge模式配置"><a href="#bridge模式配置" class="headerlink" title="bridge模式配置"></a>bridge模式配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name ti --rm busybox</span>
/ <span class="token comment"># ifconfig</span>
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1032 <span class="token punctuation">(</span><span class="token number">1.0</span> KiB<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在创建容器时添加<code>–network bridge</code>与不加<code>–network</code>选项效果是一致的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network bridge --rm busybox</span>
/ <span class="token comment"># ifconfig</span>
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:696 <span class="token punctuation">(</span><span class="token number">696.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="none模式配置"><a href="#none模式配置" class="headerlink" title="none模式配置"></a>none模式配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network none --rm busybox</span>
/ <span class="token comment"># ifconfig -a</span>
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="container模式配置"><a href="#container模式配置" class="headerlink" title="container模式配置"></a>container模式配置</h4><p>  启动第一个容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -dit --name b3 busybox</span>
af5ba32f990ebf5a46d7ecaf1eec67f1712bbef6ad7df37d52b7a8a498a592a0

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it b3 /bin/sh</span>
/ <span class="token comment"># ifconfig </span>
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:11 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:906 <span class="token punctuation">(</span><span class="token number">906.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  启动第二个容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name b2 --rm busybox</span>
/ <span class="token comment"># ifconfig </span>
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03  
          inet addr:172.17.0.3  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:6 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:516 <span class="token punctuation">(</span><span class="token number">516.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  可以看到名为b2的容器IP地址是10.0.0.3，与第一个容器的IP地址不是一样的，也就是说并没有共享网络，此时如果我们将第二个容器的启动方式改变一下，就可以使名为b2的容器IP与B3容器IP一致，也即共享IP，但不共享文件系统。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name b2 --rm --network container:b3 busybox</span>
/ <span class="token comment"># ifconfig </span>
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:14 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1116 <span class="token punctuation">(</span><span class="token number">1.0</span> KiB<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>

此时我们在b1容器上创建一个目录
/ <span class="token comment"># mkdir /tmp/data</span>
/ <span class="token comment"># ls /tmp</span>
data
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  到b2容器上检查/tmp目录会发现并没有这个目录，因为文件系统是处于隔离状态，仅仅是共享了网络而已。<br>  在b2容器上部署一个站点</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># echo 'hello world' &gt; /tmp/index.html</span>
/ <span class="token comment"># ls /tmp</span>
index.html
/ <span class="token comment"># httpd -h /tmp</span>
/ <span class="token comment"># netstat -antl</span>
Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       
tcp        <span class="token number">0</span>      <span class="token number">0</span> :::80                   :::*                    LISTEN      
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在b1容器上用本地地址去访问此站点</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># wget -O - -q 172.17.0.2:80</span>
hello world
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="host模式配置"><a href="#host模式配置" class="headerlink" title="host模式配置"></a>host模式配置</h4><p>  启动容器时直接指明模式为<code>host</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name b2 --rm --network host busybox</span>
/ <span class="token comment"># ifconfig </span>
docker0   Link encap:Ethernet  HWaddr 02:42:B8:7F:8E:2C  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:b8ff:fe7f:8e2c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3 errors:0 dropped:0 overruns:0 frame:0
          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:116 <span class="token punctuation">(</span><span class="token number">116.0</span> B<span class="token punctuation">)</span>  TX bytes:1664 <span class="token punctuation">(</span><span class="token number">1.6</span> KiB<span class="token punctuation">)</span>

ens33     Link encap:Ethernet  HWaddr 00:0C:29:95:19:47  
          inet addr:192.168.203.138  Bcast:192.168.203.255  Mask:255.255.255.0
          inet6 addr: fe80::2e61:1ea3:c05a:3d9b/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:9626 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3950 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:3779562 <span class="token punctuation">(</span><span class="token number">3.6</span> MiB<span class="token punctuation">)</span>  TX bytes:362386 <span class="token punctuation">(</span><span class="token number">353.8</span> KiB<span class="token punctuation">)</span>

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>

veth09ee47e Link encap:Ethernet  HWaddr B2:10:53:7B:66:AE  
          inet6 addr: fe80::b010:53ff:fe7b:66ae/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3 errors:0 dropped:0 overruns:0 frame:0
          TX packets:19 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:158 <span class="token punctuation">(</span><span class="token number">158.0</span> B<span class="token punctuation">)</span>  TX bytes:1394 <span class="token punctuation">(</span><span class="token number">1.3</span> KiB<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  此时如果我们在这个容器中启动一个http站点，我们就可以直接用宿主机的IP直接在浏览器中访问这个容器中的站点了。</p>
<h3 id="容器的常用操作"><a href="#容器的常用操作" class="headerlink" title="容器的常用操作"></a>容器的常用操作</h3><h4 id="查看容器的主机名"><a href="#查看容器的主机名" class="headerlink" title="查看容器的主机名"></a>查看容器的主机名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network bridge --rm busybox</span>
/ <span class="token comment"># hostname</span>
48cb45a0b2e7
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="在容器启动时注入主机名"><a href="#在容器启动时注入主机名" class="headerlink" title="在容器启动时注入主机名"></a>在容器启动时注入主机名</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network bridge --hostname ljl --rm busybox</span>
/ <span class="token comment"># hostname </span>
ljl
/ <span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
<span class="token number">172.17</span>.0.3	ljl
/ <span class="token comment"># cat /etc/resolv.conf </span>
<span class="token comment"># Generated by NetworkManager</span>
search localdomain
nameserver <span class="token number">192.168</span>.203.2
/ <span class="token comment"># ping www.baidu.com</span>
PING www.baidu.com <span class="token punctuation">(</span><span class="token number">182.61</span>.200.7<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">182.61</span>.200.7: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">31.929</span> ms
<span class="token number">64</span> bytes from <span class="token number">182.61</span>.200.7: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">41.062</span> ms
<span class="token number">64</span> bytes from <span class="token number">182.61</span>.200.7: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">31.540</span> ms
^C
--- www.baidu.com <span class="token function">ping</span> statistics ---
<span class="token number">3</span> packets transmitted, <span class="token number">3</span> packets received, <span class="token number">0</span>% packet loss
round-trip min/avg/max <span class="token operator">=</span> <span class="token number">31.540</span>/34.843/41.062 ms
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="手动指定容器要使用的DNS"><a href="#手动指定容器要使用的DNS" class="headerlink" title="手动指定容器要使用的DNS"></a>手动指定容器要使用的DNS</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network bridge --hostname ljl --dns 114.114.114.114 --rm busybox</span>
/ <span class="token comment"># cat /etc/resolv.conf </span>
search localdomain
nameserver <span class="token number">114.114</span>.114.114
/ <span class="token comment"># nslookup -type=a www.baidu.com</span>
Server:		<span class="token number">114.114</span>.114.114
Address:	<span class="token number">114.114</span>.114.114:53

Non-authoritative answer:
www.baidu.com	canonical name <span class="token operator">=</span> www.a.shifen.com
Name:	www.a.shifen.com
Address: <span class="token number">182.61</span>.200.6
Name:	www.a.shifen.com
Address: <span class="token number">182.61</span>.200.7
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="手动往-etc-hosts文件中注入主机名到IP地址的映射"><a href="#手动往-etc-hosts文件中注入主机名到IP地址的映射" class="headerlink" title="手动往/etc/hosts文件中注入主机名到IP地址的映射"></a>手动往<code>/etc/hosts</code>文件中注入主机名到IP地址的映射</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name t1 --network bridge --hostname ljl --add-host www.a.com:1.1.1.1 --rm busybox</span>
/ <span class="token comment"># cat /etc/hosts</span>

<span class="token number">127.0</span>.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
<span class="token number">1.1</span>.1.1	www.a.com
<span class="token number">172.17</span>.0.3	ljl
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="开放容器端口"><a href="#开放容器端口" class="headerlink" title="开放容器端口"></a>开放容器端口</h3><p>  执行<code>docker run</code>的时候有个<code>-p</code>选项，可以将容器中的应用端口映射到宿主机中，从而实现让外部主机可以通过访问宿主机的某端口来访问容器内应用的目的。</p>
<p>  <code>-p</code>选项能够使用多次，其所能够暴露的端口必须是容器确实在监听的端口。</p>
<div class="note info no-icon"><blockquote>
<p><code>-p</code>选项的使用格式：</p>
</blockquote>
<ul>
<li><code>-p containerPort</code></li>
<li>将指定的容器端口映射至主机所有地址的一个动态端口</li>
<li><code>-p hostPort : containerPort</code></li>
<li>将容器端口 containerPort 映射至指定的主机端口 hostPort</li>
<li><code>-p ip :: containerPort</code></li>
<li>将指定的容器端口 containerPort 映射至主机指定 ip 的动态端口</li>
<li><code>-p ip : hostPort : containerPort</code></li>
<li>将指定的容器端口 containerPort 映射至主机指定 ip 的端口 hostPort</li>
</ul>
</div>

<p>  动态端口指的是随机端口，具体的映射结果可使用<code>docker port</code>命令查看。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -dit --name web1 -p 192.168.203.138::80 httpd</span>
e97bc1774e40132659990090f0e98a308a7f83986610ca89037713e9af8a6b9f

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker ps </span>
CONTAINER ID   IMAGE     COMMAND              CREATED          STATUS          PORTS                           NAMES
e97bc1774e40   httpd     <span class="token string">"httpd-foreground"</span>   <span class="token number">6</span> seconds ago    Up <span class="token number">5</span> seconds    <span class="token number">192.168</span>.203.138:49153-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   web1
af5ba32f990e   busybox   <span class="token string">"sh"</span>                 <span class="token number">48</span> minutes ago   Up <span class="token number">48</span> minutes                                   b3

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ss -antl</span>
State    Recv-Q   Send-Q        Local Address:Port        Peer Address:Port   Process   
LISTEN   <span class="token number">0</span>        <span class="token number">128</span>         <span class="token number">192.168</span>.203.138:49153            <span class="token number">0.0</span>.0.0:*                
LISTEN   <span class="token number">0</span>        <span class="token number">128</span>                 <span class="token number">0.0</span>.0.0:22               <span class="token number">0.0</span>.0.0:*                
LISTEN   <span class="token number">0</span>        <span class="token number">128</span>                    <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:22                  <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*       
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  以上命令执行后会一直占用着前端，我们新开一个终端连接来看一下容器的<code>80</code>端口被映射到了宿主机的什么端口上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker port web1</span>
<span class="token number">80</span>/tcp -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.203.138:49153
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  由此可见，容器的<code>8</code>0端口被暴露到了宿主机的<code>49153</code>端口上，此时我们在宿主机上访问一下这个端口看是否能访问到容器内的站点</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># curl http://192.168.203.138:49153</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>It works<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>iptables</code>防火墙规则将随容器的创建自动生成，随容器的删除自动删除规则。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># iptables -t nat -nvL</span>
Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
    <span class="token number">3</span>   <span class="token number">164</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         

Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
    <span class="token number">4</span>   <span class="token number">261</span> MASQUERADE  all  --  *      <span class="token operator">!</span>docker0  <span class="token number">172.17</span>.0.0/16        <span class="token number">0.0</span>.0.0/0           
    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">172.17</span>.0.3           <span class="token number">172.17</span>.0.3           tcp dpt:80

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
    <span class="token number">2</span>   <span class="token number">120</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0           <span class="token operator">!</span><span class="token number">127.0</span>.0.0/8          ADDRTYPE match dst-type LOCAL

Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
 pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
    <span class="token number">1</span>    <span class="token number">60</span> RETURN     all  --  docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0           
    <span class="token number">1</span>    <span class="token number">60</span> DNAT       tcp  --  <span class="token operator">!</span>docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">192.168</span>.203.138      tcp dpt:49153 to:172.17.0.3:80
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  将容器端口映射到指定IP的随机端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -dit --name web1 -p 192.168.203.138::80 httpd</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在另一个终端上查看端口映射情况</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker port web1</span>
<span class="token number">80</span>/tcp -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.203.138:49153
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="自定义docker0桥的网络属性信息"><a href="#自定义docker0桥的网络属性信息" class="headerlink" title="自定义docker0桥的网络属性信息"></a>自定义<code>docker0</code>桥的网络属性信息</h3><p>  自定义<code>docker0</code>桥的网络属性信息需要修改<code>/etc/docker/daemon.json</code>配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /etc/docker/</span>
<span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># vim daemon.json </span>
<span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>
<span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span>

<span class="token punctuation">{</span>
    <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://4hygggbu.mirror.aliyuncs.com/"</span><span class="token punctuation">]</span>,
    <span class="token string">"bip"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.1.5/24"</span>
<span class="token punctuation">}</span>
EOF
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /lib/systemd/system/docker.service </span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375  <span class="token parameter variable">-H</span> unix:///var/run/docker.sock

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl daemon-reload</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  在客户端上向<code>dockerd</code>直接传递<code>“-H|–host”</code>选项指定要控制哪台主机上的docker容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker -H 192.168.203.138:2375 ps</span>
CONTAINER ID   IMAGE     COMMAND              CREATED             STATUS          PORTS                           NAMES
e97bc1774e40   httpd     <span class="token string">"httpd-foreground"</span>   <span class="token number">30</span> minutes ago      Up <span class="token number">11</span> seconds   <span class="token number">192.168</span>.203.138:49153-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   web1
af5ba32f990e   busybox   <span class="token string">"sh"</span>                 About an hour ago   Up <span class="token number">14</span> seconds                                   b3
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  创建新网络</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network create ljl -d bridge </span>
883eda50812bb214c04986ca110dbbcb7600eba8b033f2084cd4d750b0436e12

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>
NETWORK ID     NAME      DRIVER    SCOPE
0c5f4f114c27   bridge    bridge    <span class="token builtin class-name">local</span>
8c2d14f1fb82   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>
883eda50812b   ljl       bridge    <span class="token builtin class-name">local</span>
85ed12d38815   none      null      <span class="token builtin class-name">local</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  创建一个额外的自定义桥，区别于<code>docker0</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network create -d bridge --subnet "192.168.2.0/24" --gateway "192.168.2.1" br0</span>
af9ba80deb619de3167939ec5b6d6136a45dce90907695a5bc5ed4608d188b99

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>
NETWORK ID     NAME      DRIVER    SCOPE
af9ba80deb61   br0       bridge    <span class="token builtin class-name">local</span>
0c5f4f114c27   bridge    bridge    <span class="token builtin class-name">local</span>
8c2d14f1fb82   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>
883eda50812b   ljl       bridge    <span class="token builtin class-name">local</span>
85ed12d38815   none      null      <span class="token builtin class-name">local</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  使用新创建的自定义桥来创建容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name b1 --network br0 busybox</span>
/ <span class="token comment"># ifconfig </span>
eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:02:02  
          inet addr:192.168.2.2  Bcast:192.168.2.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:11 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:962 <span class="token punctuation">(</span><span class="token number">962.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  再创建一个容器，使用默认的bridge桥：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker run --name b2 -it busybox</span>
/ <span class="token comment"># ls</span>
bin   dev   etc   home  proc  root  sys   tmp   usr   var
/ <span class="token comment"># ifconfig </span>
eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:01:03  
          inet addr:192.168.1.3  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:6 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:516 <span class="token punctuation">(</span><span class="token number">516.0</span> B<span class="token punctuation">)</span>  TX bytes:0 <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker + Jenkins + gogs 自动化部署</title>
    <url>/post/7f65a2db.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  docker+jenkins+gogs实现持续自动化部署。</p>
<span id="more"></span>

<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载自动安装脚本</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> get.docker.com <span class="token parameter variable">-o</span> get-docker.sh

<span class="token comment"># 执行脚本，并指定为阿里的镜像</span>
<span class="token function">sh</span> get-docker.sh <span class="token parameter variable">--mirror</span> Aliyun

<span class="token comment"># 启动docker</span>
systemctl start <span class="token function">docker</span>

<span class="token comment"># 设置仓库镜像地址，可以加速下载镜像</span>
<span class="token function">vi</span> /etc/docker/daemon.json
<span class="token comment"># 写入内容</span>
<span class="token punctuation">{</span>
    <span class="token string">"log-driver"</span><span class="token builtin class-name">:</span> <span class="token string">"json-file"</span>,
    <span class="token string">"log-opts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"max-size"</span><span class="token builtin class-name">:</span> <span class="token string">"500m"</span><span class="token punctuation">}</span>,
    <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">"https://3laho3y3.mirror.aliyuncs.com"</span>
    <span class="token punctuation">]</span>,
    <span class="token string">"data-root"</span><span class="token builtin class-name">:</span> <span class="token string">"/data/app/docker"</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启docker</span>
systemctl daemon-reload
systemctl restart <span class="token function">docker</span>

<span class="token comment"># 设置开机启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>  Centos8 系统安装的时候可能会报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: 
 Problem: package docker-ce-3:19.03.13-3.el7.x86_64 requires containerd.io <span class="token operator">&gt;=</span> <span class="token number">1.2</span>.2-3, but none of the providers can be installed
  - cannot <span class="token function">install</span> the best candidate <span class="token keyword">for</span> the job
  - package containerd.io-1.2.10-3.2.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.13-3.1.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.13-3.2.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.2-3.3.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.2-3.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.4-3.1.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.5-3.1.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.2.6-3.3.el7.x86_64 is filtered out by modular filtering
  - package containerd.io-1.3.7-3.1.el7.x86_64 is filtered out by modular filtering
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  Centos8默认使用podman代替docker，所以需要containerd.io，那我们就安装一下就好了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> https://download.docker.com/linux/centos/8/x86_64/stable/Packages/containerd.io-1.4.12-3.1.el8.x86_64.rpm

<span class="token comment">#### 上面可能也会报错，可以先移除几个包再安装</span>
dnf remove <span class="token function">podman</span>
dnf remove buildah
或
yum erase <span class="token function">podman</span> buildah<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  阿里云alibaba cloud linux操作系统可能会报 <code>Unsupported distribution 'alinux' </code>错误，解决办法只能手动执行命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装工具包</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">-q</span> yum-utils
<span class="token comment"># 添加源</span>
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token comment"># 查看是否有可用安装包</span>
yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>
<span class="token comment"># 构建缓存</span>
yum makecache
<span class="token comment"># 安装</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span>  docker-ce
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装-docker-composer"><a href="#安装-docker-composer" class="headerlink" title="安装 docker-composer"></a>安装 docker-composer</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DOCKER_CONFIG</span><span class="token operator">=</span><span class="token variable">${DOCKER_CONFIG<span class="token operator">:-</span>$HOME<span class="token operator">/</span>.docker}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins
<span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
<span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="token function">chmod</span> +x <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="token function">docker</span> compose version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  参考：<a href="https://docs.docker.com/compose/install/linux/">Install Compose on Linux</a></p>
<h3 id="安装-htop、nginx、unzip、git"><a href="#安装-htop、nginx、unzip、git" class="headerlink" title="安装 htop、nginx、unzip、git"></a>安装 htop、nginx、unzip、git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">htop</span> nginx <span class="token function">unzip</span> <span class="token function">git</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装portainer，用于在线客户化管理docker"><a href="#安装portainer，用于在线客户化管理docker" class="headerlink" title="安装portainer，用于在线客户化管理docker"></a>安装<code>portainer</code>，用于在线客户化管理docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据卷</span>
<span class="token function">docker</span> volume create portainer_data

<span class="token comment"># 启动portainer容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9999</span>:9000 <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always portainer/portainer-ce

<span class="token comment"># 新建 /etc/nginx/conf.d/portainer.conf，写入</span>
server <span class="token punctuation">{</span>
  listen  <span class="token number">80</span><span class="token punctuation">;</span>
  server_name testportainer.xxx.com<span class="token punctuation">;</span>
  
  <span class="token comment"># 读取http头部的超时时间，单位秒，连接建立后，服务端接收http头部，规定时间内没收到，则超时，返回给客服端408（request time out）</span>
  client_header_timeout <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># 读取http body的超时时间，单位秒，连接建立后，服务端接收body，规定时间内没收到，则超时</span>
  client_body_timeout   <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># 发送响应超时时间，单位秒，服务端向客户端发送数据包，规定时间内客户端没收到，则超时</span>
  send_timeout          <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># 保持闲置连接的超时时间，单位秒，超过后服务器和浏览器都会关闭连接</span>
  keepalive_timeout     <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># nginx服务器与被代理服务连接超时时间，代理超时</span>
  proxy_connect_timeout <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># nginx服务器发送数据给被代理服务器超时时间，单位秒，规定时间内nginx服务器没发送数据，则超时</span>
  proxy_send_timeout    <span class="token number">600</span><span class="token punctuation">;</span>
  <span class="token comment"># nginx服务器接收被代理服务器数据超时时间，单位秒，规定时间内nginx服务器没收到数据，则超时</span>
  proxy_read_timeout    <span class="token number">600</span><span class="token punctuation">;</span>

  location / <span class="token punctuation">{</span>
    proxy_pass   http://127.0.0.1:9999<span class="token punctuation">;</span>
    proxy_set_header    X-Real-IP        <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
    proxy_set_header    X-Forwarded-For  <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
    proxy_set_header    HTTP_X_FORWARDED_FOR <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
    proxy_set_header    X-Forwarded-Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>
    proxy_redirect      default<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  location /api/websocket/ <span class="token punctuation">{</span>
    proxy_pass http://127.0.0.1:9999/api/websocket/<span class="token punctuation">;</span>
    proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>
    proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>
    proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="新建docker的network桥接网络"><a href="#新建docker的network桥接网络" class="headerlink" title="新建docker的network桥接网络"></a>新建docker的<code>network桥接</code>网络</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker network create docker1 
-o com.docker.network.bridge.name=docker1 
-o com.docker.network.bridge.host_binding_ipv4=0.0.0.0 
--driver=bridge --subnet=172.20.0.0/16 --gateway=172.20.0.1

docker network create --subnet=172.172.0.0/24 --gateway 172.172.0.1 nginx-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="查看新建网桥"><a href="#查看新建网桥" class="headerlink" title="查看新建网桥"></a>查看新建网桥</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker network ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/7f65a2db/djg017.png" class="" title="network">
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker network inspect docker1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/7f65a2db/djg018.png" class="" title="docker1">




<h3 id="使用docker运行redis"><a href="#使用docker运行redis" class="headerlink" title="使用docker运行redis"></a>使用docker运行<code>redis</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建 /root/docker/redis/docker-compose.yml</span>
version: <span class="token string">"3"</span>
networks:
  docker1:               <span class="token comment">### 自建的network</span>
    external: <span class="token boolean">true</span>
services: 
  redis:
    image: redis:5
    container_name: my_redis
    hostname: leeze-redis
    command: redis-server <span class="token parameter variable">--requirepass</span> yourpassword
    restart: always
    networks:
      docker1:
        ipv4_address: <span class="token number">172.20</span>.0.3               <span class="token comment">###容器固定ip </span>
    ports:
      - <span class="token string">"6379:6379"</span>
    volumes:
      - ./data:/data:cached
    logging: 
      driver: <span class="token string">"json-file"</span>
      options: 
        max-size: <span class="token string">"500m"</span>
  
<span class="token comment"># 运行</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">--build</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用docker运行mysql"><a href="#使用docker运行mysql" class="headerlink" title="使用docker运行mysql"></a>使用docker运行<code>mysql</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建 /root/docker/mysql/docker-compose.yml</span>
version: <span class="token string">"3"</span>
networks:
  docker1:               <span class="token comment">### 自建的network</span>
    external: <span class="token boolean">true</span>
services: 
  mysql:
    image: mysql:8
    container_name: mysql
    hostname: leeze-mysql
    command: mysqld --default-authentication-plugin<span class="token operator">=</span>mysql_native_password
    restart: always
    networks:
      docker1:
        ipv4_address: <span class="token number">172.20</span>.0.4               <span class="token comment">###容器固定ip </span>
    ports:
      - <span class="token string">"3306:3306"</span>
    environment:
      - <span class="token assign-left variable">MYSQL_PORT</span><span class="token operator">=</span><span class="token number">3306</span> 
      - <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>leeze 
      - <span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span>admin 
      - <span class="token assign-left variable">MYSQL_PASSWORD</span><span class="token operator">=</span>sysadmin 
      - <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>sysadmin 
    volumes:
      - ./data:/var/lib/mysql:cached
      - ./conf:/etc/mysql/conf.d:cached
      
      - ./data:/var/lib/mysql 
      - ./conf/mysql/my.cnf:/etc/my.cnf 
      - ./conf/mysql/conf.d:/etc/mysql/conf.d 
      - ./conf/mysql/mysql.conf.d:/etc/mysql/mysql.conf.d
    security_opt:
      - seccomp:unconfined
    logging: 
      driver: <span class="token string">"json-file"</span>
      options: 
        max-size: <span class="token string">"500m"</span>
      
<span class="token comment"># 运行</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">--build</span>

<span class="token comment"># 设置允许远程访问</span>
use mysql<span class="token punctuation">;</span>
update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where user <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
FLUSH PRIVILEGES<span class="token punctuation">;</span>
GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTION<span class="token punctuation">;</span>

<span class="token comment"># 设置最大连接数</span>
<span class="token builtin class-name">set</span> GLOBAL <span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">;</span>
<span class="token comment"># 查看最大连接数</span>
show variables like <span class="token string">'%max_connections%'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="生成ssh密钥，免密拉取代码"><a href="#生成ssh密钥，免密拉取代码" class="headerlink" title="生成ssh密钥，免密拉取代码"></a>生成<code>ssh密钥</code>，免密拉取代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成密钥</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa 
ssh-keygen <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-t</span> rsa  <span class="token comment"># 低版本</span>

<span class="token comment"># 将id_rsa.pub内容添加到代码服务器</span>
<span class="token builtin class-name">cd</span> ~/.ssh/
<span class="token function">cat</span> id_rsa.pub
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用docker安装Jenkins"><a href="#使用docker安装Jenkins" class="headerlink" title="使用docker安装Jenkins"></a>使用docker安装<code>Jenkins</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建 /root/docker/jenkins/docker-compose.yml</span>
version: <span class="token string">"3"</span>
networks:
  docker1:               <span class="token comment">### 自建的network</span>
    external: <span class="token boolean">true</span>
services: 
  jenkins:
    image: jenkinsci/blueocean
    container_name: jenkins
    hostname: leeze-jenkins
    restart: always
    networks:
      docker1:
        ipv4_address: <span class="token number">172.20</span>.0.5               <span class="token comment">###容器固定ip </span>
    ports:
      - <span class="token string">"49999:8080"</span>
      - <span class="token string">"50000:50000"</span>
    environment:
      JAVA_OPTS: <span class="token string">"-Duser.timezone=Asia/Shanghai"</span>
    volumes:
      - ./data:/var/jenkins_home:cached
    logging: 
      driver: <span class="token string">"json-file"</span>
      options: 
        max-size: <span class="token string">"500m"</span>

<span class="token comment"># 运行</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">--build</span>

<span class="token comment"># 解决权限错误问题</span>
<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span>:1000 data
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  权限问题解决之后，Jenkins会自动运行，并打印出一串随机密码:</p>
<img data-src="/post/7f65a2db/djg001.webp" class="" title="密码">

<p>  打开浏览器进入<code>127.0.0.1:49999</code>， 输入日志中的密码完成账号初始化</p>
<img data-src="/post/7f65a2db/djg002.webp" class="" title="初始化密码">

<p>  选择要安装的插件</p>
<img data-src="/post/7f65a2db/djg003.webp" class="" title="插件">

<p>  安装插件</p>
<img data-src="/post/7f65a2db/djg004.webp" class="" title="进入插件管理">

<p>  安装<code>publish over ssh</code>插件</p>
<img data-src="/post/7f65a2db/djg006.webp" class="" title="安装publish over ssh插件">

<p>  配置<code>publish over ssh</code>插件</p>
<img data-src="/post/7f65a2db/djg007.webp" class="" title="配置publish over ssh插件">

<p>  拉到最下面，新增服务器</p>
<img data-src="/post/7f65a2db/djg008.webp" class="" title="新增服务器">

<p>  配置 <code>gogs webhook</code></p>
<ol>
<li>过滤分支，只处理dev分支，</li>
<li>设置参数构建，区分测试和正式，这个参数后面的publish over ssh 插件要用</li>
</ol>
<img data-src="/post/7f65a2db/djg010.webp" class="" title="gogs">

<p>  设置构建后操作</p>
<img data-src="/post/7f65a2db/djg011.webp" class="" title="构建后">

<p>  点击<code>高级</code>按钮，设置把<code>branch</code>参数传入</p>
<img data-src="/post/7f65a2db/djg012.webp" class="" title="branch参数">

<p>  同样在<code>ssh server</code>选项中也点击高级，并设置label为test，表示如果构建的时候选择test，则会进入当前这个server，这样就可以针对不同的构建参数选择不同的主机进行相关操作。需要注意Exec command 的命令是到远程服务器上执行的，而不是Jenkins所在的机器。</p>
<img data-src="/post/7f65a2db/djg013.webp" class="" title="label">

<p>  配置完毕，开始构建测试吧</p>
<img data-src="/post/7f65a2db/djg014.webp" class="" title="构建测试">

<p>  可以看到默认是构建<code>test</code>，这个参数就是我们刚刚配置的。</p>
<p>  设置钩子，提交代码之后触发自动更新</p>
<img data-src="/post/7f65a2db/djg015.webp" class="" title="设置钩子">
<img data-src="/post/7f65a2db/djg016.webp" class="" title="设置钩子">


<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装 Maven私服 Nexus3</title>
    <url>/post/a6836d41.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  Nexus 是Maven仓库管理器，如果你使用Maven，你可以从Maven中央仓库 下载所需要的构件（artifact），但这通常不是一个好的做法，你应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，他还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。除此之外，Nexus还可以管理Docker镜像。</p>
<span id="more"></span>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>  <code>Centos</code>下安装<code>Docker</code>参考：<a href="/post/a00f9d53.html" title="Centos8安装Docker">Centos8安装Docker</a>。</p>
<h3 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull sonatype/nexus3:3.31.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/data/nexus3/nexus-data

<span class="token function">chmod</span> <span class="token number">777</span> /home/data/nexus3/nexus-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d -p 8081:8081 -p 8082:8082 -p 8083:8083 \
--name nexus3 \
--privileged=true \
--restart=unless-stopped \
-e NEXUS_CONTEXT=nexus \
-v /root/.docker/nexus3/nexus-data:/nexus-data \
sonatype/nexus3:3.31.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><blockquote>
<p>参数解释：<br><code>8081</code> 端口是nexus的服务端口<br><code>8082</code> 端口是用于host镜像仓库的服务端口<br><code>8083</code> 端口用户group镜像仓库的服务端口8083端口用户group镜像仓库的服务端口<br><code>NEXUS_CONTEXT=nexus</code> 表示在访问Nexus后台web时，需要带上nexus进行访问，如<a href="http://ip:8081/nexus">http://ip:8081/nexus</a></p>
</blockquote>
</div>

<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开放端口</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8081</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><p>  访问web地址：<code>http://10.211.55.81:8081/nexus</code><br>  默认账号为：<code>admin</code><br>  默认密码在文件中：<code>/home/data/nexus3/nexus-data/admin.password</code></p>
<h3 id="有关配置"><a href="#有关配置" class="headerlink" title="有关配置"></a>有关配置</h3><h4 id="配置阿里云公共仓库"><a href="#配置阿里云公共仓库" class="headerlink" title="配置阿里云公共仓库"></a>配置阿里云公共仓库</h4><p>  Nexus的maven-group的默认查找方式为：maven-releases –&gt; maven-snapshots –&gt; maven-central，我们在中间再加一个阿里云仓库，加快访问速度。</p>
<h5 id="新建maven-aliyun"><a href="#新建maven-aliyun" class="headerlink" title="新建maven-aliyun"></a>新建<code>maven-aliyun</code></h5><p>  依次点击：<code>设置</code> –&gt; <code>Repository</code> –&gt; <code>Repositories</code> –&gt; <code>Create repository</code>，选择<code>maven2 (proxy)</code></p>
<div class="note info no-icon"><p>仓库名字：maven-aliyun(随便填写)<br>阿里云远程maven仓库地址：<a href="https://maven.aliyun.com/repository/public">https://maven.aliyun.com/repository/public</a><br>其他选项：默认即可<br><code>参考</code>：<a href="https://maven.aliyun.com/mvn/guide">阿里云Maven中央仓库</a></p>
</div>
<img data-src="/post/a6836d41/nexus001.png" class="" title="maven-aliyun">
<h5 id="修改maven-public"><a href="#修改maven-public" class="headerlink" title="修改maven-public"></a>修改<code>maven-public</code></h5><p>  修改<code>maven-public</code>中的仓库引用及顺序：</p>
<img data-src="/post/a6836d41/nexus002.png" class="" title="maven-public引用顺序">

<br>

<p>  至此，配置完毕！我们在maven使用<code>maven-public</code>仓库地址的时候，会按照如下顺序访问：<br>  <code>本地仓库</code> –&gt; <code>私服maven-releases</code> –&gt; <code>私服maven-snapshots</code> –&gt; <code>远程阿里云maven仓库</code> –&gt; <code>远程中央仓库</code>。</p>
<h4 id="Maven配置使用Nexus"><a href="#Maven配置使用Nexus" class="headerlink" title="Maven配置使用Nexus"></a>Maven配置使用Nexus</h4><h5 id="Maven配置私服下载依赖"><a href="#Maven配置私服下载依赖" class="headerlink" title="Maven配置私服下载依赖"></a>Maven配置私服下载依赖</h5><blockquote>
<p>maven配置私服下载有两种方式:</p>
<p><code>setting.xml</code>：该文件配置的是全局模式<br><code>pom.xml</code>：该文件的配置的是项目独享模式</p>
<p>若pom.xml和setting.xml同时配置了，以pom.xml为准</p>
</blockquote>
<h5 id="setting-xml私服配置"><a href="#setting-xml私服配置" class="headerlink" title="setting.xml私服配置"></a>setting.xml私服配置</h5><p>  修改maven –&gt; conf –&gt; setting.xml:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
	 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--镜像名称 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>maven-public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://10.211.55.81:8081/nexus/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>		
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  当然，很有可能你并没有搭建私服，属于个人开发，那么也可以直接配置使用阿里云maven仓库</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--镜像名称 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo1.maven.org/maven2）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="pom-xml文件配置"><a href="#pom-xml文件配置" class="headerlink" title="pom.xml文件配置"></a>pom.xml文件配置</h5><p>  如果你配置了pom.xml，则以pom.xml为准.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>maven-nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://10.211.55.81:8081/nexus/repository/maven-public//<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  如果没有私服，也可以配置阿里云maven仓库</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>fail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Maven配置私服下载插件"><a href="#Maven配置私服下载插件" class="headerlink" title="Maven配置私服下载插件"></a>Maven配置私服下载插件</h4><h5 id="pom-xml的配置"><a href="#pom-xml的配置" class="headerlink" title="pom.xml的配置:"></a>pom.xml的配置:</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>maven-nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://10.211.55.81:8081/nexus/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Maven配置私服发布依赖"><a href="#Maven配置私服发布依赖" class="headerlink" title="Maven配置私服发布依赖"></a>Maven配置私服发布依赖</h4><p>  首先需要将Releases仓库和Snapshots仓库的“Deployment Policy”设置为“Allow Redeploy”。</p>
<ol>
<li>第一步，修改<code>setting.xml</code>文件，指定<code>releases</code>和<code>snapshots</code> server的用户名和密码<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>leeze<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>leeze<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>第二步，在项目的<code>pom.xml</code>文件中加入<code>distributionManagement</code>节点<br>  <code>注意：repository里的id需要和第一步里的server id名称保持一致</code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://10.211.55.81:8081/nexus/repository/maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://10.211.55.81:8081/nexus/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>第三步，执行发布<pre class="line-numbers language-maven" data-language="maven"><code class="language-maven">mvn deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>  登录Nexus，查看对应的仓库已经有相关的依赖包了.</p>
<div class="note success no-icon"><p>若项目版本号末尾带有 -SNAPSHOT，则会发布到snapshots快照版本仓库<br>若项目版本号末尾带有 -RELEASES 或什么都不带，则会发布到releases正式版本仓库</p>
</div>


<h4 id="上传第三方jar"><a href="#上传第三方jar" class="headerlink" title="上传第三方jar"></a>上传第三方jar</h4><img data-src="/post/a6836d41/nexus003.png" class="" title="jar-upload">


<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>一直报错<code> UnknownHostException: rhc.sonatype.com</code>，参考：<a href="/post/3458217c.html" title="解决Docker容器内无法解析DNS的问题">解决Docker容器内无法解析DNS的问题</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 字符颜色输出</title>
    <url>/post/120400e.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  没啥的，搞点颜色看看。</p>
<span id="more"></span>

<h3 id="整理下Linux-输出显示-字体颜色"><a href="#整理下Linux-输出显示-字体颜色" class="headerlink" title="整理下Linux  输出显示 字体颜色"></a>整理下Linux  输出显示 字体颜色</h3><div class="note info no-icon"><p>编码 颜色/动作<br>0 重新设置属性到缺省设置<br>1 设置粗体<br>2 设置一半亮度(模拟彩色显示器的颜色)<br>4 设置下划线(模拟彩色显示器的颜色)<br>5 设置闪烁<br>7 设置反向图象<br>22 设置一般密度<br>24 关闭下划线<br>25 关闭闪烁<br>27 关闭反向图象<br>30 设置黑色前景<br>31 设置红色前景<br>32 设置绿色前景<br>33 设置棕色前景<br>34 设置蓝色前景<br>35 设置紫色前景<br>36 设置青色前景<br>37 设置白色前景<br>38 在缺省的前景颜色上设置下划线<br>39 在缺省的前景颜色上关闭下划线<br>40 设置黑色背景<br>41 设置红色背景<br>42 设置绿色背景<br>43 设置棕色背景<br>44 设置蓝色背景<br>45 设置紫色背景<br>46 设置青色背景<br>47 设置白色背景<br>49 设置缺省黑色背景</p>
</div>


<h3 id="输出方式："><a href="#输出方式：" class="headerlink" title="输出方式："></a>输出方式：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> 输出格式：echo-e<span class="token string">"<span class="token entity" title="\033">\033</span>[字背景颜色;文字颜色m字符串<span class="token entity" title="\033">\033</span>[0m"</span> 
<span class="token comment">### 字体色范围：30-37  </span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[30m 黑色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[31m 红色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[32m 绿色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[33m 黄色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[34m 蓝色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[35m 紫色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[36m 天蓝字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[37m 白色字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token comment">### 字背景颜色范围：40-47  </span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[40;37m 黑底白字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[41;30m 红底黑字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[42;34m 绿底蓝字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[43;34m 黄底蓝字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[44;30m 蓝底黑字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[45;30m 紫底黑字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[46;30m 天蓝底黑字 <span class="token entity" title="\033">\033</span>[0m"</span>  
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[47;34m 白底蓝字 <span class="token entity" title="\033">\033</span>[0m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[1;4;5;7;41;33m 红底黄字高亮加粗 下划线 闪动 背景字体颜色反向显示 <span class="token entity" title="\033">\033</span>[0m"</span> 
注释：
<span class="token number">1</span> - 加粗
<span class="token number">4</span> -下划线
<span class="token number">5</span> - 闪动
<span class="token number">7</span> - 使背景字体颜色相反
<span class="token number">41</span> - 背景黄色
<span class="token number">33</span> - 字体红色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装部署Jenkins</title>
    <url>/post/78357a82.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  记录下 Docker 下 Jenkins 的安装。<br>  DockerHub: <a href="https://hub.docker.com/r/jenkins/jenkins/">https://hub.docker.com/r/jenkins/jenkins/</a></p>
<span id="more"></span>

<h3 id="查看docker的jenkins镜像版本"><a href="#查看docker的jenkins镜像版本" class="headerlink" title="查看docker的jenkins镜像版本"></a>查看docker的jenkins镜像版本</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#查看jenkins版本命令</span>
docker search jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="远程拉取镜像"><a href="#远程拉取镜像" class="headerlink" title="远程拉取镜像"></a>远程拉取镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#拉取镜像命令(不标注表示最新的)</span>
docker pull jenkins/jenkins
docker pull jenkinsci/blueocean (推荐)
docker pull jenkins/jenkins:2.289.1-lts-centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h3><p>  挂载目录用于映射jenkins的jenkins_home下的配置文件等信息。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#本文的挂载目录是home下</span>
<span class="token function">mkdir</span> /home/jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>重点：此目录需要设置权限，否则启动容器报错权限错误</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改权限（1000:1000 是UID和GID）</span>
<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span>:1000 /home/jenkins/
<span class="token function">chmod</span> <span class="token number">777</span> /var/run/docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="安装-maven"><a href="#安装-maven" class="headerlink" title="安装 maven"></a>安装 maven</h3><pre class="line-numbers language-none"><code class="language-none">wget https://dlcdn.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar -zxvf apache-maven-3.6.3-bin.tar.gz
mv apache-maven-3.6.3-bin.tar.gz /usr/local
ln -s /usr/local/apache-maven-3.6.3 maven<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改配置文件<code>settings.xml</code>,使用了阿里云的Maven仓库 （可选）<br><code>cd apache-maven-3.6.3/conf</code><br><code>vi settings.xml</code></p>
<pre class="line-numbers language-none"><code class="language-none"> &lt;mirror&gt;
    &lt;id&gt;aliyunmaven&lt;/id&gt;
    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
    &lt;name&gt;阿里云公共仓库&lt;/name&gt;
    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;
&lt;/mirror&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加环境变量 <code>vi /etc/profile</code></p>
<pre class="line-numbers language-none"><code class="language-none">export M2_HOME=/usr/local/maven                                                                                                                                                                                          
export PATH=$PATH:${M2_HOME}/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>source /etc/profile</code></p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d --name=myjenkins \
-p 8000:8080 -p 50000:50000 \
--restart=unless-stopped \
--privileged=true \
-u root \
-e TZ="Asia/Shanghai" \
-v /etc/localtime:/etc/localtime \
-v /home/jenkins:/var/jenkins_home \
-v /var/run/docker.sock:/var/run/docker.sock \
jenkins/jenkins:2.289.1-lts-centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  –network docker-net <br>  –cpus 2 <br>  –memory 2G \</p>
<ul>
<li><code>-p</code> : 映射端口，宿主机端口：容器端口</li>
<li><code>-v</code> : 挂载，宿主机目录：容器目录</li>
<li><code>--name</code> : 自定义容器名</li>
<li><code>-u</code> : 权限用户名</li>
<li><code>--privileged</code> : 使用该参数，container内的root拥有真正的root权限，否则，container（容器）内的root只是外部的一个普通用户权限，privileged启动的容器可以看到很多host上的设备，并且可以执行mount，甚至允许你在docker容器内启动docker容器。</li>
<li> <code>-p 50000:50000</code> : 如果您在其他机器上设置了一个或多个基于JNLP的Jenkins代理程序，而这些代理程序又与 jenkinsci/blueocean 容器交互（充当“主”Jenkins服务器，或者简称为“Jenkins主”）， 则这是必需的。默认情况下，基于JNLP的Jenkins代理通过TCP端口50000与Jenkins主站进行通信。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">docker run -d --name=myjenkins \
--net mynet --ip 172.172.0.12 \
-p 8000:8080 -p 50000:50000 \
--restart=unless-stopped \
--privileged=true \
-u root \
-e TZ="Asia/Shanghai" \
-e JAVA_OPTS=-Duser.timezone=Asia/Shanghai \
-v /etc/localtime:/etc/localtime \
-v /root/docker_data/jenkins:/var/jenkins_home \
-v /usr/java/jdk1.8.0_311-amd64:/usr/local/java \
-v /usr/local/maven:/usr/local/maven \
-v /var/run/docker.sock:/var/run/docker.sock \
-v /usr/bin/docker:/usr/bin/docker \
 jenkins/jenkins:2.318-jdk11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>  进入刚才设置的挂载目录 /home/jenkins 内:</p>
<ol>
<li>首先修改hudson.model.UpdateCenter.xml配置文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#默认路径</span>
http://updates.jenkins-ci.org/update-center.json

<span class="token comment">#改成路径</span>
http://mirror.xmission.com/jenkins/updates/update-center.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>完成后修改 /updates/default.json 配置文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#默认路径</span>
<span class="token string">"connectionCheckUrl"</span><span class="token builtin class-name">:</span><span class="token string">"http://www.google.com/"</span> 

<span class="token comment">#改为路径</span>
<span class="token string">"connectionCheckUrl"</span><span class="token builtin class-name">:</span><span class="token string">"http://www.baidu.com/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="重启jenkins容器"><a href="#重启jenkins容器" class="headerlink" title="重启jenkins容器"></a>重启jenkins容器</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#重启jenkins容器</span>
docker restart myjenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>  <code>jenkins，插件下载时好多失败的</code>:<br>  进入管理页面，点击高级，更改升级站点下的url为 <code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code> ，点击提交，再点击立即获取（重要）</p>
<br>

<blockquote>
<p>参考：<br><a href="https://www.cnblogs.com/straycats/p/14033405.html"> docker 部署jenkins </a><br><a href="https://www.cnblogs.com/nhdlb/p/12576273.html"> Docker：docker安装部署jenkins </a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 删除所有悬虚镜像（name 为none , tag 为 none）</title>
    <url>/post/d2e31b5e.html</url>
    <content><![CDATA[<h3 id="什么是-悬虚镜像"><a href="#什么是-悬虚镜像" class="headerlink" title="什么是 悬虚镜像"></a>什么是 悬虚镜像</h3><p>  悬虚镜像就是镜像没有仓库名或没有标签查询显示虚悬镜像，在列表中展示为<code> &lt;none&gt;:&lt;none&gt;</code></p>
<span id="more"></span>

<h3 id="悬虚镜像-怎么来的"><a href="#悬虚镜像-怎么来的" class="headerlink" title="悬虚镜像 怎么来的"></a>悬虚镜像 怎么来的</h3><p>  有时候在构建新镜像的时候，为这个镜像打了一个已经存在的tag，此时Docker 会移除旧镜像上的tag,将这个tag 用在新的镜像上，此时旧镜像就变成了悬虚镜像, 或者构建新镜像报错时，也会生成一个悬虚镜像。</p>
<h3 id="删除悬虚镜像"><a href="#删除悬虚镜像" class="headerlink" title="删除悬虚镜像"></a>删除悬虚镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker image prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="删除没有使用的镜像"><a href="#删除没有使用的镜像" class="headerlink" title="删除没有使用的镜像"></a>删除没有使用的镜像</h3><p>  在命令<code>docker image prune</code>加上参数<code>-a</code>，可以删除没有被任何容器使用的镜像。</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker image prune -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  输入<code>y</code>即可删除。</p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker images | grep none | awk '{print $3}' | xargs docker rmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">
docker ps -a|grep "Exited" | awk '{print $1}' | xargs docker stop
docker ps -a|grep "Exited" | awk '{print $1}' | xargs docker rm
docker images|grep none|awk '{print $3}'|xargs docker rmi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 添加定时任务，批量删除tag 为none 的镜像  ，释放磁盘空间</span>
[root@loaclhost]:~# crontab -l
 */ * * * /usr/bin/docker rmi `docker images|grep none| awk '{print $3}'`
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker rmi $(docker images -f "dangling=true" -q)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之使用Gitea+Drone实现持续集成(CI/CD)</title>
    <url>/post/3abef87b.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note success no-icon"><p>  在开发或生产环境中，我们经常会搞一套自动化部署方案（俗称一键部署）。比较流行的一种就是Gitlab+Jenkins实现方案，不过这种方案占用内存比较大，没有个8G内存，很难流畅运行，而且部署起来也不快。最近发现一款神器Drone，轻量级CI/DI工具，结合Gogs使用内存占用不到1G，几行脚本就能实现自动化部署，推荐给大家！</p>
</div>
<span id="more"></span>

<h3 id="安装Gitea"><a href="#安装Gitea" class="headerlink" title="安装Gitea"></a>安装<code>Gitea</code></h3><div class="note success no-icon"><p>  Gitea 是一个开源社区驱动的 Gogs 克隆, 是一个轻量级的代码托管解决方案，后端采用 Go 编写，采用 MIT 许可证.<br>  Gitea的是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。采用Go作为后端语言，只要生成一个可执行程序即可。并且它还支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构，除了x86，amd64，还包括 ARM 和 PowerPC。</p>
</div>
<p>  安装过程，参考：<a href="/post/853577ec.html" title="【Docker】之安装Gitea">【Docker】之安装Gitea</a></p>
<h3 id="安装Drone"><a href="#安装Drone" class="headerlink" title="安装Drone"></a>安装<code>Drone</code></h3><div class="note success no-icon"><p>  Drone是一种基于容器技术的持续交付系统。Drone使用简单的YAML配置文件（docker-compose的超集）来定义和执行Docker容器中的Pipelines。<br>  Drone与流行的源代码管理系统无缝集成，包括GitHub，GitHub Enterprise，Bitbucket等。<br>  Drone附上官网文档地址：<a href="https://docs.drone.io/">https://docs.drone.io/</a></p>
</div>

<ol>
<li>首先下载Drone的Server和Runner的镜像；<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Drone的Server</span>
docker pull drone/drone
<span class="token comment"># Drone的Runner</span>
docker pull drone/drone-runner-docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><ul>
<li>这里有个Server和Runner的概念，我们先来理解下； <ul>
<li>Server：为Drone的管理提供了Web页面，用于管理从Git上获取的仓库中的流水线任务。 </li>
<li>Runner：一个单独的守护进程，会轮询Server，获取需要执行的流水线任务，之后执行。</li>
</ul>
</li>
</ul>
</div></li>
<li>生成GiteaOauth<br>  gitea右上角-&gt;设置-&gt;应用-&gt;创建应用  <img data-src="/post/3abef87b/drone001.png" class="" title="创建新的 OAuth2 应用程序">   
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">客户端id</span> <span class="token punctuation">:</span> <span class="token value attr-value">f4d1e22d-b092-4e86-bedd-dffb362b1c70</span>
<span class="token key attr-name">客户端秘钥</span> <span class="token punctuation">:</span> <span class="token value attr-value">EBjiksxi7QBaAtY9cIisGY36Ghr81Y4vtk2uqj8g5qEa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  生成rpc秘钥: <code>openssl rand -hex 16 </code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@loaclhost build<span class="token punctuation">]</span><span class="token comment"># openssl rand -hex 16 </span>
1bd0710533d6ade9ab943df6822e7e1d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  这个用于<code>DRONE_RPC_SECRET</code>，当然也可随便设置值（dronerpc666）</li>
<li>接下来我们来安装<code>drone-server</code>，使用如下命令即可；<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run \
--net docker-mynet --ip 172.172.0.12 \
--volume=/root/.docker/drone/data:/data/docker/drone \
--env=DRONE_AGENTS_ENABLED=true \
--env=DRONE_GIT_ALWAYS_AUTH=true \
--env=DRONE_GITEA_SERVER=http://10.211.55.81:3000 \
--env=DRONE_GITEA_CLIENT_ID=f4d1e22d-b092-4e86-bedd-dffb362b1c70 \
--env=DRONE_GITEA_CLIENT_SECRET=EBjiksxi7QBaAtY9cIisGY36Ghr81Y4vtk2uqj8g5qEa \
--env=DRONE_RPC_SECRET=1bd0710533d6ade9ab943df6822e7e1d \
--env=DRONE_SERVER_HOST=10.211.55.81:3080 \
--env=DRONE_SERVER_PROTO=http \
--env=DRONE_USER_CREATE=username:leeze,admin:true \
--publish=3080:80 \
--publish=10443:443 \
--restart=always \
--detach=true \
--name=drone \
drone/drone:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 这里的配置参数比较多，下面统一解释下；</span>
<span class="token key attr-name">DRONE_AGENTS_ENABLED</span> <span class="token punctuation">:</span> <span class="token value attr-value">是否开启身份验证</span>
<span class="token key attr-name">DRONE_GITEA_SERVER</span> <span class="token punctuation">:</span> <span class="token value attr-value">Gitea服务器地址((建议填写宿主机地址+端口, 需要`http://`开头))</span>
<span class="token key attr-name">DRONE_GITEA_CLIENT_ID</span> <span class="token punctuation">:</span> <span class="token value attr-value">应用的客户端id(gitea上生成的Client ID)</span>
<span class="token key attr-name">DRONE_GITEA_CLIENT_SECRET</span> <span class="token punctuation">:</span> <span class="token value attr-value">应用的客户端秘钥(gitea上生成的Client Secret)</span>
<span class="token key attr-name">DRONE_RPC_SECRET</span> <span class="token punctuation">:</span> <span class="token value attr-value">Drone的共享秘钥，用于验证连接到server的rpc连接，server和runner需要提供同样的秘钥。(后面安装runner使用相同的秘钥)</span>
<span class="token key attr-name">DRONE_SERVER_HOST</span> <span class="token punctuation">:</span> <span class="token value attr-value">Drone服务地址，外部可访问的域名或IP地址(建议填写宿主机地址+端口, 不需要`http://`开头)</span>
<span class="token key attr-name">DRONE_SERVER_PROTO</span> <span class="token punctuation">:</span> <span class="token value attr-value">Drone提供服务的协议类型(可选为`http`或`https`)</span>
<span class="token key attr-name">DRONE_USER_CREATE</span> <span class="token punctuation">:</span> <span class="token value attr-value">设置Drone管理员账号(`注意设置的是Gitea平台里的账号`), `Drone`是直接使用`Gogs账号`登录的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  调试阶段建议启动设置<code>detach=false</code>, 这样可以查看日志输出</li>
<li>接下来安装<code>drone-runner-docker</code>，当有需要执行的任务时，会启动临时的容器来执行流水线任务；<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d \
-v /var/run/docker.sock:/var/run/docker.sock \
--net docker-mynet --ip 172.172.0.13 \
-e DRONE_RPC_PROTO=http \
-e DRONE_RPC_HOST=10.211.55.81:3080 \
-e DRONE_RPC_SECRET=1bd0710533d6ade9ab943df6822e7e1d \
-e DRONE_RUNNER_CAPACITY=2 \
-e DRONE_RUNNER_NAME=runner-docker \
-e TZ="Asia/Shanghai" \
-p 3010:3000 \
--restart always \
--name runner-docker \
drone/drone-runner-docker:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 这里的配置参数比较多，下面统一解释下。</span>
<span class="token key attr-name">DRONE_RPC_PROTO</span> <span class="token punctuation">:</span> <span class="token value attr-value">用于配置连接到Drone server的协议(必须是`http`或`https`)</span>
<span class="token key attr-name">DRONE_RPC_HOST</span> <span class="token punctuation">:</span> <span class="token value attr-value">用于配置Drone server的访问地址，runner会连接到server获取流水线任务并执行。</span>
<span class="token key attr-name">DRONE_RPC_SECRET</span> <span class="token punctuation">:</span> <span class="token value attr-value">用于配置连接到Drone server的共享秘钥。</span>
<span class="token key attr-name">DRONE_RUNNER_CAPACITY</span> <span class="token punctuation">:</span> <span class="token value attr-value">限制runner并发执行的流水线任务数量(默认2)。</span>
<span class="token key attr-name">DRONE_RUNNER_NAME</span> <span class="token punctuation">:</span> <span class="token value attr-value">自定义runner的名称。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>开放相关端口：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3080</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Drone使用"><a href="#Drone使用" class="headerlink" title="Drone使用"></a><code>Drone</code>使用</h3>  让我们来访问下<code>Drone</code>的控制台页面，第一次登录需要输入账号密码（在Gitea中注册的账号），访问地址：<a href="http://10.211.55.81:3080/">http://10.211.55.81:3080/</a></li>
</ol>
<p>  此时我们在Gitea中的项目会现在在列表中，如果没有的话可以点下<code>SYNC</code>按钮；</p>
<img data-src="/post/3abef87b/drone002.png" class="" title="同步项目">
<p>  接下来我们需要对仓库进行设置，将仓库设置为<code>Trusted</code>（否则Drone创建的容器无法挂载目录到宿主机），最后点击<code>SAVE</code>按钮保存；</p>
<img data-src="/post/3abef87b/drone003.png" class="" title="仓库设置一">
<img data-src="/post/3abef87b/drone004.png" class="" title="仓库设置二">
<p>  保存成功后会在<code>Gitea</code>中自动配置一个<code>Web钩子</code>，当我们推送代码到Gitea中去时，会触发这个钩子，然后执行在Drone中的流水线任务；</p>
<img data-src="/post/3abef87b/drone005.png" class="" title="Web钩子">
<p>  拉到最下面，我们可以发送一个测试推送，推送成功会显示绿色的√；</p>
<img data-src="/post/3abef87b/drone006.png" class="" title="Web钩子">
<img data-src="/post/3abef87b/drone007.png" class="" title="Web钩子">
<p>  此时我们在<code>Drone</code>中发现其实流水线执行失败了，那是因为我们在脚本中引用了<code>Secret</code>中的<code>ssh_password</code>；</p>
<img data-src="/post/3abef87b/drone008.png" class="" title="ssh_password">
<p>  在仓库的设置中添加一个<code>Secret</code>即可，Secret是专门用来存储密码的，此密码只能被使用或删除，无法被查看；</p>
<img data-src="/post/3abef87b/drone009.png" class="" title="Secret密码">
<p>  在<code>ACTIVITY FEED</code>中使用<code>RESTART</code>可以重新执行该流水线，发现已经成功执行。</p>
<img data-src="/post/3abef87b/drone010.png" class="" title="RESTART">
<img data-src="/post/3abef87b/drone011.png" class="" title="SUCCESS">

<h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><div class="note success no-icon"><p>  当我们向Git仓库<code>Push</code>代码时，会自动触发<code>Web钩子</code>，然后<code>Drone</code>就会从Git仓库<code>Clone</code>代码，再通过项目目录下的<code>.drone.yml</code>配置，执行相应的流水线，接下来我们来看看这个脚本是如何写的。</p>
</div>
<ol>
<li>项目结构<img data-src="/post/3abef87b/drone013.png" class="" title="SUCCESS"></li>
<li>首先我们来了解下在<code>.drone.yml</code>中配置的工作流都有哪些操作，看下流程图就知道了；<img data-src="/post/3abef87b/drone012.png" class="" title="流程"></li>
<li>再来一个完整的<code>.drone.yml</code>，配上详细的注解，看下就基本懂了！<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> pipeline <span class="token comment"># 定义对象类型，还有secret和signature两种类型</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> docker <span class="token comment"># 定义流水线类型，还有kubernetes、exec、ssh等类型</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> mybatisplus<span class="token punctuation">-</span>drone <span class="token comment"># 定义流水线名称</span>

<span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment"># 定义流水线执行步骤，这些步骤将顺序执行</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> package <span class="token comment"># 流水线名称</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> maven<span class="token punctuation">:</span>3<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># 定义创建容器的Docker镜像</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 将容器内目录挂载到宿主机，仓库需要开启Trusted设置</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maven<span class="token punctuation">-</span>cache
        <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/.m2 <span class="token comment"># 将maven下载依赖的目录挂载出来，防止重复下载</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maven<span class="token punctuation">-</span>build
        <span class="token key atrule">path</span><span class="token punctuation">:</span> /app/build <span class="token comment"># 将应用打包好的Jar和执行脚本挂载出来</span>
    <span class="token key atrule">commands</span><span class="token punctuation">:</span> <span class="token comment"># 定义在Docker容器中执行的shell命令</span>
      <span class="token punctuation">-</span> mvn clean package <span class="token comment"># 应用打包命令</span>
      <span class="token punctuation">-</span> cp mybatisplus/target/mybatisplus<span class="token punctuation">-</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT.jar /app/build/mybatisplus.jar
      <span class="token punctuation">-</span> cp Dockerfile /app/build/Dockerfile
      <span class="token punctuation">-</span> cp run.sh /app/build/run.sh

  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build<span class="token punctuation">-</span>start
    <span class="token key atrule">image</span><span class="token punctuation">:</span> appleboy/drone<span class="token punctuation">-</span>ssh <span class="token comment"># SSH工具镜像</span>
    <span class="token key atrule">settings</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> 10.211.55.81 <span class="token comment"># 远程连接地址</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root <span class="token comment"># 远程连接账号</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span>
        <span class="token key atrule">from_secret</span><span class="token punctuation">:</span> ssh_password <span class="token comment"># 从Secret中读取SSH密码</span>
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span> <span class="token comment"># 远程连接端口</span>
      <span class="token key atrule">command_timeout</span><span class="token punctuation">:</span> 5m <span class="token comment"># 远程执行命令超时时间</span>
      <span class="token key atrule">script</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> cd /mydata/maven/build <span class="token comment"># 进入宿主机构建目录</span>
        <span class="token punctuation">-</span> chmod +x run.sh <span class="token comment"># 更改为可执行脚本</span>
        <span class="token punctuation">-</span> ./run.sh <span class="token comment"># 运行脚本打包应用镜像并运行</span>

<span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 定义流水线挂载目录，用于共享数据</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maven<span class="token punctuation">-</span>build
    <span class="token key atrule">host</span><span class="token punctuation">:</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> /mydata/maven/build <span class="token comment"># 从宿主机中挂载的目录</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> maven<span class="token punctuation">-</span>cache
    <span class="token key atrule">host</span><span class="token punctuation">:</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> /mydata/maven/cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Dockerfile<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 该镜像需要依赖的基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> clockard/alpine-java:8_jdk</span>
<span class="token instruction"><span class="token keyword">LABEL</span> maintainer=<span class="token string">"mybatisplus"</span> <span class="token operator">\</span>
      version=<span class="token string">"1.0.0"</span> <span class="token operator">\</span>
      description=<span class="token string">"This is mybatisplus's test."</span></span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"Asia/Shanghai"</span> &gt; /etc/timezone</span>
<span class="token comment"># 将当前目录下的jar包复制到docker容器的/目录下</span>
<span class="token instruction"><span class="token keyword">ADD</span> mybatisplus.jar /app/mybatisplus.jar</span>
<span class="token comment"># 指定docker容器启动时运行jar包</span>
<span class="token comment">#在容器启动的时候运行命令，来启动我们的项目</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app/mybatisplus.jar"</span>,<span class="token string">"-Xms128m"</span>,<span class="token string">"-Xmx128m"</span>,<span class="token string">"-c"</span>]</span>
<span class="token comment"># 指定维护者的名字</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> leeze</span>
```   
5. `run.sh`执行脚本可以实现打包应用和运行容器镜像
```bash
<span class="token comment">#!/usr/bin/env bash</span>
<span class="token comment"># 定义应用组名</span>
group_name='zancunli'
<span class="token comment"># 定义应用名称</span>
app_name='mybatisplus'
<span class="token comment"># 定义应用版本</span>
app_version='1.0.0'
<span class="token comment"># 定义应用环境</span>
<span class="token comment">#profile_active='prod'</span>
echo '----copy jar----'
docker stop ${app_name}
echo '----stop container----'
docker rm ${app_name}
echo '----rm container----'
docker rmi ${group_name}/${app_name}:${app_version}
echo '----rm image----'
<span class="token comment"># 打包编译docker镜像</span>
docker build -t ${group_name}/${app_name}:${app_version} .
echo '----build image----'
docker run -p 7080:9091 --name ${app_name}  --net docker-mynet --ip 172.172.0.88 \
-e TZ="Asia/Shanghai" \
-v /etc/localtime:/etc/localtime \
-v /mydata/app/${app_name}/logs:/var/logs \
-d ${group_name}/${app_name}:${app_version} \
echo '----start container----'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>运行成功<br>  浏览器：<a href="http://10.211.55.81:7080/user/list">http://10.211.55.81:7080/user/list</a>    ，成功取到数据</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><code>gitea &amp; drone webhook推送不成功</code><br> 修改 Gitea 服务器的 Webhook 白名单<br> 出于安全考虑，您通过 Gitea Webhook 触发外部服务器的响应前需要设定 <code>webhook.ALLOWED_HOST_LIST</code> 白名单来控制 Webhook 的目的地址。具体信息参考文档 <a href="https://docs.gitea.io/en-us/config-cheat-sheet/#webhook-webhook">Webhook</a>。<br> 修改配置时，打开 <code>conf/app.ini</code>，添加 <code>ALLOWED_HOST_LIST = *</code> 到 [<code>webhook</code>] 栏目中，并重启 Gitea 服务器。例如： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>webhook<span class="token punctuation">]</span>
ALLOWED_HOST_LIST <span class="token operator">=</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 gitea/conf/app.ini</span>

<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span>
ALLOWED_HOST_LIST <span class="token operator">=</span> <span class="token number">192.168</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p>官方文档：<a href="https://docs.drone.io/">https://docs.drone.io/</a><br>结合Maven使用：<a href="https://docs.drone.io/pipeline/kubernetes/examples/language/maven/">https://docs.drone.io/pipeline/kubernetes/examples/language/maven/</a><br>结合SSH使用：<a href="http://plugins.drone.io/appleboy/drone-ssh/">http://plugins.drone.io/appleboy/drone-ssh/</a><br>将容器目录挂载到宿主机：<a href="https://docs.drone.io/pipeline/docker/syntax/volumes/host/">https://docs.drone.io/pipeline/docker/syntax/volumes/host/</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Drone</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装Gitea</title>
    <url>/post/853577ec.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  Gitea是一个极易安装，运行非常快速，安装和使用体验良好的自建Git服务。采用Go作为后端语言，这使得只要生成一个可执行程序即可。并且他还支持跨平台，支持Linux、macOS和Windows以及各种架构，除了x86，amd64，还包括ARM和 PowerPC。</p>
<p>  Github地址：<a href="https://github.com/go-gitea/gitea">https://github.com/go-gitea/gitea</a></p>
<span id="more"></span>

<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><div class="note info no-icon"><ol>
<li>支持活动时间线</li>
<li>支持SSH以及HTTP/HTTPS协议</li>
<li>支持SMTP、LDAP和反向代理的用户认证</li>
<li>支持反向代理子路径</li>
<li>支持用户、组织和仓库管理系统</li>
<li>支持添加和删除仓库协作者</li>
<li>支持仓库和组织级别Web钩子（包括Slack集成）</li>
<li>支持仓库Git钩子和部署密钥</li>
<li>支持仓库工单（Issue）、合并请求（Pull Request）以及Wiki</li>
<li>支持迁移和镜像仓库以及它的Wiki</li>
<li>支持在线编辑仓库文件和Wiki</li>
<li>支持自定义源的Gravatar和Federated Avatar</li>
<li>支持邮件服务</li>
<li>支持后台管理面板</li>
<li>支持MySQL、PostgreSQL、SQLite3、MSSQL和TiDB（实验性支持）数据库</li>
<li>支持多语言本地化（21种语言）</li>
</ol>
</div>

<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull gitea/gitea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/dockerdata/gitea/data

<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">10022</span>:22 <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>gitea <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>
<span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/gitea/data:/data <span class="token punctuation">\</span>
<span class="token parameter variable">-d</span> gitea/gitea:latest

<span class="token comment"># --privileged=true 使用该参数，container内的root拥有真正的root权限（可根据需要选择是否要该参数）</span>
<span class="token comment"># --restart=always  自动重启容器（可根据需要选择是否要该参数）</span>
<span class="token comment"># -p 端口映射（宿主机端口：容器端口）</span>
<span class="token comment"># -v 容器卷挂载 （宿主机目录 ：容器目录）</span>
<span class="token comment"># --net mybridge --ip=172.17.0.7 \ 自定义网络固定IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">10022</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3000</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="持久化需要用到数据库"><a href="#持久化需要用到数据库" class="headerlink" title="持久化需要用到数据库"></a>持久化需要用到数据库</h3><ol>
<li>创建mysql容器<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>
<span class="token parameter variable">--net</span> docker-mynet <span class="token parameter variable">--ip</span> <span class="token number">172.172</span>.0.5  <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /Users/lizhang/docker/mysql/conf/my.cnf:/etc/mysql/conf.d/mysqld.cnf <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /Users/lizhang/docker/mysql/data:/var/lib/mysql <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /Users/lizhang/docker/mysql/logs:/var/log/mysql <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">12345678</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-d</span> mysql:8.0.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>配置远程访问（root）,使用shell命令<div class="note info no-icon"><p>进入mysql 容器 <code>docker exec -it mysql bash</code><br>登录mysql <code>mysql -u root -p</code><br>使用mysql 数据库 <code>use mysql;</code><br>配置权限并刷新：<br><code>ALTER USER 'root'@'%' I：DENTIFIED WITH mysql_native_password BY 'password';</code><br><code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';</code><br><code>FLUSH PRIVILEGES;</code></p>
</div></li>
<li>远程连接mysql 并创建<code>gitea</code>数据库<br>  如果您使用 MySQL，请使用 <code>INNODB</code> 引擎以及 <code>utf8mb4</code> 字符集</li>
</ol>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>  访问<code>http://10.211.55.81:3000/</code>,如下图修改</p>
<img data-src="/post/853577ec/gitea-001.png" class="" title="Gitea配置">

<p>  <code>或者</code></p>
<p>  修改下<code>app.ini</code>的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/.docker/gitea/data/gitea/conf
<span class="token function">vi</span> app.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[server]
<span class="token key attr-name">APP_DATA_PATH</span>    <span class="token punctuation">=</span> <span class="token value attr-value">/data/gitea</span>
<span class="token key attr-name">DOMAIN</span>           <span class="token punctuation">=</span> <span class="token value attr-value">10.211.55.81</span>
<span class="token key attr-name">SSH_DOMAIN</span>       <span class="token punctuation">=</span> <span class="token value attr-value">10.211.55.81</span>
<span class="token key attr-name">HTTP_PORT</span>        <span class="token punctuation">=</span> <span class="token value attr-value">3000</span>
<span class="token key attr-name">ROOT_URL</span>         <span class="token punctuation">=</span> <span class="token value attr-value">http://10.211.55.81:3000/</span>
<span class="token key attr-name">DISABLE_SSH</span>      <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
<span class="token key attr-name">SSH_PORT</span>         <span class="token punctuation">=</span> <span class="token value attr-value">10022</span>
<span class="token key attr-name">SSH_LISTEN_PORT</span>  <span class="token punctuation">=</span> <span class="token value attr-value">22</span>
<span class="token key attr-name">LFS_START_SERVER</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">LFS_CONTENT_PATH</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/git/lfs</span>
<span class="token key attr-name">LFS_JWT_SECRET</span>   <span class="token punctuation">=</span> <span class="token value attr-value">kah2Fn5CWTTvaNpJopZUcsIsSLvNF91c1xdwS49BPJQ</span>
<span class="token key attr-name">OFFLINE_MODE</span>     <span class="token punctuation">=</span> <span class="token value attr-value">false</span>

[database]
<span class="token key attr-name">PATH</span>     <span class="token punctuation">=</span> <span class="token value attr-value">/data/gitea/gitea.db</span>
<span class="token key attr-name">DB_TYPE</span>  <span class="token punctuation">=</span> <span class="token value attr-value">mysql</span>
<span class="token key attr-name">HOST</span>     <span class="token punctuation">=</span> <span class="token value attr-value">10.211.55.81:3306</span>
<span class="token key attr-name">NAME</span>     <span class="token punctuation">=</span> <span class="token value attr-value">gitea</span>
<span class="token key attr-name">USER</span>     <span class="token punctuation">=</span> <span class="token value attr-value">root</span>
<span class="token key attr-name">PASSWD</span>   <span class="token punctuation">=</span> <span class="token value attr-value">Cn123456</span>
<span class="token key attr-name">LOG_SQL</span>  <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
<span class="token key attr-name">SCHEMA</span> <span class="token value attr-value">  =</span>
<span class="token key attr-name">SSL_MODE</span> <span class="token punctuation">=</span> <span class="token value attr-value">disable</span>
<span class="token key attr-name">CHARSET</span>  <span class="token punctuation">=</span> <span class="token value attr-value">utf8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PS-gogs"><a href="#PS-gogs" class="headerlink" title="PS gogs"></a>PS gogs</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">10023</span>:22 <span class="token parameter variable">-p</span> <span class="token number">3001</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>gogs <span class="token punctuation">\</span>
<span class="token parameter variable">--net</span> docker-mynet <span class="token parameter variable">--ip</span> <span class="token number">172.172</span>.0.11 <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span><span class="token string">"Asia/Shanghai"</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/gogs/data:/data <span class="token punctuation">\</span>
<span class="token parameter variable">-d</span> gogs/gogs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><code>Webhook报错 webhook.ALLOWED_HOST_LIST setting</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Delivery: Post <span class="token string">"http://192.168.107.128:3080/hook?secret=tPSP4BPvclfFKPPT2XPgPnIs7fNcC0jQ"</span><span class="token builtin class-name">:</span> dial tcp <span class="token number">192.168</span>.107.128:3080: webhook can only call allowed HTTP servers <span class="token punctuation">(</span>check your webhook.ALLOWED_HOST_LIST setting<span class="token punctuation">)</span>, deny <span class="token string">'192.168.107.128(192.168.107.128:3080)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  修改 <code>/data/gitea/conf/app.ini</code> 配置文件，确保存在如下配置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>webhook<span class="token punctuation">]</span>
ALLOWED_HOST_LIST <span class="token operator">=</span> <span class="token number">192.168</span>.107.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  设置ALLOWED_HOST_LIST来允许可以对外发送webhook的host的ip或者域名<br>  重启服务就好了</li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus 实现敏感数据的加密</title>
    <url>/post/55d89d2f.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  在做项目时，需要实现对身份证,密码等敏感数据的加密，即不能以明文存储密码到数据库。<br>  以下采用<code>TypeHandler</code>形式。</p>
<span id="more"></span>

<h3 id="编写加密类"><a href="#编写加密类" class="headerlink" title="编写加密类"></a>编写加密类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">IvParameterSpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AES</span> <span class="token punctuation">{</span>

    <span class="token comment">// 密钥</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"AD42F6697B035B7580E4FEF93BE20BAD"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span>
    <span class="token comment">// 偏移量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> transformation <span class="token operator">=</span> <span class="token string">"AES/CBC/PKCS5Padding"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> algorithm <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 加密
     *
     * @param content
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 解密
     *
     * @param content
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 加密
     *
     * @param content 需要加密的内容
     * @param key     加密密码
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">SecretKeySpec</span> skey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IvParameterSpec</span> iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteContent <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> skey<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加密</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// LogUtil.exception(e);</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * AES（256）解密
     *
     * @param content 待解密内容
     * @param key     解密密钥
     * @return 解密之后
     * @throws Exception
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            <span class="token class-name">SecretKeySpec</span> skey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IvParameterSpec</span> iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>transformation<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> skey<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解密</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//LogUtil.exception(e);</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
        <span class="token comment">// 加密</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密前："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> encryptResultStr <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加密后："</span> <span class="token operator">+</span> encryptResultStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解密</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解密后："</span> <span class="token operator">+</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>encryptResultStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="自定义-TypeHandler-类型处理器"><a href="#自定义-TypeHandler-类型处理器" class="headerlink" title="自定义 TypeHandler 类型处理器"></a>自定义 TypeHandler 类型处理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jama<span class="token punctuation">.</span>zancunli<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">BaseTypeHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">JdbcType</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">CallableStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @Description:
 * @Author: leeze
 * @Date Created in 2021-06-11-03:11
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AESEncryptHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> columnValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> columnValue <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> columnValue <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="有po类中，实现相关类型注解"><a href="#有po类中，实现相关类型注解" class="headerlink" title="有po类中，实现相关类型注解"></a>有po类中，实现相关类型注解</h3><p>  <code>@TableName(autoResultMap = true)</code><br>  <code>@TableField(typeHandler = AESEncryptHandler.class)</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 用户管理
 */</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>autoResultMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysOrgUser</span> <span class="token keyword">extends</span> <span class="token class-name">BaseUpdateModel</span> <span class="token punctuation">{</span>


    <span class="token comment">/**
     * 登陆帐户
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> loginName<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 密码
     */</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">AESEncryptHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mybatis-plus.type-handlers-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.jama.zancunli.mybatisplus.handler</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>至此，密码等敏感信息已处理好。</p>
<blockquote>
<p>参考<br><a href="https://cloud.tencent.com/developer/article/1815139?from=article.detail.1557019">Mybatis Plugin</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus - xml中如何使用autoResultMap构造的ResultMap</title>
    <url>/post/b7c3ab9f.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  MyBatis Plus有一个很大的缺陷，就是insert和select的时候使用的ResultMap是不同的，修复的办法就是在实体类上增加注解<code>@TableName(autoResultMap = true)</code>。但是这个autoResultMap并不能使用在自定义的方法上，只在MyBatis Plus内置方法上生效。</p>
<span id="more"></span>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>  展示autoResultMap存在的问题<br>  实体类<code>Person</code>,该实体类中有自定义的<code>typehandler</code>: <code>IntegerListTypeHandler</code>, <code>StringListTypeHandler</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>autoResultMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">IntegerListTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> orgIds<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">StringListTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobbies<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 自定义的根据Id获取Person的方法，与MyBatis-Plus中的selectById相同的功能（但是不能使用autoResultMap生成的ResultMap）.
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM person WHERE id=#{id}"</span><span class="token punctuation">)</span>
    <span class="token class-name">Person</span> <span class="token function">selectOneById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  自定义方法拿不到一些字段.<br>  因为Person中的orgIds和hobbies需要自定义的typeHandler，自定义的方法使用的是resultType=Person，而不是生成的ResultMap，所以都是null</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setOrgIds</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setHobbies</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"basketball"</span><span class="token punctuation">,</span> <span class="token string">"pingpong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
personMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

# 可以得到正确的字段值
<span class="token class-name">Person</span> personInDb <span class="token operator">=</span> personMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

# orgIds和hobbies都为<span class="token keyword">null</span>
personInDb <span class="token operator">=</span> personMapper<span class="token punctuation">.</span><span class="token function">selectOneById</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>personInDb<span class="token punctuation">.</span><span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>personInDb<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>personInDb<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>personInDb<span class="token punctuation">.</span><span class="token function">getOrgIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getOrgIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>  设置  <code>@ResultMap("mybatis-plus_Person")</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 设置了ResultMap为`mybatis-plus_Person`后就可以拿到正确的值.
 */</span>
<span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"mybatis-plus_Person"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM person WHERE id=#{id}"</span><span class="token punctuation">)</span>
<span class="token class-name">Person</span> <span class="token function">selectOneById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  命名规则就是：<code>mybatis-plus_{实体类名}</code></p>
<h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>  MyBatis Plus本身并不是一个动态的ORM，而只是在mybatis初始化的时候，为mybatis提供常用的SQL语句，resultMap设置，并不会改变MyBatis本身的行为</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>   <code>@TableField(typeHandler = IntegerListTypeHandler.class)</code>没有生效：自定义的方法上没有配置<code>resultType</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之查看端口占用列表</title>
    <url>/post/cb326ecf.html</url>
    <content><![CDATA[<p>  我们在部署新项目时，不知道启动的容器都占用了那些端口，docker ps 眼花缭乱。我们可以使用netstat看一下。</p>
<span id="more"></span>

<p>  查看启动的容器占用的列表命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-nlp</span> <span class="token operator">|</span><span class="token function">grep</span> docker-proxy<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $4}'</span><span class="token operator">|</span><span class="token function">sort</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  执行结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@loaclhost mongodb<span class="token punctuation">]</span><span class="token comment"># netstat -nlp |grep docker-proxy|awk '{print $4}'|sort</span>
<span class="token number">0.0</span>.0.0:27017
<span class="token number">0.0</span>.0.0:3306
<span class="token number">0.0</span>.0.0:3307
<span class="token number">0.0</span>.0.0:9000
:::27017
:::3306
:::3307
:::9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之搭建Jira</title>
    <url>/post/4ed27834.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  JIRA 是 Atlassian 公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。<br>  Centos下安装参考：<a href="/post/afb30e04.html" title="Centos下Jira8.x版本安装与破解">Centos下Jira8.x版本安装与破解</a>。<br>  下面介绍是采用<code>docker</code>来进行部署。</p>
<span id="more"></span>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li> Centos8，机子分配的<mark class="label danger">内存</mark>适当大些。 </li>
<li> <mark class="label danger">破解包</mark> ：</li>

<p>   参考：<a href="https://gitee.com/pengzhile/atlassian-agent/attach_files/283101/download">atlassian-agent-v1.2.3</a>  , <a href="https://gitee.com/pengzhile/atlassian-agent/releases">其他</a></p>
<li> 安装<mark class="label danger">Docker</mark>。 </li>
<li> 事先安装`Mysql`，尽量<mark class="label danger">5.7</mark>。</li>
</ol>


<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="安装MSQL"><a href="#安装MSQL" class="headerlink" title="安装MSQL"></a>安装<code>MSQL</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1，下载镜像</span>
<span class="token function">docker</span> pull mysql:5.7

<span class="token comment"># 2，创建目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/mysql5.7/conf
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/mysql5.7/data
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/mysql5.7/logs

<span class="token comment"># 3，设置配置文件</span>
<span class="token builtin class-name">cd</span> /root/.docker/mysql5.7/conf
<span class="token function">touch</span> my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]
<span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/var/run/mysqld/mysqld.sock</span>

<span class="token comment">#character-set-server=utf8</span>
<span class="token key attr-name">character_set_server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span>
<span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>
<span class="token key attr-name">innodb_default_row_format</span><span class="token punctuation">=</span><span class="token value attr-value">DYNAMIC</span>
<span class="token key attr-name">innodb_large_prefix</span><span class="token punctuation">=</span><span class="token value attr-value">ON</span>
<span class="token key attr-name">innodb_file_format</span><span class="token punctuation">=</span><span class="token value attr-value">Barracuda</span>
<span class="token key attr-name">innodb_log_file_size</span><span class="token punctuation">=</span><span class="token value attr-value">2G</span>

<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
<span class="token key attr-name">default_authentication_plugin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql_native_password</span>
<span class="token key attr-name">secure-file-priv</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql</span>
<span class="token comment">#sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span>
<span class="token key attr-name">sql_mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">NO_AUTO_VALUE_ON_ZERO</span>
<span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>

[client]
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

[mysql]
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

[mysqld_safe]
<span class="token key attr-name">pid-file</span><span class="token punctuation">=</span><span class="token value attr-value">/var/run/mysqld/mysqld.pid</span>
<span class="token comment">#log-error=/var/log/mysql/mysqld.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 4，启动容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql5.7 <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span>
<span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>jira <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span>jira <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/mysql5.7/conf/my.cnf:/etc/mysql/conf.d/mysqld.cnf <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/mysql5.7/data:/var/lib/mysql <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/mysql5.7/logs:/var/log/mysql <span class="token punctuation">\</span>
mysql:5.7

<span class="token comment"># 5，授权远程访问</span>
CREATE DATABASE jira CHARACTER SET utf8mb4 COLLATE utf8mb4_bin<span class="token punctuation">;</span>
CREATE <span class="token environment constant">USER</span> jira IDENTIFIED BY <span class="token string">'jira'</span><span class="token punctuation">;</span>
GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'jira'</span> @<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'jira'</span> WITH GRANT OPTION<span class="token punctuation">;</span>
GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'jira'</span> @<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'jira'</span> WITH GRANT OPTION<span class="token punctuation">;</span>
FLUSH PRIVILEGES<span class="token punctuation">;</span>


<span class="token comment"># 6，开放端口</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="创建jira目录"><a href="#创建jira目录" class="headerlink" title="创建jira目录"></a>创建<code>jira</code>目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/atlassian
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/.docker/atlassian/jira<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>tips：有时要，chmod -R 777 atlassian</code><br>  <code>tips：atlassian目录如果不创建在root下面，否则会报错</code></p>
<h4 id="下载破解文件"><a href="#下载破解文件" class="headerlink" title="下载破解文件"></a>下载破解文件</h4><p>  下载破解包：<a href="https://static.xiaosige.com/download/atlassian-agent-v1.2.3.tar.gz">atlassian-agent-v1.2.3</a> ，放到<code>/root/.docker/atlassian</code>目录下面</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> atlassian-agent.jar root@10.211.55.81:/tmp
<span class="token function">cp</span> atlassian-agent.jar /root/.docker/atlassian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="编写jira对应Dockerfile文件"><a href="#编写jira对应Dockerfile文件" class="headerlink" title="编写jira对应Dockerfile文件"></a>编写<code>jira</code>对应<code>Dockerfile</code>文件</h4><p>  确保：<code>docker pull cptactionhank/atlassian-jira-software:latest</code></p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> cptactionhank/atlassian-jira-software:latest</span>

<span class="token instruction"><span class="token keyword">USER</span> root</span>

<span class="token comment"># 将代理破解包加入容器</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token string">"atlassian-agent.jar"</span> /opt/atlassian/jira/</span>

<span class="token comment"># 设置启动加载代理包</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">'export CATALINA_OPTS="-javaagent:/opt/atlassian/jira/atlassian-agent.jar ${CATALINA_OPTS}"'</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>  在<code>/root/.docker/atlassian</code>目录下执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token builtin class-name">cd</span> /root/.docker/atlassian
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> jira/jira:latest <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  <code>注意：命令最后有一个空格和点</code><br>  执行完毕之后，在末尾显示 <code>Successfully built … </code>代表执行成功。</p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>  在<code>/root/.docker/atlassian</code>目录下执行:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8089</span>:8080 <span class="token punctuation">\</span>
<span class="token parameter variable">--name</span> jira <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span> unless-stopped <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/atlassian:/var/atlassian/jira <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/.docker/atlassian/logs:/opt/atlassian/jira/logs <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\</span>
jira/jira:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="浏览器界面进行设置"><a href="#浏览器界面进行设置" class="headerlink" title="浏览器界面进行设置"></a>浏览器界面进行设置</h4><p>  输入地址：<code>http://IP地址:8089</code>，一步步配置下去，直到配置<code>数据库</code>，尽量选<code>Msql:5.7</code>.</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>  确保<code>MSQL</code>配置<code>my.cnf</code></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]
<span class="token key attr-name">pid-file</span><span class="token punctuation">=</span><span class="token value attr-value">/var/run/mysqld/mysqld.pid</span>
<span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/var/run/mysqld/mysqld.sock</span>

<span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>
<span class="token key attr-name">character_set_server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span>
<span class="token key attr-name">innodb_default_row_format</span><span class="token punctuation">=</span><span class="token value attr-value">DYNAMIC</span>
<span class="token key attr-name">innodb_large_prefix</span><span class="token punctuation">=</span><span class="token value attr-value">ON</span>
<span class="token key attr-name">innodb_file_format</span><span class="token punctuation">=</span><span class="token value attr-value">Barracuda</span>
<span class="token key attr-name">innodb_log_file_size</span><span class="token punctuation">=</span><span class="token value attr-value">2G</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  确保<code>MSQL</code>数据库<code>5.7</code>,及<code>utf8mb4</code>，<code>utf8mb4_bin</code></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> jira <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="生成破解许可"><a href="#生成破解许可" class="headerlink" title="生成破解许可"></a>生成破解许可</h4><p>  直到<code>配置许可</code>时，在<code>/root/.docker/atlassian</code>目录下执行:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>jar atlassian<span class="token operator">-</span>agent<span class="token punctuation">.</span>jar <span class="token operator">-</span>d <span class="token operator">-</span>m <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token annotation punctuation">@163.com</span> <span class="token operator">-</span>n <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">-</span>p jira <span class="token operator">-</span>o http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token constant">IP</span> <span class="token operator">-</span>s <span class="token constant">BXLB</span><span class="token operator">-</span><span class="token constant">ZOUP</span><span class="token operator">-</span><span class="token constant">KBKK</span><span class="token operator">-</span><span class="token constant">KYOK</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  根据<code>Server ID</code> 生成<code>license Key</code>, 复制生成的<code>KEY</code>，点击<code>Next</code>。<br><br></p>
<blockquote>
<p>-p jira(安装的是jira产品)，具体的可以根据-p进行参考<br>-m <a href="mailto:jira@jira.com">jira@jira.com</a>(随意写)<br>-n jira(随意写)<br>-o <a href="https://jira.com/">https://jira.com</a> (随意写)<br>-s BXLB-ZOUP-KBKK-KYOK (即jira显示的服务器ID)</p>
</blockquote>
<h4 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h4><p>  破解后，继续设置账户即可。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8安装Docker</title>
    <url>/post/a00f9d53.html</url>
    <content><![CDATA[<img data-src="/post/a00f9d53/docker001.jpeg" style="box-shadow:none!important;">

<span id="more"></span>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>  服务器版本:CentOS 8.2 64位</p>
<h3 id="准备部署环境"><a href="#准备部署环境" class="headerlink" title="准备部署环境"></a>准备部署环境</h3><p>  先清除有关docker 的所有文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>
docker-client <span class="token punctuation">\</span>
docker-client-latest <span class="token punctuation">\</span>
docker-common <span class="token punctuation">\</span>
docker-latest <span class="token punctuation">\</span>
docker-latest-logrotate <span class="token punctuation">\</span>
docker-logrotate <span class="token punctuation">\</span>
docker-selinux <span class="token punctuation">\</span>
docker-engine-selinux <span class="token punctuation">\</span>
docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>安装所需要的依赖包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>配置国内源<br>  添加yum的repo文件(对于国内用户优先选择阿里云)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>生成缓存，提高搜索安装软件的速度<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>解决problem with installed package podman-1.6.4-10.的报错<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum erase <span class="token function">podman</span> buildah<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装Docker<br>  安装社区版docker:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli  containerd.io <span class="token parameter variable">--nobest</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<code>在线安装：curl -fsSL https://get.docker.com | bash -s docker</code><br><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></li>
<li>修改docker 镜像源地址加速<br>  创建或修改 <code>/etc/docker/daemon.json</code> 文件，修改为如下形式<br>  内容为（可以选择163加速或者去阿里云自己生成一个docker加速地址）：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">{
<span class="token key attr-name">  "registry-mirrors"</span><span class="token punctuation">:</span> <span class="token value attr-value">[</span>
<span class="token key attr-name">    "https</span><span class="token punctuation">:</span><span class="token value attr-value">//registry.docker-cn.com",</span>
<span class="token key attr-name">    "http</span><span class="token punctuation">:</span><span class="token value attr-value">//hub-mirror.c.163.com",</span>
<span class="token key attr-name">    "https</span><span class="token punctuation">:</span><span class="token value attr-value">//docker.mirrors.ustc.edu.cn"</span>
  ]
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  Docker中国区官方镜像 :         <a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a><br>  网易 :                <a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a><br>  ustc :                <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a><br>  中国科技大学 :            <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a><br>  阿里云容器 生成自己的加速地址 :    登录：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li>
<li>重新加载docker 服务配置，让加速地址生效并重启(启动)docker<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>设置开机自动启动docker(可选)，可以连带自动启动带自动启动的容器 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看Docker版本<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 简单信息</span>
<span class="token function">docker</span> <span class="token parameter variable">-v</span>
<span class="token comment"># 查看docker的版本号，包括客户端、服务端、依赖的Go等</span>
<span class="token function">docker</span> version
<span class="token comment"># 查看系统(docker)层面信息，包括管理的images, containers数等</span>
<span class="token function">docker</span> info
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>安装docker-compose<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载docker-compose,采用国内镜像,速度较快</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.3.3/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
<span class="token comment">#授权docker-compose</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span class="token function">docker-compose</span> <span class="token parameter variable">--version</span> <span class="token comment">#查看版本验证安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 国内开启pip 下载加速：http://mirrors.aliyun.com/help/pypi</span>
<span class="token function">mkdir</span> ~/.pip/
<span class="token function">cat</span> <span class="token operator">&gt;</span> ~/.pip/pip.conf <span class="token operator">&lt;&lt;</span><span class="token string">'EOF'
[global]
index-url = https://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
EOF</span>

<span class="token comment"># 下载pip软件</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> python2-pip
<span class="token comment"># 下载 docker-compose</span>
pip <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> libcurl libcurl-devel

<span class="token comment"># 安装 pip</span>
<span class="token comment"># 安装 EPEL 软件包</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release
<span class="token comment"># 安装pip </span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-pip
<span class="token comment">#升级</span>
pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip

<span class="token comment"># yum install python-devel</span>

<span class="token comment">#安装Docker-Compose</span>
pip <span class="token function">install</span> <span class="token function">docker-compose</span>
<span class="token comment"># pip3 install docker-compose</span>
<span class="token comment"># pip install docker-compose==1.21.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DOCKER_CONFIG</span><span class="token operator">=</span><span class="token variable">${DOCKER_CONFIG<span class="token operator">:-</span>$HOME<span class="token operator">/</span>.docker}</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins
<span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="token function">chmod</span> +x <span class="token variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose

<span class="token function">docker</span> compose version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p><a href="https://docs.docker.com/compose/cli-command/">Compose V2</a><br><a href="http://www.manongjc.com/detail/18-fdycjiwlqqsvecp.html">docker-compose 安装以及遇到的错误解决</a><br><a href="https://www.cnblogs.com/eddie1127/p/12003358.html">安装docker-compose报错解决办法</a><br><a href="https://www.cnblogs.com/felixqiang/p/11946644.html">pip-ERROR</a></p>
</div></li>
</ol>
<h3 id="Docker服务相关"><a href="#Docker服务相关" class="headerlink" title="Docker服务相关"></a>Docker服务相关</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">

systemctl start <span class="token function">docker</span>    <span class="token comment"># 启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>   <span class="token comment"># 开机自启</span>
systemctl stop <span class="token function">docker</span>     <span class="token comment"># 停止</span>
systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启</span>
systemctl status <span class="token function">docker</span>   <span class="token comment"># 查看docker状态</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images               <span class="token comment"># 查看镜像</span>
<span class="token function">docker</span> pull 镜像名称:版本号   <span class="token comment"># 拉取镜像</span>
<span class="token function">docker</span> rmi 镜像名称:版本号    <span class="token comment"># 删除镜像</span>

<span class="token function">docker</span> <span class="token function">ps</span>                  <span class="token comment"># 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>               <span class="token comment"># 查看所有容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-s</span>               <span class="token comment"># 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-l</span>               <span class="token comment"># 查看上一次容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> 容器名称          <span class="token comment"># 删除容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-v</span> 容器名称       <span class="token comment"># 删除容器及数据卷</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>           <span class="token comment"># 查询数据卷</span>
<span class="token function">docker</span> volume <span class="token function">rm</span>  数据卷名  <span class="token comment"># 删除数据卷</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="docker远程连接"><a href="#docker远程连接" class="headerlink" title="docker远程连接"></a>docker远程连接</h3><h4 id="portainer中远程连接"><a href="#portainer中远程连接" class="headerlink" title="portainer中远程连接"></a>portainer中远程连接</h4><ol>
<li>服务器配置docker<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">vim</span> /usr/lib/systemd/system/docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  添加<code>-H tcp://0.0.0.0:2375</code>如下<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span>
改为：
<span class="token comment"># leeze</span>
 <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>防火墙端口(<code>2375</code>)<br>  如果服务器有防火墙，请放开 <code>2375</code> 端口<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">2375</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span>
firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>重启 <code>docker</code> 服务<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>然后用浏览器访问Linux主机的IP:2375/version，测试端口是否开放成功<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://ip:2375/verion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>portainer中远程连接<img data-src="/post/a00f9d53/portainer001.png" class="" title="portainer-docker"></li>
</ol>
<h4 id="IDEA中远程连接"><a href="#IDEA中远程连接" class="headerlink" title="IDEA中远程连接"></a>IDEA中远程连接</h4><p>  TCP-socket:<br>  <code>tcp://10.211.55.81:2375</code></p>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><h4 id="网络问题1"><a href="#网络问题1" class="headerlink" title="网络问题1"></a><code>网络问题1</code></h4><p>  <code>firewall-cmd，网路配置端口后不好用</code>:</p>
<blockquote>
<p><code>一</code>，查看网卡</p>
<img data-src="/post/a00f9d53/firewall001.png" class="" title="网络设备">
<p><code>二</code>，查看激活作用域</p>
<img data-src="/post/a00f9d53/firewall002.png" class="" title="作用域">
<p><code>三</code>，把<code>docker0</code>网卡添加到<code>trusted</code>域</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --add-interface<span class="token operator">=</span>docker0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>四</code>，重启加载配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>五</code>，查看激活作用域</p>
<img data-src="/post/a00f9d53/firewall003.png" class="" title="作用域">
<p><code>六</code>，查看网卡</p>
<img data-src="/post/a00f9d53/firewall004.png" class="" title="网络设备">
<p><code>七</code>，查看端口</p>
<img data-src="/post/a00f9d53/firewall005.png" class="" title="查看端口">
<p><code>八</code>，开放端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3307</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img data-src="/post/a00f9d53/firewall006.png" class="" title="查看3307端口"> 
</blockquote>
<h4 id="网络问题2"><a href="#网络问题2" class="headerlink" title="网络问题2"></a><code>网络问题2</code></h4><p><code>网络问题1,不好使</code>，参考：<a href="/post/76a6f1b6.html" title="Centos7/8 firewall 和 docker 冲突解决">Centos7/8 firewall 和 docker 冲突解决</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装portainer-ce2.0</title>
    <url>/post/5086702b.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p>
<span id="more"></span>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>拉取新的镜像<br>  老 版：   <code>portainer/portainer</code><br>  社区版： <code>portainer/portainer-ce</code><br>  企业版： <code>portainer/portainer-ee</code><pre class="line-numbers language-none"><code class="language-none">docker pull portainer/portainer-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>创建数据卷<pre class="line-numbers language-none"><code class="language-none">docker volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  位置：<code>/var/lib/docker/volumes/portainer_data</code></li>
<li>创建自己的网络<br>  创建我们固定的ip网段，可以防止服务器卡死宕机强制重启后，导致的容器ip自动重启后产生变化,而导致docker容器内部通过网段通信的问题<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create <span class="token parameter variable">--subnet</span><span class="token operator">=</span><span class="token number">172.172</span>.0.0/24 <span class="token parameter variable">--gateway</span> <span class="token number">172.172</span>.0.1 docker-mynet <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>启动新的容器<pre class="line-numbers language-none"><code class="language-none">docker run -d \
-e TZ=Asia/Shanghai \
--restart unless-stopped \
-p 9000:9000 \
--name myportainer \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer_data:/data \
portainer/portainer-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
或者<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
<span class="token parameter variable">--net</span> docker-mynet <span class="token parameter variable">--ip</span> <span class="token number">172.172</span>.0.3 <span class="token punctuation">\</span>
<span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token punctuation">\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /soft/docker/portainer/data:/data <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /soft/docker/portainer/public:/public <span class="token punctuation">\</span>
<span class="token parameter variable">-d</span> portainer/portainer-ce <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>参数<br><code>--net</code> docker-mynet 指定网段<br><code>--ip 172.172.0.3</code> 指定ip 服务器启动后不会发生改变<br><code>--restart=always</code> 随着docker 启动而启动</p>
</blockquote>
  然而我们使用ip:9000却发现无法访问 ，是因为我们用<code>-v /soft/docker/portainer/public:/public</code> 将portainer的页面文件夹挂载在宿主机的<code>/soft/docker/portainer/public</code>目录下了，而且是个空文件夹，所以无法访问<blockquote>
<p><a href="https://files-cdn.cnblogs.com/files/blogs/680867/Portainer-CN.zip">https://files-cdn.cnblogs.com/files/blogs/680867/Portainer-CN.zip</a><br>使用上面的地址下载汉化文件，放置在/soft/docker/portainer/public 并解压<br>使用docker restart portainer 后，使用ip:9000即可访问（前提是要设置centos防火墙） </p>
</blockquote>
</li>
<li>查看<br>  在游览器输入如下地址：<code>http://10.211.55.81:9000</code></li>
</ol>
<h3 id="连接远程docker"><a href="#连接远程docker" class="headerlink" title="连接远程docker"></a>连接远程docker</h3><ol>
<li>服务器配置docker<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">vim</span> /usr/lib/systemd/system/docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  添加<code>-H tcp://0.0.0.0:2375</code>如下<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span>

改为：
<span class="token comment"># leeze</span>
 <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-H</span> fd:// <span class="token parameter variable">--containerd</span><span class="token operator">=</span>/run/containerd/containerd.sock <span class="token parameter variable">-H</span> tcp://0.0.0.0:2375<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>防火墙端口(<code>2375</code>)<br>  如果服务器有防火墙，请放开 <code>2375</code> 端口<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">2375</span>/tcp <span class="token parameter variable">--permanent</span>
firewall-cmd <span class="token parameter variable">--reload</span>
firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>重启 <code>docker</code> 服务 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>portainer中远程连接<img data-src="/post/5086702b/portainer001.png" class="" title="portainer-docker"></li>
</ol>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">version: "3.9"

services:
  portainer:
    image: portainer/portainer-ce:2.15.1
    container_name: portainer
    ports:
      - "8000:8000"
      - "9999:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - data:/data:rw
    networks:
      - traefik

volumes:
  data:
    name: portainer_data

networks:
  traefik:
    external: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos8防火墙设置</title>
    <url>/post/e0840970.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  centos7以前的版本默认使用iptables服务进行管理防火墙规则。centos7以及其以上版本默认使用firewalld服务管理防火墙。所以在centos8中，就使用其默认的firewalld配置防火墙。<br>  firewalld和iptables的官方说明可以参照<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls#sec-Comparison_of_Firewalld_to_system-config-firewall_and_iptables">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls#sec-Comparison_of_Firewalld_to_system-config-firewall_and_iptables</a></p>
<span id="more"></span>

<h3 id="firewalld相关命令"><a href="#firewalld相关命令" class="headerlink" title="firewalld相关命令"></a>firewalld相关命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进程与状态相关</span>
systemctl unmask firewalld                   <span class="token comment">#执行命令，即可实现取消服务的锁定</span>
systemctl mask firewalld                     <span class="token comment">#下次需要锁定该服务时执行      </span>
systemctl start firewalld.service            <span class="token comment">#启动防火墙</span>
systemctl stop firewalld.service             <span class="token comment">#停止防火墙</span>
systemctl reloadt firewalld.service          <span class="token comment">#重载配置</span>
systemctl restart firewalld.service          <span class="token comment">#重启服务</span>
systemctl status firewalld                   <span class="token comment">#查看防火墙状态</span>
systemctl <span class="token builtin class-name">enable</span> firewalld                   <span class="token comment">#设置防火墙随系统启动</span>
systemctl disable firewalld                  <span class="token comment">#禁止防火墙随系统启动</span>
systemctl is-enabled firewalld.service       <span class="token comment">#查看服务是否开机启动</span>
systemctl list-unit-files<span class="token operator">|</span><span class="token function">grep</span> enabled       <span class="token comment">#查看已启动的服务列表</span>
systemctl <span class="token parameter variable">--failed</span>                           <span class="token comment">#查看启动失败的服务列表</span>
firewall-cmd <span class="token parameter variable">--state</span>                         <span class="token comment">#查看防火墙状态</span>
firewall-cmd <span class="token parameter variable">--reload</span>                        <span class="token comment">#更新防火墙规则</span>
firewall-cmd --list-ports                    <span class="token comment">#查看所有打开的端口</span>
firewall-cmd --list-services                 <span class="token comment">#查看所有允许的服务</span>
firewall-cmd --get-services                  <span class="token comment">#获取所有支持的服务</span>

<span class="token comment">#区域相关</span>
firewall-cmd --list-all-zones                    <span class="token comment">#查看所有区域信息</span>
firewall-cmd --get-active-zones                  <span class="token comment">#查看活动区域信息</span>
firewall-cmd --set-default-zone<span class="token operator">=</span>public           <span class="token comment">#设置public为默认区域</span>
firewall-cmd --get-default-zone                  <span class="token comment">#查看默认区域信息</span>

<span class="token comment">#接口相关</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-interface<span class="token operator">=</span>eth0          <span class="token comment">#将接口eth0加入区域public</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-interface<span class="token operator">=</span>eth0       <span class="token comment">#从区域public中删除接口eth0</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>default --change-interface<span class="token operator">=</span>eth0      <span class="token comment">#修改接口eth0所属区域为default</span>
firewall-cmd --get-zone-of-interface<span class="token operator">=</span>eth0                <span class="token comment">#查看接口eth0所属区域</span>

<span class="token comment">#端口控制</span>
firewall-cmd --query-port<span class="token operator">=</span><span class="token number">8080</span>/tcp                         <span class="token comment"># 查询端口是否开放</span>
firewall-cmd --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span>               <span class="token comment">#永久添加8080端口例外(全局)</span>
firewall-cmd --remove-port<span class="token operator">=</span><span class="token number">8800</span>/tcp <span class="token parameter variable">--permanent</span>            <span class="token comment">#永久删除8080端口例外(全局)</span>
firewall-cmd --add-port<span class="token operator">=</span><span class="token number">65001</span>-65010/tcp <span class="token parameter variable">--permanent</span>        <span class="token comment">#永久增加65001-65010例外(全局)</span>
firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span>         <span class="token comment">#永久添加8080端口例外(区域public)</span>
firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span>      <span class="token comment">#永久删除8080端口例外(区域public)</span>
firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">65001</span>-65010/tcp <span class="token parameter variable">--permanent</span>  <span class="token comment">#永久增加65001-65010例外(区域public)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">最常用命令

firewalld-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-ports<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span>

命令解析

firwall-cmd：是Linux提供的操作firewall的一个工具（服务）命令
<span class="token parameter variable">--zone</span> <span class="token comment">#作用域</span>
--add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token comment">#添加端口，格式为：端口/通讯协议 ；add表示添加，remove则对应移除</span>
<span class="token parameter variable">--permanent</span> <span class="token comment">#永久生效，没有此参数重启后失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装 GitLab</title>
    <url>/post/6af4ceb4.html</url>
    <content><![CDATA[<h3 id="一，介绍"><a href="#一，介绍" class="headerlink" title="一，介绍"></a>一，介绍</h3><p>  GitLab 分为社区版（Community Edition，缩写为 CE）和 企业版（Enterprise Edition，缩写为 EE）。社区版是免费的，而企业版包含一些收费服务，一般来说个人开发者用社区版就足够了。</p>
<span id="more"></span>

<h3 id="二，开始安装"><a href="#二，开始安装" class="headerlink" title="二，开始安装"></a>二，开始安装</h3><h4 id="Mac-OS-X下操作"><a href="#Mac-OS-X下操作" class="headerlink" title="Mac OS X下操作"></a><code>Mac OS X</code>下操作</h4><p>  基于Docker在<code>Mac OS X</code>系统中的部署和设置GitLab的具体过程如下：</p>
<ol>
<li>搜索Gitlab<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>下载<code>Gitlab</code>镜像<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull gitlab/gitlab-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看<code>Gitlab</code>镜像文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/6af4ceb4/gitlab001.png" class="" title="拉取的GitLab镜像"></li>
<li>创建<code>Gitlab</code>挂载目录,日志,数据,配置的路径<br>  通常会在构建容器的时间,会把配置 (etc) 、 日志 (log) 、数据 (data) 放到容器外面,方便后期数据迁移或者修改配置,在<code>~/docker/gitlab</code>下分别创建<code>etc,logs,data</code>目录:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/docker
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./gitlab/etc
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./gitlab/logs
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./gitlab/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>创建docker中的网络<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create gitlab_net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  查看<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/6af4ceb4/gitlab002.png" class="" title="network"></li>
<li>使用镜像启动<code>Gitlab</code>容器<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run -d \
-e TZ=Asia/Shanghai \
--name mygitlab \
--net=gitlab_net \
--privileged=true \
--restart unless-stopped \
-p 6443:443 \
-p 82:82 \
-p 6022:22 \
-v /Users/lizhang/docker/gitlab/etc:/etc/gitlab \
-v /Users/lizhang/docker/gitlab/logs:/var/log/gitlab  \
-v /Users/lizhang/docker/gitlab/data:/var/opt/gitlab  \
gitlab/gitlab-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  命令解释：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">-e</span> <span class="token value attr-value">TZ=Asia/Shanghai 时间同步</span>
<span class="token key attr-name">-i</span> <span class="token value attr-value">          以交互模式运行容器，通常与 -t 同时使用命令解释：</span>
<span class="token key attr-name">-t</span> <span class="token value attr-value">          为容器重新分配一个伪输入终端，通常与 -i 同时使用</span>
<span class="token key attr-name">-d</span> <span class="token value attr-value">          后台运行容器，并返回容器ID</span>
<span class="token key attr-name">-p</span> <span class="token value attr-value">82:82   将容器内82端口映射至宿主机82端口，这是访问gitlab的端口</span>
<span class="token key attr-name">-p</span> <span class="token value attr-value">6022:22   将容器内22端口映射至宿主机6022端口，这是访问ssh的端口 </span>
<span class="token key attr-name">               vim</span> <span class="token value attr-value">~/.ssh/config</span>
<span class="token key attr-name">               HOST</span> <span class="token value attr-value">gitlab.xxx.com</span>
<span class="token key attr-name">               HOSTNAME</span> <span class="token value attr-value">gitlab.xxx.com</span>
<span class="token key attr-name">               port</span> <span class="token value attr-value">6022</span>
<span class="token key attr-name">-p</span> <span class="token value attr-value">6443:443 将容器内443端口映射至宿主机6443端口，这是访问https的端口</span>
<span class="token key attr-name">–-name</span> <span class="token value attr-value">      设置容器的名字；</span>
<span class="token key attr-name">--restart</span> <span class="token value attr-value">   使用unless-stopped 作为重启策略，因为这样可以手工停止容器，方便维护。</span>
<span class="token key attr-name">--privileged</span><span class="token punctuation">=</span><span class="token value attr-value">true  让容器获取宿主机root权限</span>
<span class="token key attr-name">-v</span> <span class="token value attr-value">          将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</span>
<span class="token key attr-name">gitlab/gitlab-ce</span><span class="token punctuation">:</span><span class="token value attr-value">latest  镜像的名称，这里也可以写镜像ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>配置<pre class="line-numbers language-none"><code class="language-none">vi ~/docker/gitlab/config/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">
<span class="token key attr-name">external_url</span> <span class="token value attr-value">'http://192.168.3.3:82'</span>
<span class="token key attr-name">nginx['redirect_http_to_https_port']</span> <span class="token punctuation">=</span> <span class="token value attr-value">82</span>
<span class="token key attr-name">nginx['listen_port']</span> <span class="token punctuation">=</span> <span class="token value attr-value">82</span>
<span class="token key attr-name">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="token punctuation">=</span> <span class="token value attr-value">6022</span>

<span class="token punctuation">:</span>wq #保存配置文件并退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 重启gitlab容器</span>
docker restart mygitlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>登陆<br>输入：<code>http://192.168.3.3:82</code></li>
<li> 进入容器<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker exec -it mygitlab /bin/bash
gitlab-ctl restart              重启gitlab
exit                            退出容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="Centos-8下操作"><a href="#Centos-8下操作" class="headerlink" title="Centos 8下操作"></a><code>Centos 8</code>下操作</h4><p>  基于Docker在<code>Centos 8</code>系统中的部署和设置GitLab的具体过程如下：</p>
<p>  同上；</p>
<h3 id="三、PS"><a href="#三、PS" class="headerlink" title="三、PS"></a>三、PS</h3><ol>
<li>中文设置<br>在<code>User Settings &gt; Profile &gt; Preferred language</code>设置</li>
<li>如果页面访问出现502<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 修改下权限</span>
docker exec -it gitlab update-permissions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  或<br><code>确保Docker内存大于4G</code> </li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>java-jar维护脚本</title>
    <url>/post/343d655c.html</url>
    <content><![CDATA[<h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><p>  现在越来越多的程序都用docker容器来管理了，不过依旧有很多的程序，是直接在linux上使用jar方式管理的，那么编写一个易用的脚本来管理是必不可少的。</p>
<span id="more"></span>

<p>  脚本示例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">jar_path</span><span class="token operator">=</span><span class="token string">'/home/pro-mall/ex-pro.jar'</span>

<span class="token comment"># JVM参数</span>
<span class="token assign-left variable">JVM_OPTS</span><span class="token operator">=</span><span class="token string">"-Dspring.profiles.active=prod"</span>
<span class="token comment"># JVM参数 debug模式</span>
<span class="token assign-left variable">JVM_OPTS_DEBUG</span><span class="token operator">=</span><span class="token string">"-Dspring.profiles.active=prod -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=10000,suspend=n"</span>

<span class="token keyword">function</span> <span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> $jar_path<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>

	<span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token operator">!=</span> x<span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	    <span class="token builtin class-name">echo</span>  <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m 程序 <span class="token variable">$jar_path</span> 正在运行中，请先停止！ <span class="token entity" title="\033">\033</span>[0m"</span>
	<span class="token keyword">else</span>
	    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$jar_path</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span>  <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m <span class="token variable">$jar_path</span> 不存在，无法操作命令！ <span class="token entity" title="\033">\033</span>[0m"</span>
        <span class="token keyword">else</span>
            <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token variable">$JVM_OPTS</span> <span class="token variable">$jar_path</span>  <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
		    <span class="token builtin class-name">echo</span>  <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m 启动 <span class="token variable">$jar_path</span> 成功！<span class="token entity" title="\033">\033</span>[0m"</span>
        <span class="token keyword">fi</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> $jar_path<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>

	<span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token operator">!=</span> x<span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	    <span class="token builtin class-name">echo</span>  <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m 程序 <span class="token variable">$jar_path</span> 正在运行中，请先停止！ <span class="token entity" title="\033">\033</span>[0m"</span>
	<span class="token keyword">else</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$jar_path</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span>  <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m <span class="token variable">$jar_path</span> 不存在，无法操作命令！ <span class="token entity" title="\033">\033</span>[0m"</span>
        <span class="token keyword">else</span>
            <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token variable">$JVM_OPTS_DEBUG</span> <span class="token variable">$jar_path</span>  <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
		    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m Debug模式 启动 <span class="token variable">$jar_path</span> 成功！端口：10000 <span class="token entity" title="\033">\033</span>[0m"</span>
        <span class="token keyword">fi</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> $jar_path<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>

	<span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token operator">!=</span> x<span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$PID</span>
		<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m <span class="token variable">$jar_path</span> 已停止 <span class="token entity" title="\033">\033</span>[0m"</span>
	<span class="token keyword">else</span>
		<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m 程序 <span class="token variable">$jar_path</span> 未启动，不能操作！ <span class="token entity" title="\033">\033</span>[0m"</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    stop
    <span class="token function">sleep</span> <span class="token number">2</span>
    start
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> $jar_path<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$PID</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m 程序 <span class="token variable">$jar_path</span> 正在运行中 <span class="token entity" title="\033">\033</span>[0m"</span>
        <span class="token assign-left variable">PID_NUM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span class="token operator">|</span><span class="token function">grep</span> $jar_path<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token variable">`</span></span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m 程序对应的PID： <span class="token variable">$PID_NUM</span> <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m 程序 <span class="token variable">$jar_path</span> 没有运行！ <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">find_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;31m 请输入正确的操作命令！ <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m 命令参数：{start|stop|restart|status|debug} <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m 用法： <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m     start    启动应用程序 <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m     stop     停止应用程序 <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m     restart  重启应用程序 <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m     status   查看应用程序运行状态和PID <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[0;34m     debug    Debug模式启动应用程序 <span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    find_help<span class="token punctuation">;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
    start<span class="token punctuation">)</span>
    start<span class="token punctuation">;</span><span class="token punctuation">;</span>
    stop<span class="token punctuation">)</span>
    stop<span class="token punctuation">;</span><span class="token punctuation">;</span>
    restart<span class="token punctuation">)</span>
    restart<span class="token punctuation">;</span><span class="token punctuation">;</span>
    status<span class="token punctuation">)</span>
    status<span class="token punctuation">;</span><span class="token punctuation">;</span>
    debug<span class="token punctuation">)</span>
    debug<span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>
    find_help<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>  通常情况，我们运行一个脚本，需要使用“sh + 脚本路径 + 参数”的方式，管理起来可能不太方便，所以我们一般会给他设置一个别名来管理。<br>  语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token operator">&lt;</span>别名<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>sh脚本路径<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  了解了alias命令的语法后，我们直接执行就好了吗？不是的，如果直接执行，那么在你关闭ssh终端后重新连接，命令就失效啦。<br>  我们需要将这个命令追加到<code>~/.bashrc</code>文件中，才能保证命令不会失效。<br>  我们来试试吧，示例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> /home/pro-mall/c.sh
<span class="token builtin class-name">echo</span> <span class="token string">"alias mall=/home/pro-mall/c.sh"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  设置好别名后的使用方法，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mall start
mall stop
mall debug
<span class="token punctuation">..</span>.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>java调用远程服务器shell脚本</title>
    <url>/post/4caea52a.html</url>
    <content><![CDATA[<p>  代码比较简单</p>
<span id="more"></span>


<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>information<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>ethz<span class="token punctuation">.</span>ssh2<span class="token punctuation">.</span></span><span class="token class-name">ChannelCondition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>ethz<span class="token punctuation">.</span>ssh2<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>ethz<span class="token punctuation">.</span>ssh2<span class="token punctuation">.</span></span><span class="token class-name">Session</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>ethz<span class="token punctuation">.</span>ssh2<span class="token punctuation">.</span></span><span class="token class-name">StreamGobbler</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteShellExecutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">;</span>
    <span class="token comment">/** 远程机器IP */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>
    <span class="token comment">/** 用户名 */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> osUsername<span class="token punctuation">;</span>
    <span class="token comment">/** 密码 */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> charset <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIME_OUT</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 构造函数
     * @param ip
     * @param usr
     * @param pasword
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">RemoteShellExecutor</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token class-name">String</span> usr<span class="token punctuation">,</span> <span class="token class-name">String</span> pasword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>osUsername <span class="token operator">=</span> usr<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> pasword<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * 登录
     * @return
     * @throws IOException
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> conn<span class="token punctuation">.</span><span class="token function">authenticateWithPassword</span><span class="token punctuation">(</span>osUsername<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * 执行脚本
     *
     * @param cmds
     * @return
     * @throws Exception
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">String</span> cmds<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> stdOut <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> stdErr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> outStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> outErr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Open a new {@link Session} on this connection</span>
                <span class="token class-name">Session</span> session <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Execute a command on the remote machine.</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                session<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span>cmds<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exec:"</span><span class="token operator">+</span>cmds<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session:"</span><span class="token operator">+</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
                stdOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamGobbler</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getStdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stdOut:"</span><span class="token operator">+</span>stdOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                outStr <span class="token operator">=</span> <span class="token function">processStream</span><span class="token punctuation">(</span>stdOut<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stdOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stdErr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamGobbler</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getStderr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                outErr <span class="token operator">=</span> <span class="token function">processStream</span><span class="token punctuation">(</span>stdErr<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stdErr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                session<span class="token punctuation">.</span><span class="token function">waitForCondition</span><span class="token punctuation">(</span><span class="token class-name">ChannelCondition</span><span class="token punctuation">.</span><span class="token constant">EXIT_STATUS</span><span class="token punctuation">,</span> <span class="token constant">TIME_OUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outStr="</span> <span class="token operator">+</span> outStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outErr="</span> <span class="token operator">+</span> outErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                ret <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getExitStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"登录远程机器失败"</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义异常类 实现略</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>stdOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>stdErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * @param in
     * @param charset
     * @return
     * @throws IOException
     * @throws UnsupportedEncodingException
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">processStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">String</span> charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ininin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number:"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sb:"</span><span class="token operator">+</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buf:"</span><span class="token operator">+</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enene22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">RemoteShellExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteShellExecutor</span><span class="token punctuation">(</span><span class="token string">"XXXX"</span><span class="token punctuation">,</span> <span class="token string">"XX"</span><span class="token punctuation">,</span> <span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行myTest.sh 参数为java Know dummy</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/home/zh/Documents/start/note.sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装MySQL5并挂载数据</title>
    <url>/post/4b28e03f.html</url>
    <content><![CDATA[<h3 id="从仓库下拉镜像"><a href="#从仓库下拉镜像" class="headerlink" title="从仓库下拉镜像"></a>从仓库下拉镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">sudo docker pull mysql:5.7.37<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h3 id="新建挂载目录"><a href="#新建挂载目录" class="headerlink" title="新建挂载目录"></a>新建挂载目录</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">sudo mkdir -p /root/dockerdata/mysql5/{data,logs,conf}
chmod -R 777  /root/dockerdata/mysql5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="新建my-cnf"><a href="#新建my-cnf" class="headerlink" title="新建my.cnf"></a>新建<code>my.cnf</code></h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">vi /root/dockerdata/mysql5/conf/my.cnf

[client]
default-character-set=utf8mb4
 
[mysql]
default-character-set=utf8mb4

[mysqld] 
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
<span class="token comment">#log-error      = /var/log/mysql/error.log</span>

general_log = 1
general_log_file = /var/log/mysql/access.log
log-error = /var/log/mysql/error.log

<span class="token comment"># By default we only accept connections from localhost</span>
<span class="token comment">#bind-address   = 127.0.0.1</span>
<span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
symbolic-links=0

<span class="token comment"># 创建新表时将使用的默认存储引擎</span>
default-storage-engine=INNODB
lower_case_table_names=1
max_allowed_packet=16M


init_connect='SET collation_connection = utf8mb4_unicode_ci'
init_connect='SET NAMES utf8mb4'
character-set-server=utf8mb4
collation-server=utf8mb4_unicode_ci
skip-character-set-client-handshake

<span class="token comment"># 允许最大连接数</span>
max_connections = 1000

<span class="token comment"># Custom config should go here</span>
!includedir /etc/mysql/conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run --restart=always --privileged=true -p 3308:3306 --name mysql5 \
--net mynet --ip 172.172.0.6  \
-e TZ="Asia/Shanghai" \
-v /etc/localtime:/etc/localtime:ro \
-v /root/dockerdata/mysql5/conf:/etc/mysql/conf.d \
-v /root/dockerdata/mysql5/data:/var/lib/mysql \
-v /root/dockerdata/mysql5/logs:/var/log/mysql \
-e MYSQL_ROOT_PASSWORD=12345678 \
-d mysql:5.7.37<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note info no-icon"><p>相关参数描述：<br>-p 3308:3306：将容器的 3306 端口映射到主机的 3308 端口。<br>-v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。<br>-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。<br>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。<br>-e MYSQL_ROOT_PASSWORD=your_root_passwd：初始化 root 用户的密码。<br>-v /etc/localtime:/etc/localtime:ro   设置容器的时间与宿主机同步<br>-d :表示在后台运行 mysql:5.7.37 镜像名+版本号</p>
</div>


<h3 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a>登录容器</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">sudo docker exec -it mysql5 bash mysql -uroot -pyour_root_passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="开启远程连接服务"><a href="#开启远程连接服务" class="headerlink" title="开启远程连接服务"></a>开启远程连接服务</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; grant all privileges on *.* to root@'%' identified by 'your_root_passwd' with grant option; 
mysql&gt; flush privilesges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER 'root'@'localhost' IDENTIFIED BY '12345678';
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '12345678';

grant all privileges on *.* to 'root'@'%' with grant option;

flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update mysql.user set authentication_string=password('新密码') where user='root' ;
flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 用户信息
select host,user,plugin,authentication_string from mysql.user;
# 时区
show variables like '%time_zone%';
# 变量
SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';
# 更改数据库编码
ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
# 更改表编码
ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4 COLLATEutf8mb4_general_ci; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】之安装MySQL8并挂载数据</title>
    <url>/post/d4875b9e.html</url>
    <content><![CDATA[<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker从仓库中拉取最新版的mysql镜像，默认获取最新的版本</span>
  <span class="token function">docker</span> pull mysql
<span class="token comment"># docker pull mysql:8.0.28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  ~/dockerdata/mysql8/<span class="token punctuation">{</span>data,logs,mysql-files,conf<span class="token punctuation">}</span>
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">755</span> ~/dockerdata/mysql8/
<span class="token function">chmod</span> <span class="token number">644</span> /dockerdata/mysql8/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="新建my-cnf"><a href="#新建my-cnf" class="headerlink" title="新建my.cnf"></a>新建<code>my.cnf</code></h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">vi ~/dockerdata/mysql8/my.cnf

[client]
<span class="token comment">#socket = /usr/mysql/mysqld.sock</span>
default-character-set = utf8mb4

[mysql]
default-character-set=utf8mb4

[mysqld]
user=mysql
<span class="token comment">#pid-file        = /var/run/mysqld/mysqld.pid</span>
<span class="token comment">#socket          = /var/run/mysqld/mysqld.sock</span>
<span class="token comment">#datadir         = /var/lib/mysql</span>

<span class="token comment">#socket = /usr/mysql/mysqld.sock</span>
<span class="token comment">#pid-file = /usr/mysql/mysqld.pid</span>
<span class="token comment">#datadir  = /usr/mysql/data</span>

<span class="token comment"># 创建新表时将使用的默认存储引擎</span>
default-storage-engine=INNODB
lower_case_table_names=1
max_allowed_packet=16M

<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
default_authentication_plugin=mysql_native_password
secure_file_priv=/var/lib/mysql
expire_logs_days=7
sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
max_connections=1000

general_log = 1
general_log_file = /var/log/mysql/access.log
log-error = /var/log/mysql/error.log

character_set_server = utf8mb4
collation_server = utf8mb4_bin
<span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
symbolic-links=0
<span class="token comment"># Custom config should go here</span>
<span class="token comment"># !includedir /etc/mysql/conf.d/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建-MySQL-容器并启动"><a href="#创建-MySQL-容器并启动" class="headerlink" title="创建 MySQL 容器并启动"></a>创建 MySQL 容器并启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>
<span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--ip</span> <span class="token number">172.172</span>.0.5  <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span><span class="token string">"Asia/Shanghai"</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/dockerdata/mysql8/conf:/etc/mysql/conf.d <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /root/dockerdata/mysql8/data:/var/lib/mysql <span class="token punctuation">\</span>
<span class="token comment"># secure_file_priv</span>
<span class="token comment">#-v /root/dockerdata/mysql8/mysql-files:/var/lib/mysql-files \</span>
<span class="token parameter variable">-v</span> /root/dockerdata/mysql8/logs:/var/log/mysql <span class="token punctuation">\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">12345678</span> <span class="token punctuation">\</span>
<span class="token parameter variable">-d</span> mysql:8.0.28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>-v /root/dockerdata/mysql8/my.cnf:/etc/mysql/my.cnf \</code></p>
<div class="note info no-icon"><p>参数说明：<br>–restart=always： 当Docker 重启时，容器会自动启动。<br>–privileged=true：容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限<br>-v /root/dockerdata/mysql8/conf/my.cnf:/etc/my.cnf：映射配置文件<br>-v /root/dockerdata/mysql8/data/:/var/lib/mysql：映射数据目录</p>
</div>

<p><code>注意：启动mysql报如下错误，那是因为MYSQL新特性secure_file_priv对读写文件的影响。</code></p>
<div class="note info no-icon"><p>解决问题:<br>windows下：修改my.ini 在[mysqld]内加入secure_file_priv=/var/lib/mysql<br>linux下：  修改my.cnf 在[mysqld]内加入secure_file_priv=/var/lib/mysql</p>
</div>

<h3 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a>登录容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql8 /bin/bash

mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p12345678</span>

USE mysql<span class="token punctuation">;</span>

ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'12345678'</span><span class="token punctuation">;</span>
ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'12345678'</span><span class="token punctuation">;</span>

grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> with grant option<span class="token punctuation">;</span>

CREATE <span class="token environment constant">USER</span> <span class="token string">'leeze'</span>@<span class="token string">'%'</span> IDENTIFIED with mysql_native_password  BY <span class="token string">'12345678'</span><span class="token punctuation">;</span>
grant all privileges on *.* to <span class="token string">'leeze'</span>@<span class="token string">'%'</span>
flush privileges<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><blockquote>
<p><a href="https://www.cnblogs.com/qq931399960/p/11670625.html">docker安装mysql挂载外部配置和数据目录</a><br><a href="https://www.cnblogs.com/luengmingbiao/p/14747208.html">Docker安装MySQL5和MySQL8</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装Python2和Python3共存</title>
    <url>/post/688f1a31.html</url>
    <content><![CDATA[<p>  一般是python2默认安装了，python3没有安装，这时候一般使用命令：<code>brew install python3</code> 进行安装<br>  这里有个基础知识要记录一下，就是不同方法安装python的路径是不一样的，如下所示：</p>
<span id="more"></span>

<ol>
<table>
    <tbody><tr>
        <td align="center">来源</td><td align="right">Python安装路径</td>
    </tr>
    <tr>
        <td>系统安装路径</td><td style="text-align:right;color:#ff7600;font-size: 16px;">/System/Library/Frameworks/Python.framework/Versions/2.7</td>
    </tr>
    <tr>
        <td>brew安装</td><td style="text-align:right;color:#ff7600;font-size: 16px;">/usr/local/Cellar/python</td>
    </tr>
    <tr>
        <td>官网PKG安装</td><td style="text-align:right;color:#ff7600;font-size: 16px;">/Library/Frameworks/Python.framework/Versions/2.7</td>
    </tr>
</tbody></table>
</ol>

<ol>
<li>控制台输入：<code>vim ~/.bash_profile</code> 并输入如下代码：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Setting PATH for Python 2.7</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/System/Library/Frameworks/Python.framework/Versions/2.7/bin:<span class="token variable">${<span class="token environment constant">PATH</span>}</span>"</span>
<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>
<span class="token comment"># Setting PATH for Python 3.7.3</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/Cellar/python/3.7.3/bin:<span class="token variable">${<span class="token environment constant">PATH</span>}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>控制台输入：<code>vim ~/.bashrc</code> 完成别名的命名<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">python2</span><span class="token operator">=</span><span class="token string">'/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">python3</span><span class="token operator">=</span><span class="token string">'/usr/local/Cellar/python/3.7.3/bin/python3.7'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">python</span><span class="token operator">=</span>python3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>需要<code>source</code>一下<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bash_profile
<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallels Desktop 16在Big Sur下网络初始化失败解决办法</title>
    <url>/post/7507a33f.html</url>
    <content><![CDATA[<p>   Mac最新的操作系统 Big Sur 已经发布，听说一些不兼容，一致没更新，最近手贱，一不小心<code>更新</code>了，突然发现Parallels Desktop 16报无法联网的问题等。</p>
<span id="more"></span>

<h3 id="网络报错信息"><a href="#网络报错信息" class="headerlink" title="网络报错信息"></a>网络报错信息</h3><p>  网络初始化失败：您的虚拟机将继续正常运作，但将无法连接网络</p>
<img data-src="/post/7507a33f/neterror.webp" class="" title="网络异常">


<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h4><p>  最新网上有一个别致的解决方案，可通过终端代码来启动Parallels Desktop 16，解决pd 16 在 big sur下不能联网的问题，解决方案如下：</p>
<ol>
<li>前往 /Library/Preferences/Parallels目录。</li>
<li>打开network.desktop.xml文件。</li>
<li>找到<code>&lt;UseKextless&gt;1&lt;/UseKextless&gt;</code>或<code>&lt;UseKextless&gt;-1&lt;/UseKextless&gt;</code>, 修改为 <code>&lt;UseKextless&gt;0&lt;/UseKextless&gt;</code>。</li>
<li>如果找不到这个标记，那么就在根标记下创建它，如下：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>ParallelsNetworkConfig<span class="token operator">&gt;</span>``
	<span class="token operator">&lt;</span><span class="token operator">!</span>-- 新增 --<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>UseKextless<span class="token operator">&gt;</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/UseKextless<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/ParallelsNetworkConfig<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/7507a33f/neterror.png" class="" title="网络异常修改">


<h4 id="USB-问题"><a href="#USB-问题" class="headerlink" title="USB 问题"></a>USB 问题</h4><ol>
<li>前往/Library/Preferences/Parallels文件夹。</li>
<li>打开 dispatcher.desktop.xml文件。</li>
<li>找到 <code>&lt;Usb&gt;0&lt;/Usb&gt;</code> ，修改为 <code>&lt;Usb&gt;1&lt;/Usb&gt;</code>。</li>
</ol>
<img data-src="/post/7507a33f/usberror.png" class="" title="Usb异常修改">
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 环境 PHP8.0 编译安装以及开启 JIT</title>
    <url>/post/421fae74.html</url>
    <content><![CDATA[<p>  PHP是超文本预处理器(Hypertext Preprocessor)的简称，是一种用于创建动态性交互网站的强有力的语言。</p>
<span id="more"></span>


<h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> libxml2 libxml2-devel openssl openssl-devel <span class="token function">bzip2</span> bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel ncurses <span class="token function">curl</span> gdbm-devel db4-devel libXpm-devel libX11-devel gd-devel gmp-devel expat-devel xmlrpc-c xmlrpc-c-devel libicu-devel libmcrypt-devel libmemcached-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">wget</span> https://www.php.net/distributions/php-8.0.0.tar.gz

<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> php-8.0.0.tar.gz
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="生成预编译文件-Makefile"><a href="#生成预编译文件-Makefile" class="headerlink" title="生成预编译文件 Makefile"></a>生成预编译文件 Makefile</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token builtin class-name">cd</span> php-8.0.0

<span class="token comment"># 生成 Makefile</span>
./configure <span class="token punctuation">\</span>
<span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/php8 <span class="token punctuation">\</span>
--with-config-file-path<span class="token operator">=</span>/usr/local/php8/etc <span class="token punctuation">\</span>
--enable-fpm <span class="token punctuation">\</span>
--with-fpm-user<span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-fpm-group<span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-curl <span class="token punctuation">\</span>
--with-freetype-dir <span class="token punctuation">\</span>
--enable-gd <span class="token punctuation">\</span>
--with-gettext <span class="token punctuation">\</span>
--with-iconv-dir <span class="token punctuation">\</span>
--with-kerberos <span class="token punctuation">\</span>
--with-libdir<span class="token operator">=</span>lib64 <span class="token punctuation">\</span>
--with-libxml-dir <span class="token punctuation">\</span>
--with-mysqli <span class="token punctuation">\</span>
--with-openssl <span class="token punctuation">\</span>
--with-pcre-regex <span class="token punctuation">\</span>
--with-pdo-mysql <span class="token punctuation">\</span>
--with-pdo-sqlite <span class="token punctuation">\</span>
--with-pear <span class="token punctuation">\</span>
--with-png-dir <span class="token punctuation">\</span>
--with-jpeg-dir <span class="token punctuation">\</span>
--with-xmlrpc <span class="token punctuation">\</span>
--with-xsl <span class="token punctuation">\</span>
--with-zlib <span class="token punctuation">\</span>
--with-bz2 <span class="token punctuation">\</span>
--with-mhash <span class="token punctuation">\</span>
--enable-bcmath <span class="token punctuation">\</span>
--enable-libxml <span class="token punctuation">\</span>
--enable-inline-optimization <span class="token punctuation">\</span>
--enable-mbregex <span class="token punctuation">\</span>
--enable-mbstring <span class="token punctuation">\</span>
--enable-opcache <span class="token punctuation">\</span>
--enable-pcntl <span class="token punctuation">\</span>
--enable-shmop <span class="token punctuation">\</span>
--enable-soap <span class="token punctuation">\</span>
--enable-sockets <span class="token punctuation">\</span>
--enable-sysvsem <span class="token punctuation">\</span>
--enable-sysvshm <span class="token punctuation">\</span>
--enable-xml <span class="token punctuation">\</span>
--enable-zip 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   如果看到以下提示信息，说明 configure 这步已经成功啦。</p>
<img data-src="/post/421fae74/configure.png" class="" title="configure-success">


<p>  <code>可能会出现错误</code></p>
<ol>
<li>configure: error: Package requirements (sqlite3 &gt; 3.7.4) were not met: No package ‘sqlite3’ found<br>解决方法：<code>yum install libsqlite3x-devel -y</code></li>
<li>configure: error: Package requirements (oniguruma) were not met<br>解决方法：<code>yum install oniguruma-devel -y</code></li>
<li>configure: error: Package requirements (libxml-2.0 &gt;= 2.7.6) were not met:<br>No package ‘libxml-2.0’ found<br>解决方法：<code>yum install libxml2-devel.x86_64</code></li>
<li>configure: error: Package requirements (sqlite3 &gt; 3.7.4) were not met:<br>No package ‘sqlite3’ found<br>解决方法：<code>yum install sqlite-devel.x86_64</code></li>
</ol>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p><code>make &amp;&amp; make install</code></p>
<p>安装成功执行 <code>/usr/local/php8/bin/php -v</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token punctuation">[</span>root@i14kuk3fpixkevvZ vhost<span class="token punctuation">]</span><span class="token comment"># /usr/local/php8/bin/php -v</span>
PHP <span class="token number">8.0</span>.0 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Jan  <span class="token number">5</span> <span class="token number">2021</span> 06:38:02<span class="token punctuation">)</span> <span class="token punctuation">(</span> NTS <span class="token punctuation">)</span>
Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> The PHP Group
Zend Engine v4.0.0-dev, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> Zend Technologies
    with Zend OPcache v8.0.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span>, by Zend Technologies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol>
<li> 复制 php 配置文件 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> php.ini-production /usr/local/php8/etc/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<li> 复制 php-fpm 配置文件 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/php8/etc/php-fpm.conf.default /usr/local/php8/etc/php-fpm.conf
<span class="token function">cp</span> /usr/local/php8/etc/php-fpm.d/www.conf.default /usr/local/php8/etc/php-fpm.d/www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<li> 修改 php-fpm 配置 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php-fpm.conf 中开启 pid <span class="token operator">=</span> run/php-fpm.pid 配置项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>


<h2 id="配置启动-php-fpm"><a href="#配置启动-php-fpm" class="headerlink" title="配置启动 php-fpm"></a>配置启动 php-fpm</h2><p>复制 php-fpm 的启动脚本<br><code> cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</code></p>
<p>增加执行权限<br><code> chmod +x /etc/init.d/php-fpm</code></p>
<p>启动 php-fpm<br><code>/etc/init.d/php-fpm start</code> 或者 <code>service php-fpm start</code></p>
<h2 id="开启-opcache-和-JIT"><a href="#开启-opcache-和-JIT" class="headerlink" title="开启 opcache 和 JIT"></a>开启 opcache 和 JIT</h2><p><code>opcache</code> 配置参数参考：<a href="https://www.php.net/manual/zh/opcache.configuration.php">https://www.php.net/manual/zh/opcache.configuration.php</a><br><code>JIT</code>   配置参数参考：<a href="https://www.laruence.com/2020/06/27/5963.html">https://www.laruence.com/2020/06/27/5963.html</a></p>
<p>添加配置到 <code>/usr/local/php8/etc/php.ini</code></p>
<h3 id="启用并配置-opcache"><a href="#启用并配置-opcache" class="headerlink" title="启用并配置 opcache"></a>启用并配置 opcache</h3><p><code>zend_extension</code> 的路径替换为你自己的路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">zend_extension</span><span class="token operator">=</span>/usr/local/php8/lib/php/extensions/no-debug-non-zts-20200930/opcache.so

<span class="token punctuation">[</span>opcache<span class="token punctuation">]</span>
<span class="token assign-left variable">opcache.enable</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">opcache.enable_cli</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">opcache.memory_consumption</span><span class="token operator">=</span><span class="token number">192</span>
<span class="token assign-left variable">opcache.interned_strings_buffer</span><span class="token operator">=</span><span class="token number">8</span>
<span class="token assign-left variable">opcache.max_accelerated_files</span><span class="token operator">=</span><span class="token number">4000</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置-JIT"><a href="#配置-JIT" class="headerlink" title="配置 JIT"></a>配置 JIT</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">opcache.jit</span><span class="token operator">=</span><span class="token number">1205</span>
<span class="token assign-left variable">opcache.jit_buffer_size</span><span class="token operator">=</span>64M
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h2 id="重新启动-php-fpm"><a href="#重新启动-php-fpm" class="headerlink" title="重新启动 php-fpm"></a>重新启动 php-fpm</h2><p><code> service php-fpm restart</code></p>
<h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><h3 id="新建-index-php"><a href="#新建-index-php" class="headerlink" title="新建 index.php"></a>新建 index.php</h3><p>在 <code>/usr/local/nginx/html</code>目录下创建 <code>index.php</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?php
    phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
?<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> server <span class="token punctuation">{</span>
      listen    <span class="token number">8082</span><span class="token punctuation">;</span>
      server_name <span class="token number">127.0</span>.0.1<span class="token punctuation">;</span> 
      root /usr/local/nginx/html<span class="token punctuation">;</span> 
      index index.html index.htm index.php<span class="token punctuation">;</span>
charset utf-8<span class="token punctuation">;</span>

   location ~ <span class="token punctuation">\</span>.php$ <span class="token punctuation">{</span>
       fastcgi_connect_timeout <span class="token number">30</span><span class="token punctuation">;</span>
       fastcgi_send_timeout <span class="token number">30</span><span class="token punctuation">;</span>
       fastcgi_read_timeout <span class="token number">30</span><span class="token punctuation">;</span>
		fastcgi_pass  <span class="token number">127.0</span>.0.1:9000<span class="token punctuation">;</span>
       fastcgi_index index.php<span class="token punctuation">;</span>
       fastcgi_param SCRIPT_FILENAME <span class="token variable">$realpath_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>
       include fastcgi_params<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试php环境"><a href="#测试php环境" class="headerlink" title="测试php环境"></a>测试php环境</h3><p>浏览器访问 <code>127.0.0.1:8082</code> 返回结果：</p>
<h4 id="Zend-OPcache"><a href="#Zend-OPcache" class="headerlink" title="Zend OPcache"></a>Zend OPcache</h4><img data-src="/post/421fae74/opcache.png" class="" title="Zend-OPcache">

<h4 id="php-ini-中-JIT-配置信息"><a href="#php-ini-中-JIT-配置信息" class="headerlink" title="php.ini 中 JIT 配置信息"></a>php.ini 中 JIT 配置信息</h4><img data-src="/post/421fae74/jit.png" class="" title="JIT">

<h2 id="增加全局-php-环境变量"><a href="#增加全局-php-环境变量" class="headerlink" title="增加全局 php 环境变量"></a>增加全局 php 环境变量</h2><p><code>vim /etc/profile</code>,添加配置到最后:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/php8/bin
<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code> source /etc/profile</code></p>
<br>

<blockquote>
<p>其他参考</p>
<blockquote>
<p><a href="https://www.cnblogs.com/pyrene/p/6523184.html"> php安装 </a><br><a href="https://www.cnblogs.com/ryanzheng/p/11263261.html"> CentOS 7 配置 nginx php-fpm 详细教程 </a><br><a href="https://blog.csdn.net/u013474436/article/details/52972699">Nginx+Php-fpm运行原理详解</a></p>
</blockquote>
</blockquote>
<br>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8通过命令设置静态IP地址</title>
    <url>/post/68713d77.html</url>
    <content><![CDATA[<p>  在<code>centos7</code>上，同时支持<code>network.service</code>和<code>NetworkManager.service</code>（简称NM）。默认情况下，这2个服务都有开启，但许多人都会将NM禁用掉。<br>  在<code>centos8</code>上，已<code>废弃network.service</code>，因此只能通过<code>NM</code>进行网络配置，包括动态ip和静态ip。换言之，在centos8上，<code>必须开启NM</code>，否则无法使用网络。<br>  <code>注：centos8依然支持network.service，只是默认没安装</code>。</p>
<span id="more"></span>

<h2 id="静态IP设置"><a href="#静态IP设置" class="headerlink" title="静态IP设置"></a>静态IP设置</h2><ol>
<li><code>su root</code>登录终端  </li>
<li>确保<code>NM</code>启动<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动nm网络</span>
systemctl restart NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>设置静态IP地址(<code>enp0s5</code>名字各不同)<br>  <code>/etc/sysconfig/network-scripts</code>目录下存放着网卡的配置文件，文件名称是<code>ifcfg- 网卡名称</code>。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/network-scripts/ifcfg-enp0s5

<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet
<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none
<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static      <span class="token comment">#将dhcp修改为stati表示使用静态ip</span>
<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.211</span>.55.81   <span class="token comment">#设置IP地址</span>
<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0 <span class="token comment">#设置子网掩码</span>
<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.211</span>.55.1   <span class="token comment">#设置网关</span>
<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">10.211</span>.55.1      <span class="token comment">#设置dns</span>
<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no
<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy
<span class="token assign-left variable">NAME</span><span class="token operator">=</span>enp0s5
<span class="token assign-left variable">UUID</span><span class="token operator">=</span>0b14dacc-2e6a-4f89-a3de-888d70ac1334
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>enp0s5
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes             <span class="token comment">#将no改为yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>设置<code>connection</code>,重新启动网络<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重新载入一下配置文件</span>
nmcli c reload
<span class="token comment"># 重启网卡（下面的三条命令都可以）</span>
nmcli c up enp0s5 
nmcli d reapply enp0s5
nmcli d connect enp0s5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p><code>注</code>：原来<code>cento6</code>是使用<code>service network restart</code>,<br>    <code>cento7</code>是使用<code>systemctl restart network</code>，<br>    <code>centos8</code>则命令就变成<code>nmcli c reload</code>。</p>
<h2 id="关闭图形界面登录"><a href="#关闭图形界面登录" class="headerlink" title="关闭图形界面登录"></a>关闭图形界面登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl set-default multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/hostname

CentOS_8_1.localdomain <span class="token comment">#改成自己的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="nmcli常用命令一览"><a href="#nmcli常用命令一览" class="headerlink" title="nmcli常用命令一览"></a>nmcli常用命令一览</h2><p><a href="https://www.cnblogs.com/linuxandy/p/10839856.html">参考</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看ip（类似于ifconfig、ip addr）</span>
nmcli

<span class="token comment"># 创建connection，配置静态ip（等同于配置ifcfg，其中BOOTPROTO=none，并ifup启动）</span>
nmcli c <span class="token function">add</span> <span class="token builtin class-name">type</span> ethernet con-name ethX ifname ethX ipv4.addr <span class="token number">192.168</span>.1.100/24 ipv4.gateway <span class="token number">192.168</span>.1.1 ipv4.method manual

<span class="token comment"># 创建connection，配置动态ip（等同于配置ifcfg，其中BOOTPROTO=dhcp，并ifup启动）</span>
nmcli c <span class="token function">add</span> <span class="token builtin class-name">type</span> ethernet con-name ethX ifname ethX ipv4.method auto

<span class="token comment"># 修改ip（非交互式）</span>
nmcli c modify ethX ipv4.addr <span class="token string">'192.168.1.200/24'</span>
nmcli c up ethX

<span class="token comment"># 修改ip（交互式）</span>
nmcli c edit ethX
nmcli<span class="token operator">&gt;</span> goto ipv4.addresses
nmcli ipv4.addresses<span class="token operator">&gt;</span> change
Edit <span class="token string">'addresses'</span> value: <span class="token number">192.168</span>.1.200/24
Do you also want to <span class="token builtin class-name">set</span> <span class="token string">'ipv4.method'</span> to <span class="token string">'manual'</span>? <span class="token punctuation">[</span>yes<span class="token punctuation">]</span>: <span class="token function">yes</span>
nmcli ipv<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span> save
nmcli ipv<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span> activate
nmcli ipv<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span> quit

<span class="token comment"># 启用connection（相当于ifup）</span>
nmcli c up ethX

<span class="token comment"># 停止connection（相当于ifdown）</span>
nmcli c down

<span class="token comment"># 删除connection（类似于ifdown并删除ifcfg）</span>
nmcli c delete ethX

<span class="token comment"># 查看connection列表</span>
nmcli c show

<span class="token comment"># 查看connection详细信息</span>
nmcli c show ethX

<span class="token comment"># 重载所有ifcfg或route到connection（不会立即生效）</span>
nmcli c reload

<span class="token comment"># 重载指定ifcfg或route到connection（不会立即生效）</span>
nmcli c load /etc/sysconfig/network-scripts/ifcfg-ethX
nmcli c load /etc/sysconfig/network-scripts/route-ethX

<span class="token comment"># 立即生效connection，有3种方法</span>
nmcli c up ethX
nmcli d reapply ethX
nmcli d connect ethX

<span class="token comment"># 查看device列表</span>
nmcli d

<span class="token comment"># 查看所有device详细信息</span>
nmcli d show

<span class="token comment"># 查看指定device的详细信息</span>
nmcli d show ethX

<span class="token comment"># 激活网卡</span>
nmcli d connect ethX

<span class="token comment"># 关闭无线网络（NM默认启用无线网络）</span>
nmcli r all off

<span class="token comment"># 查看NM纳管状态</span>
nmcli n

<span class="token comment"># 开启NM纳管</span>
nmcli n on

<span class="token comment"># 关闭NM纳管（谨慎执行）</span>
nmcli n off

<span class="token comment"># 监听事件</span>
nmcli m

<span class="token comment"># 查看NM本身状态</span>
nmcli

<span class="token comment"># 检测NM是否在线可用</span>
nm-online<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="配置语言环境"><a href="#配置语言环境" class="headerlink" title="配置语言环境"></a>配置语言环境</h2><ol>
<li>设置中文环境<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim /etc/profile.d/locale.sh</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span>zh_CN.UTF-8
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.UTF-8

<span class="token comment"># vim /etc/locale.conf</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8

<span class="token comment"># vim /etc/sysconfig/i18n</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8

<span class="token comment"># vim /etc/environment</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8
<span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.UTF-8

<span class="token comment"># source /etc/profile.d/locale.sh</span>
<span class="token comment"># source /etc/locale.conf</span>
<span class="token comment"># source /etc/sysconfig/i18n</span>
<span class="token comment"># source /etc/environment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>设置英文环境<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim /etc/profile.d/locale.sh</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span>en_US.UTF-8
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>en_US.UTF-8

<span class="token comment"># vim /etc/locale.conf</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8

<span class="token comment"># vim /etc/sysconfig/i18n</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8

<span class="token comment"># vim /etc/environment</span>
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>en_US.UTF-8

<span class="token comment"># source /etc/profile.d/locale.sh</span>
<span class="token comment"># source /etc/locale.conf</span>
<span class="token comment"># source /etc/sysconfig/i18n</span>
<span class="token comment"># source /etc/environment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决CentOS6停止更新支持后yum源失效</title>
    <url>/post/9bae427b.html</url>
    <content><![CDATA[<p>  <code>2020年11月30日 centos6各大开源镜像站已经停止维护了。</code></p>
<p>  最近CentOS 6已经停止更新支持，同时官方也把yum源删除了，目前CentOS 6系统使用yum命令安装软件包基本都是失败，因此需要更换yum源。</p>
<span id="more"></span>

<h2 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h2><p>  在ssh界面执行以下命令即可一键更换yum源为CentOS的Vault源（包括CentOS官方和阿里云的源）： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://file.kangle.odata.cc/repo/Centos-6.repo
<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/epel.repo http://file.kangle.odata.cc/repo/epel-6.repo
yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  或(阿里源)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|enabled=1|enabled=0|g"</span> /etc/yum/pluginconf.d/fastestmirror.conf
<span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
<span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo 
yum clean all
yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="CentOS-6-10-ISO-下载"><a href="#CentOS-6-10-ISO-下载" class="headerlink" title="CentOS 6.10 ISO 下载"></a>CentOS 6.10 ISO 下载</h2><ol>
<li><p>阿里云：<a href="https://mirrors.aliyun.com/centos-vault/6.10/isos/x86_64/CentOS-6.10-x86_64-bin-DVD1.iso">https://mirrors.aliyun.com/centos-vault/6.10/isos/x86_64/CentOS-6.10-x86_64-bin-DVD1.iso</a></p>
</li>
<li><p>官 方：<a href="https://vault.centos.org/6.10/isos/x86_64/CentOS-6.10-x86_64-bin-DVD1.iso">https://vault.centos.org/6.10/isos/x86_64/CentOS-6.10-x86_64-bin-DVD1.iso</a></p>
</li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains IntelliJ IDEA2020.3 x64最新完全破解</title>
    <url>/post/a240ffad.html</url>
    <content><![CDATA[<p>  JetBrains是一家捷克的软件开发公司，该公司位于捷克的布拉格，并在俄国的圣彼得堡及美国麻州波士顿都设有办公室，该公司最为人所熟知的产品是Java编程语言开发撰写时所用的集成开发环境：IntelliJ IDEA。</p>
<span id="more"></span>
<del>
<p><font style="font-size: 25px; color: rgba(255, 0, 0, 1)">  特别声明: 仅供学习禁止商用! 如有商业需要请支持购买正版!</font></p>

<h2 id="支持版本"><a href="#支持版本" class="headerlink" title="支持版本"></a>支持版本</h2><div class="note success no-icon"><p>IntelliJ IDEA 2020.3及以下<br>AppCode 2019.3.7及以下<br>CLion 2019.3.5及以下<br>DataGrip 2020.3及以下<br>GoLand 2020.3及以下<br>PhpStorm 2020.3及以下<br>PyCharm 2020.3及以下<br>Rider 2019.3.4及以下<br>RubyMine 2019.3.4及以下<br>WebStorm 2020.3及以下</p>
</div>

<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol>

<li> BetterIntelliJ-1.15.7z </li>

<p>软件启动，先免费使用<br>将BetterIntelliJ.zip拖入到软件界面，会提示重启<br>重启以后，进入菜单，选择授权管理，输入key里面的内容即可<br>本次补丁没有任何限制，理论上可以永久使用了<br><code>特别提示，需要删除%appdata%\JetBrains相关目录</code></p>
<li> ide-eval-resetter.zip </li>

<p>无限重置激活补丁，IDEA系列软件，默认提供30天无限制功能使用，这个补丁能重置30天，要到期了，用补丁重置一下就行，并且补丁有自动重置功能，也相当于无限激活。</p>
</ol>

<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><h5 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h5><p>  打开插件中心 File -&gt; Settings -&gt;Plugins–&gt; Manage Plugins Reposito，设置插件中心仓库</p>
<ol>
<li><p>设置仓库地址：<a href="https://repo.idechajian.com/">https://repo.idechajian.com</a><br>点击OK之后，便可以继续在插件中心，搜索关键字“BetterIntellij” 并安装，<a href="https://www.cnblogs.com/GeekerJun/p/14202387.html">参考</a></p>
</li>
<li><p>设置仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a><br>点击OK之后，便可以继续在插件中心， 搜索：IDE Eval Reset插件进行安装，<a href="https://zhile.io/2020/11/18/jetbrains-eval-reset.html">参考</a></p>
</li>
</ol>
<h5 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h5><p>   <a onclick="window.open('https://www.xiaosige.com/download/BetterIntelliJ');return false;" href="javascript:void(0);">下载</a></p>
<br>

<div class="note default no-icon"><p>其他相关链接</p>
<blockquote>
<p><a href="https://songzixian.com/">宋子宪博客</a><br><a href="https://zhile.io/2018/08/25/jetbrains-license-server-crack.html">知了</a></p>
</blockquote>
</div>

</del>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC返回pdf文件并在页面显示而不是下载</title>
    <url>/post/f556d83e.html</url>
    <content><![CDATA[<p>  spring mvc下载pdf</p>
<span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/getpdf"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getPDF</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 读取pdf文件到字节里</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contents <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">"application/pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">"output.pdf"</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token string">"must-revalidate, post-check=0, pre-check=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  如果上面的代码变为下载，可以尝试</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"inline"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  或</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"inline;filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  浏览器会尝试把inline的内容显示在页面。<br>  如果有中文乱码问题：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ISO8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本使用curl命令发送JSON数据</title>
    <url>/post/3aee04b1.html</url>
    <content><![CDATA[<p>  在Linux使用命令行工具curl发送JSON数据需要把content-type设置为“application/json”。</p>
<span id="more"></span>

<p>  -H “Content-Type: application/json<br>  示例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">'{"username":"jack","age":10}'</span> http://example.com/api/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  -H，–header：设置头信息Content-Type为application/json。<br>  -d，–data：添加发送的数据。<br>  -X：指定http请求的方法。如果使用了-d，默认是使用POST，可以省略-X参数。</p>
<p>  此外也可以把json数据放在一个文件里。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> @user.json http://example.com/api/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  注意：文件前的@不能去掉<br>  Windows<br>  对于windows，-d参数的数据，需要使用双引号，json里的双引号使用反斜杠转义才可以：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">"{<span class="token entity" title="\&quot;">\"</span>username<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>jack<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>age<span class="token entity" title="\&quot;">\"</span>:10}"</span> http://example.com/api/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁实现类</title>
    <url>/post/8406c440.html</url>
    <content><![CDATA[<p>  Redis分布式锁实现类，RedisDistributedLock。</p>
<span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dami<span class="token punctuation">.</span>util<span class="token punctuation">.</span>redis</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">DataAccessException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisCallback</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>
 
<span class="token comment">/**
 * Redis分布式锁实现类
 * @ClassName: RedisDistributedLock
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author Administrator
 * @date 2018-11-22 下午2:11:07
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">{</span>
	
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RedisDistributedLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 锁标志</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">"lock_"</span><span class="token punctuation">;</span>
	
	<span class="token comment">// SET_IF_NOT_EXIST 标志，表示如果当key不存在时进行set操作，否则不处理</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NX</span> <span class="token operator">=</span> <span class="token string">"NX"</span><span class="token punctuation">;</span>
	<span class="token comment">// 过期时间标志, EX 表示以秒作为单位</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EX</span> <span class="token operator">=</span> <span class="token string">"EX"</span><span class="token punctuation">;</span>
	<span class="token comment">// 锁成功标志</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_SUCCESS</span> <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>
	<span class="token comment">// 解锁成功标志</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">DEL_SUCCESS</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
	<span class="token comment">// 默认过期时间</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_EXPIRE_TIME</span> <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>
	<span class="token comment">// 默认重试次数</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_RETRY_TIME</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token comment">// 默认重试暂停时间</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INTERNAL_TIME</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">// 解锁时的 lua语言Script</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEL_SCRIPT</span> <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>
	<span class="token comment">// 过期时间（秒）</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">;</span>
	<span class="token comment">// 锁重试次数</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">;</span>
	<span class="token comment">// 锁重试间隔</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> internalTime<span class="token punctuation">;</span>
	<span class="token comment">// 加锁者标志, 解锁时只有与加锁时的值一致才允许解锁</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lockId<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@Autowired</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> <span class="token constant">DEFAULT_EXPIRE_TIME</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_RETRY_TIME</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_INTERNAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> <span class="token constant">DEFAULT_EXPIRE_TIME</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_RETRY_TIME</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_INTERNAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">,</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">,</span> <span class="token keyword">int</span> internalTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>expireSeconds <span class="token operator">=</span> expireSeconds<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>retryTimes <span class="token operator">=</span> retryTimes<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>internalTime <span class="token operator">=</span> internalTime<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>lockId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/**
	 * 获取redis 锁
	 * @Title: lock
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author Administrator
	 * @date 2018-11-22 下午1:55:57
	 * @param key
	 * @return
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lockId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	
		<span class="token keyword">final</span> <span class="token class-name">String</span> fullKey <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>
		<span class="token comment">//logger.debug("尝试获取锁, 锁Key:{}, 锁标识:{}", fullKey, lockId);</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尝试获取锁, 锁Key:{"</span><span class="token operator">+</span>fullKey<span class="token operator">+</span><span class="token string">"}, 锁标识:{"</span><span class="token operator">+</span>lockId<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> retryTimes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//logger.debug("第 {} 次尝试获取锁", i + 1);</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 {"</span><span class="token operator">+</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"} 次尝试获取锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token class-name">String</span> status <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token annotation punctuation">@Override</span>
				<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
					<span class="token keyword">try</span> <span class="token punctuation">{</span>
						<span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getNativeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fullKey<span class="token punctuation">,</span> lockId<span class="token punctuation">,</span> <span class="token constant">NX</span><span class="token punctuation">,</span> <span class="token constant">EX</span><span class="token punctuation">,</span> expireSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOCK_SUCCESS</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">//logger.debug("获取锁成功, 锁Key:{}, 锁标识:{}", fullKey, lockId);</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁成功, 锁Key:{"</span><span class="token operator">+</span>fullKey<span class="token operator">+</span><span class="token string">"}, 锁标识:{"</span><span class="token operator">+</span>lockId<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>internalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//logger.debug("尝试获取锁 {} 次后失败, 锁Key:{}", retryTimes, fullKey);</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尝试获取锁 {"</span><span class="token operator">+</span>retryTimes<span class="token operator">+</span><span class="token string">"} 次后失败, 锁Key:{"</span><span class="token operator">+</span>fullKey<span class="token operator">+</span><span class="token string">"}"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/**
	 * 释放redis锁
	 * @Title: unlock
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author Administrator
	 * @date 2018-11-22 下午1:55:34
	 * @param key
	 * @return
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lockId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> fullKey <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>
		<span class="token comment">//logger.debug("尝试解锁, 锁Key:{}, 锁标识:{}", fullKey, lockId);</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尝试解锁, 锁Key:{"</span><span class="token operator">+</span>fullKey<span class="token operator">+</span><span class="token string">"}, 锁标识:{"</span><span class="token operator">+</span>lockId<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token annotation punctuation">@Override</span>
			<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
				<span class="token keyword">try</span> <span class="token punctuation">{</span>
					<span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getNativeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token constant">DEL_SCRIPT</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>fullKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> isUnlock <span class="token operator">=</span> value<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">DEL_SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>isUnlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//logger.debug("解锁成功, 锁Key:{}", fullKey);</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解锁成功, 锁Key:{"</span><span class="token operator">+</span>fullKey<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> isUnlock<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/**
	 * 
	 * @Title: get
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author Administrator
	 * @date 2018-11-22 下午2:38:28
	 * @param key
	 * @return
	 */</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> fullKey <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			obj <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token annotation punctuation">@Override</span>
				<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
					<span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getNativeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fullKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span> result <span class="token operator">=</span>  obj<span class="token punctuation">;</span>
			<span class="token keyword">return</span> result<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"get redis occured an exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLockId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> lockId<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisDistributedLock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisDistributedLock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> expireSeconds<span class="token punctuation">,</span> <span class="token constant">DEFAULT_RETRY_TIME</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_INTERNAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedisDistributedLock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">,</span> <span class="token keyword">int</span> retryTimes<span class="token punctuation">,</span> <span class="token keyword">int</span> internalTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> expireSeconds<span class="token punctuation">,</span> retryTimes<span class="token punctuation">,</span> internalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>雪花算法实现-分布式系统</title>
    <url>/post/8515d6d4.html</url>
    <content><![CDATA[<h3 id="订单id的特殊性"><a href="#订单id的特殊性" class="headerlink" title="订单id的特殊性"></a>订单id的特殊性</h3><p>  订单数据非常庞大，将来一定会做分库分表。那么这种情况下， 要保证id的唯一，就不能靠数据库自增，而是自己来实现算法，生成唯一id。</p>
<span id="more"></span>

<h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><p>  这里的订单id是通过一个工具类生成的，而工具类所采用的生成id算法，是由Twitter公司开源的snowflake（雪花）算法。</p>
<h3 id="简单原理"><a href="#简单原理" class="headerlink" title="简单原理"></a>简单原理</h3><p>  雪花算法会生成一个64位的二进制数据，为一个Long型。(转换成字符串后长度最多19位) ，其基本结构：</p>

<p>  第一位：为未使用<br>  第二部分：41位为毫秒级时间(41位的长度可以使用69年)<br>  第三部分：5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点）<br>  第四部分：最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）<br>  snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。经测试snowflake每秒能够产生26万个ID。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">NetworkInterface</span></span><span class="token punctuation">;</span>
<span class="token comment">/**
 * &lt;p&gt;名称：IdWorker.java&lt;/p&gt;
 * &lt;p&gt;描述：分布式自增长ID&lt;/p&gt;
 * &lt;pre&gt;
 *     Twitter的 Snowflake　JAVA实现方案
 * &lt;/pre&gt;
 * 核心代码为其IdWorker这个类实现，其原理结构如下，我分别用一个0表示一位，用—分割开部分的作用：
 * 1||0---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000
 * 在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，
 * 然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），
 * 然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。
 * 这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），
 * 并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。
 * &lt;p&gt;
 * 64位ID (42(毫秒)+5(机器ID)+5(业务编码)+12(重复累加))
 *
 * @author Polim
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorker</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     *  时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1288834974657L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     *  机器标识位数
      */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 数据中心标识位数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 机器ID最大值
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 数据中心ID最大值
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 毫秒内自增位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 机器ID偏左移12位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 数据中心ID左移17位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 时间毫秒左移22位
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 上次生产id时间戳
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 并发控制
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 数据标识id部分
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span>maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> <span class="token function">getMaxWorkerId</span><span class="token punctuation">(</span>datacenterId<span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * @param workerId
     *            工作机器ID
     * @param datacenterId
     *            序列号
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"worker Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"datacenter Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * 获取下一个ID
     *
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当前毫秒内，则+1</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 当前毫秒内计数满了，则等待下一秒</span>
                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>
        <span class="token comment">// ID偏移组合生成最终的ID，并返回ID</span>
        <span class="token keyword">long</span> nextId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span> sequence<span class="token punctuation">;</span>
        <span class="token keyword">return</span> nextId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * &lt;p&gt;
     * 获取 maxWorkerId
     * &lt;/p&gt;
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getMaxWorkerId</span><span class="token punctuation">(</span><span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> maxWorkerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> mpid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">/*
          * GET jvmPid
          */</span>
            mpid<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

      <span class="token comment">/*
       * MAC + PID 的 hashcode 获取16个低位
       */</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mpid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>maxWorkerId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * &lt;p&gt;
     * 数据标识id部分
     * &lt;/p&gt;
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxDatacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InetAddress</span> ip <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">NetworkInterface</span> network <span class="token operator">=</span> <span class="token class-name">NetworkInterface</span><span class="token punctuation">.</span><span class="token function">getByInetAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>network <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                id <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mac <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">getHardwareAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x000000FF</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                        <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x0000FF00</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mac<span class="token punctuation">[</span>mac<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
                id <span class="token operator">=</span> id <span class="token operator">%</span> <span class="token punctuation">(</span>maxDatacenterId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" getDatacenterId: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>  为了保证不重复，我们给每个部署的节点都配置机器id：</p>
<img data-src="/post/8515d6d4/snowflake-002.png" class="" title="snowflake">

<h3 id="加载属性"><a href="#加载属性" class="headerlink" title="加载属性"></a>加载属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>order<span class="token punctuation">.</span>properties</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token comment">/**
 * @author: 98050
 * @create: 2018-10-27
 **/</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"leyou.worker"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorkerProperties</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 当前机器id
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 序列号
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> dataCenterId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWorkerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> workerId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorkerId</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDataCenterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dataCenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDataCenterId</span><span class="token punctuation">(</span><span class="token keyword">long</span> dataCenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataCenterId <span class="token operator">=</span> dataCenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>order<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">IdWorkerProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">IdWorker</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token comment">/**
 * @author: 98050
 * @create: 2018-10-27
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">IdWorkerProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorkerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IdWorker</span> <span class="token function">idWorker</span><span class="token punctuation">(</span><span class="token class-name">IdWorkerProperties</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getWorkerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prop<span class="token punctuation">.</span><span class="token function">getDataCenterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取orderId</span>
<span class="token keyword">long</span> orderId <span class="token operator">=</span> idworker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Twitter_Snowflake&lt;br&gt;
 * SnowFlake的结构如下(每部分用-分开):
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;
 * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;
 * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)
 * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;
 * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;
 * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;
 * 加起来刚好64位，为一个Long型。&lt;br&gt;
 * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdWorker</span> <span class="token punctuation">{</span>

    <span class="token comment">// ==============================Fields===========================================</span>
    <span class="token comment">/** 开始时间截 (2015-01-01) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1420041600000L</span><span class="token punctuation">;</span>

    <span class="token comment">/** 机器id所占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>

    <span class="token comment">/** 数据标识id所占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>

    <span class="token comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 支持的最大数据标识id，结果是31 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 序列在id中占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>

    <span class="token comment">/** 机器ID向左移12位 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>

    <span class="token comment">/** 数据标识id向左移17位(12+5) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>

    <span class="token comment">/** 时间截向左移22位(5+5+12) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>

    <span class="token comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** 工作机器ID(0~31) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>

    <span class="token comment">/** 数据中心ID(0~31) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>

    <span class="token comment">/** 毫秒内序列(0~4095) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>

    <span class="token comment">/** 上次生成ID的时间截 */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">//==============================Constructors=====================================</span>
    <span class="token comment">/**
     * 构造函数
     * @param workerId 工作ID (0~31)
     * @param datacenterId 数据中心ID (0~31)
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"worker Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"datacenter Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ==============================Methods==========================================</span>
    <span class="token comment">/**
     * 获得下一个ID (该方法是线程安全的)
     * @return SnowflakeId
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>
                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果是同一时间生成的，则进行毫秒内序列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token comment">//毫秒内序列溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//阻塞到下一个毫秒,获得新的时间戳</span>
                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//时间戳改变，毫秒内序列重置</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//上次生成ID的时间截</span>
        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>

        <span class="token comment">//移位并通过或运算拼到一起组成64位的ID</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 阻塞到下一个毫秒，直到获得新的时间戳
     * @param lastTimestamp 上次生成ID的时间截
     * @return 当前时间戳
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 返回以毫秒为单位的当前时间
     * @return 当前时间(毫秒)
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//==============================Test=============================================</span>
    <span class="token comment">/** 测试 */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SnowflakeIdWorker</span> idWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> id <span class="token operator">=</span> idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>snowflake</tag>
      </tags>
  </entry>
  <entry>
    <title>解决JDBC连接MySQL 8异常</title>
    <url>/post/bfc2af04.html</url>
    <content><![CDATA[<p>  安装MySQL 8，同时驱动也改为了8.0.16</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>  使用原来基于MySQL 5.1的JDBC代码运行时，报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java.sql.SQLException: The server <span class="token function">time</span> zone value <span class="token string">'�й���׼ʱ��'</span> is unrecognized or represents <span class="token function">more</span> than one <span class="token function">time</span> zone. You must configure either the server or JDBC driver <span class="token punctuation">(</span>via the serverTimezone configuration property<span class="token punctuation">)</span> to use a <span class="token function">more</span> specifc <span class="token function">time</span> zone value <span class="token keyword">if</span> you want to utilize <span class="token function">time</span> zone support.
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException<span class="token punctuation">(</span>SQLError.java:129<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException<span class="token punctuation">(</span>SQLError.java:97<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException<span class="token punctuation">(</span>SQLError.java:89<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException<span class="token punctuation">(</span>SQLError.java:63<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException<span class="token punctuation">(</span>SQLError.java:73<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException<span class="token punctuation">(</span>SQLExceptionsMapping.java:76<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.ConnectionImpl.createNewIO<span class="token punctuation">(</span>ConnectionImpl.java:835<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.ConnectionImpl.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>ConnectionImpl.java:455<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.ConnectionImpl.getInstance<span class="token punctuation">(</span>ConnectionImpl.java:240<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.mysql.cj.jdbc.NonRegisteringDriver.connect<span class="token punctuation">(</span>NonRegisteringDriver.java:199<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>mysql-connector-java-8.0.16.jar:8.0.16<span class="token punctuation">]</span>
at com.alibaba.druid.filter.FilterChainImpl.connection_connect<span class="token punctuation">(</span>FilterChainImpl.java:148<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>druid-1.0.31.jar:1.0.31<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这是由于数据库和JDBC所在的系统时差引起，在jdbc连接的url后面加上参数serverTimezone=GMT可解决问题，如果使用gmt+8时区，需要对gmt+8转码，写成GMT%2B8。</p>
<p>  最后URL类似于：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2B8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 8.5新安装环境初步配置优化</title>
    <url>/post/686151b0.html</url>
    <content><![CDATA[<h3 id="下载安装Tomcat"><a href="#下载安装Tomcat" class="headerlink" title="下载安装Tomcat"></a>下载安装Tomcat</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz
<span class="token function">tar</span> zxf apache-tomcat-8.5.37.tar.gz <span class="token parameter variable">-C</span> /usr/local
<span class="token function">mv</span> /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  tomcat是一个压缩包，下载完成后，只需要解压到安装目录即可。</p>
<span id="more"></span>
<h3 id="环境配置优化"><a href="#环境配置优化" class="headerlink" title="环境配置优化"></a>环境配置优化</h3><p>  安装tomcat后，我们需要对tomcat做初始配置及优化。主要考虑以下几点：</p>
<ul>
<li>安全<ul>
<li>把webapps下除ROOT外的目录全部删除，Tomcat有一个用户管理页面就存在这个目录下面基本用不上放着并不安全。</li>
</ul>
</li>
<li>模式<ul>
<li>tomcat有三种运行模式nio bio apr，默认为bio 我们来调整为apr模式。</li>
</ul>
</li>
<li>调整熵池<ul>
<li>提高熵池可以加快启动速度，有时你会发现启动时好久卡在session这块就是熵池太小的原因。</li>
</ul>
</li>
<li>Jvm<ul>
<li>分配tomcat运行占用内存。</li>
</ul>
</li>
<li>server.xml<ul>
<li>这部分将调整tomcat的配置文件中的线程以及线程池和压缩等参数。       </li>
</ul>
</li>
</ul>
<h3 id="开启apr模式"><a href="#开启apr模式" class="headerlink" title="开启apr模式"></a>开启apr模式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> apr-devel openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  进入你tomcat安装目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/tomcat/bin
<span class="token function">tar</span> zxf tomcat-native-1.2.16.tar.gz
<span class="token builtin class-name">cd</span> tomcat-native-1.2.16-src/native
./configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="修改server-xml配置"><a href="#修改server-xml配置" class="headerlink" title="修改server.xml配置"></a>修改server.xml配置</h3><p>  定义端口这里HTTP1.1修改成org.apache.coyote.http11.Http11AprProtocol<br>  catalina.sh脚本中<br>  CLASSPATH=下加入</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">JAVA_OPTS</span><span class="token punctuation">=</span><span class="token value attr-value">"$JAVA_OPTS -Djava.library.path=/usr/local/apr/lib"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  重启tomcat可看到http-apr-8080</p>
<h3 id="加大熵池"><a href="#加大熵池" class="headerlink" title="加大熵池"></a>加大熵池</h3><p>  可以查看我们系统默认的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /proc/sys/kernel/random/entropy_avail<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装熵服务并启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> rng-tools
systemctl start rngd
<span class="token function">cp</span> /usr/lib//system/rngd.service /etc//system
<span class="token function">vim</span> /etc/systemd/system/rngd.service    编辑熵服务
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/sbin/rngd <span class="token parameter variable">-f</span> <span class="token parameter variable">-r</span> /dev/urandom     对照更改
systemctl daemon-reload
systemctl restart rngd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这样你在查看熵大小会很惊讶的</p>
<h3 id="JVM调整"><a href="#JVM调整" class="headerlink" title="JVM调整"></a>JVM调整</h3><p>  修改<code>catalina.sh</code>，在<code>CLASSPATH=</code>下加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms5000m -Xmx5000m -Xmn512m -XX:+UseG1GC -XX:+PrintGCDetails  -XX:+PrintGCTimeStamps -Xloggc:../logs/gc.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Xms 初始化最小内存</li>
<li>Xmx 可使用最大内存</li>
<li>Xms和Xmx调整为相同减少内存频繁上下切换稳定些</li>
<li>Xmn 年轻代内存</li>
<li>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:../logs/gc.log 输出gc日志方便查找问题</li>
<li>-XX:+UseG1GC 开启G1垃圾回收</li>
</ul>
<h3 id="server-xml调整"><a href="#server-xml调整" class="headerlink" title="server.xml调整"></a>server.xml调整</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Executor</span> 
<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span> 
<span class="token attr-name">namePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>catalina-exec-<span class="token punctuation">"</span></span>
<span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span>
<span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span>
<span class="token attr-name">prestartminSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
<span class="token attr-name">maxIdleTime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> 
<span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11AprProtocol<span class="token punctuation">"</span></span>
<span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span>
<span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
<span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span>
<span class="token attr-name">compression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span>
<span class="token attr-name">compressionMinSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2048<span class="token punctuation">"</span></span>
<span class="token attr-name">noCompressionUserAgents</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gozilla,traviata<span class="token punctuation">"</span></span>
<span class="token attr-name">compressableMimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html,text/xml,text/javascript,text/css,text/plain<span class="token punctuation">"</span></span>
      <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>
<span class="token attr-name">maxPostSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>
<span class="token attr-name">maxHttpHeaderSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8192<span class="token punctuation">"</span></span> 
<span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span>
<span class="token attr-name">tcpNoDelay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  
<span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
      <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  以上配置对应服务为 Centos7.2/4核16G，生产环境稳定运行<br>  另一个还可以调整log日志的存储位置，防止日志过大妨碍服务运行<br>  系统的Tcp连接数也应去修改，阿里云默认为2000，根据服务情况去调整，增加并发。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS查看软件安装路径及环境变量</title>
    <url>/post/3d2df54e.html</url>
    <content><![CDATA[<p>  在Linux下，我们经常要查看软件的安装路径以及查看设置环境变量。</p>
<span id="more"></span>

<h3 id="CentOS查看软件安装路径"><a href="#CentOS查看软件安装路径" class="headerlink" title="CentOS查看软件安装路径"></a>CentOS查看软件安装路径</h3><ol>
<li>通过rpm查看<br>  查看软件是否安装。首先我们需要查看软件是否已经安装，或者说查看安装的软件包名称。如查找是否安装mysql<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>接着根据 rpm -ql 列出软件包安装的文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ql</span> mysql-libs-5.1.71-1.e16.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>综合上述以上的问题，可以直接使用 rpm -qal |grep mysql 查看mysql所有安装包的文件存储位置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qal</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>yum查找<br>  除了rpm 查询还可以通过yum search 查找对应可以安装的软件包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>其他查找方法<br>  除了根据软件包来找文件位置之外，最常用的就是通过find查找某个关键字比如mysql所有包含mysql服务的文件路径<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>Which查找命令<br>  Which命令是通过 PATH环境变量查找可执行文件路径，用于查找指向这个命令所在的文件夹;<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  查找软件安装的目录</li>
<li>Whereis命令和find类似，不过不同的是whereis是通过本地架构好的数据库索引查找会比较快。<br>  如果没有更新到数据库里面的文件或命令则无法查找到信息<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>软件是否安装；例如：jenkins是否安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-q</span> <span class="token operator">|</span> <span class="token function">grep</span> jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>可以直接使用 rpm -qal |grep mysql 查看mysql所有安装包的文件存储位置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qal</span> <span class="token operator">|</span><span class="token function">grep</span> jenkins <span class="token comment">#查看jenkins所有安装包的文件存储位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <code>注意：源码安装的方式通过rpm命令是无法找出来的</code></li>
<li>确定这个软件已经开启，则可以通过ps -aux |grep mysql,找出对一个的可执行文件所在的目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost yum.repos.d<span class="token punctuation">]</span><span class="token comment"># ps -aux |grep mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  确定Nginx是以那个config文件启动的？<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span>  <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h3 id="CentOS-7设置、查看、删除环境变量的方法"><a href="#CentOS-7设置、查看、删除环境变量的方法" class="headerlink" title="CentOS 7设置、查看、删除环境变量的方法"></a>CentOS 7设置、查看、删除环境变量的方法</h3><p>  centos查看环境变量与设置环境变量在使用过程中很常见，本文整理了一些常用的与环境变量相关的命令，感兴趣的朋友可以参考下希望对你有所帮助</p>
<ol>
<li>显示环境变量HOME(红色部分代表要输入的命令，#代表用户名) <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token comment">#HOME </span>
/home/redbooks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>设置一个新的环境变量hello<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HELLO</span><span class="token operator">=</span><span class="token string">"Hello!"</span> 
<span class="token builtin class-name">echo</span> <span class="token comment">#HELLO </span>
Hello<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>使用env命令显示所有的环境变量 <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$env</span> 
<span class="token key attr-name">HOSTNAME</span><span class="token punctuation">=</span><span class="token value attr-value">redbooks.safe.org </span>
<span class="token key attr-name">PVM_RSH</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/bin/rsh </span>
<span class="token key attr-name">Shell</span><span class="token punctuation">=</span><span class="token value attr-value">/bin/bash </span>
<span class="token key attr-name">TERM</span><span class="token punctuation">=</span><span class="token value attr-value">xterm </span>
<span class="token key attr-name">HISTSIZE</span><span class="token punctuation">=</span><span class="token value attr-value">1000 </span>
<span class="token key attr-name">...</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用set命令显示所有本地定义的Shell变量 <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$set</span> 
<span class="token key attr-name">BASH</span><span class="token punctuation">=</span><span class="token value attr-value">/bin/bash </span>
<span class="token key attr-name">BASH_VERSINFO</span><span class="token punctuation">=</span><span class="token value attr-value">([0]="2"[1]="05b"[2]="0"[3]="1"[4]="release"[5]="i386-redhat-linux-gnu") </span>
<span class="token key attr-name">BASH_VERSION</span><span class="token punctuation">=</span><span class="token value attr-value">'2.05b.0(1)-release' </span>
<span class="token key attr-name">COLORS</span><span class="token punctuation">=</span><span class="token value attr-value">/etc/DIR_COLORS.xterm </span>
<span class="token key attr-name">COLUMNS</span><span class="token punctuation">=</span><span class="token value attr-value">80 </span>
<span class="token key attr-name">DIRSTACK</span><span class="token punctuation">=</span><span class="token value attr-value">() </span>
<span class="token key attr-name">DISPLAY</span><span class="token punctuation">=</span><span class="token value attr-value">:0.0 </span>
<span class="token key attr-name">...</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用unset命令来清除环境变量<br>  set可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下： <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$export</span> <span class="token value attr-value">TEST="Test..." #增加一个环境变量TEST </span>
<span class="token key attr-name">$env|grep</span> <span class="token value attr-value">TEST #此命令有输入，证明环境变量TEST已经存在了 </span>
<span class="token key attr-name">TEST</span><span class="token punctuation">=</span><span class="token value attr-value">Test... </span>
<span class="token key attr-name">$unset</span> <span class="token value attr-value">#TEST #删除环境变量TEST </span>
<span class="token key attr-name">$env|grep</span> <span class="token value attr-value">TEST #此命令没有输出，证明环境变量TEST已经存在了 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用readonly命令设置只读变量<br>  如果使用了readonly命令的话，变量就不可以被修改或清除了。示例如下：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$export</span> <span class="token value attr-value">TEST="Test..." #增加一个环境变量TEST </span>
<span class="token key attr-name">$readonly</span> <span class="token value attr-value">TEST #将环境变量TEST设为只读 </span>
<span class="token key attr-name">$unset</span> <span class="token value attr-value">TEST #会发现此变量不能被删除 </span>
<span class="token key attr-name">-bash</span><span class="token punctuation">:</span> <span class="token value attr-value">unset: TEST: cannot unset: readonly variable </span>
<span class="token key attr-name">$TEST</span><span class="token punctuation">=</span><span class="token value attr-value">"New" #会发现此也变量不能被修改 </span>
<span class="token key attr-name">-bash</span><span class="token punctuation">:</span> <span class="token value attr-value">TEST: readonly variable </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  环境变量的设置位于/etc/profile文件<br>  如果需要增加新的环境变量可以添加下属行 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable">$path</span>:/path1:/path2:/pahtN <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL备份数据库shell脚本</title>
    <url>/post/6c06d7af.html</url>
    <content><![CDATA[<p>  以下为MySQL备份数据库的sh脚本：</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># Shell script to backup MySQL database</span>
<span class="token comment"># 设置数据库连接变量</span>
<span class="token assign-left variable">MyUSER</span><span class="token operator">=</span><span class="token string">""</span>	<span class="token comment"># DB_USERNAME</span>
<span class="token assign-left variable">MyPASS</span><span class="token operator">=</span><span class="token string">""</span>	<span class="token comment"># DB_PASSWORD</span>
<span class="token assign-left variable">MyHOST</span><span class="token operator">=</span><span class="token string">""</span>	<span class="token comment"># DB_HOSTNAME</span>
<span class="token comment"># 备份数据的目标目录</span>
<span class="token assign-left variable">DEST</span><span class="token operator">=</span><span class="token string">""</span> <span class="token comment"># /home/username/backups/DB</span>
<span class="token comment"># 邮件通知</span>
<span class="token assign-left variable">EMAIL</span><span class="token operator">=</span><span class="token string">""</span>
<span class="token comment"># 设置多少天之后的旧文件会被删除</span>
<span class="token assign-left variable">DAYS</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token comment"># Linux bin执行文件路径</span>
<span class="token assign-left variable">MYSQL</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> mysql<span class="token variable">)</span></span>"</span>
<span class="token assign-left variable">MYSQLDUMP</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> mysqldump<span class="token variable">)</span></span>"</span>
<span class="token assign-left variable">GZIP</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">gzip</span><span class="token variable">)</span></span>"</span>
<span class="token comment"># 获取当前日期dd-mm-yyyy format</span>
<span class="token assign-left variable">NOW</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%d-%m-%Y_%s"</span><span class="token variable">)</span></span>"</span>
<span class="token comment"># 新建备份子目录</span>
<span class="token assign-left variable">MBD</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$DEST</span>/<span class="token variable">$NOW</span>/mysql"</span>
<span class="token function">install</span> <span class="token parameter variable">-d</span> <span class="token variable">$MBD</span>
<span class="token comment"># 忽略备份的数据库列表</span>
<span class="token assign-left variable">SKIP</span><span class="token operator">=</span><span class="token string">"information_schema
another_one_db"</span>
<span class="token comment"># 获取所有数据库列表</span>
<span class="token assign-left variable">DBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>$MYSQL <span class="token parameter variable">-h</span> $MyHOST <span class="token parameter variable">-u</span> $MyUSER -p$MyPASS <span class="token parameter variable">-Bse</span> <span class="token string">'show databases'</span><span class="token variable">)</span></span>"</span>
<span class="token comment"># 归档数据库dump</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">db</span> <span class="token keyword">in</span> <span class="token variable">$DBS</span>
<span class="token keyword">do</span>
    <span class="token assign-left variable">skipdb</span><span class="token operator">=</span>-1
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$SKIP</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">then</span>
		<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$SKIP</span>
		<span class="token keyword">do</span>
			<span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$db</span>"</span> <span class="token operator">==</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">skipdb</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token builtin class-name">:</span>
		<span class="token keyword">done</span>
    <span class="token keyword">fi</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$skipdb</span>"</span> <span class="token operator">==</span> <span class="token string">"-1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
    	<span class="token assign-left variable">FILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$MBD</span>/<span class="token variable">$db</span>.sql"</span>
	<span class="token variable">$MYSQLDUMP</span> <span class="token parameter variable">-h</span> <span class="token variable">$MyHOST</span> <span class="token parameter variable">-u</span> <span class="token variable">$MyUSER</span> -p<span class="token variable">$MyPASS</span> <span class="token variable">$db</span> <span class="token operator">&gt;</span> <span class="token variable">$FILE</span>
    <span class="token keyword">fi</span>
<span class="token keyword">done</span>
<span class="token comment"># 归档目录，发送邮件通知，清除</span>
<span class="token builtin class-name">cd</span> <span class="token variable">$DEST</span>
<span class="token function">tar</span> <span class="token parameter variable">-cf</span> <span class="token variable">$NOW</span>.tar <span class="token variable">$NOW</span>
<span class="token variable">$GZIP</span> <span class="token parameter variable">-9</span> <span class="token variable">$NOW</span>.tar
<span class="token builtin class-name">echo</span> <span class="token string">"MySQL backup is completed! Backup name is <span class="token variable">$NOW</span>.tar.gz"</span> <span class="token operator">|</span> mail <span class="token parameter variable">-s</span> <span class="token string">"MySQL backup"</span> <span class="token variable">$EMAIL</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$NOW</span>
<span class="token comment"># 删除旧文件</span>
<span class="token function">find</span> <span class="token variable">$DEST</span> <span class="token parameter variable">-mtime</span> +<span class="token variable">$DAYS</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用ls-files统计代码行数的命令</title>
    <url>/post/d7d45238.html</url>
    <content><![CDATA[<p>  需要注意，这里统计的是git仓库中所有被跟踪文件的代码行数。</p>
<span id="more"></span>

<ol>
<li>简单命令如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>统计指定目录：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files src <span class="token builtin class-name">test</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>排除某些文件或文件夹: <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-Ev</span> <span class="token string">'assets|.jpg|.png'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java定位代码导致的CPU过高问题</title>
    <url>/post/c006a425.html</url>
    <content><![CDATA[<p>  相信大家肯定遇到过java程序cpu一直居高不下的情况，那么我来简单介绍在linux系统下如何定位java进程cpu过高的代码位置。</p>
<span id="more"></span>
<div class="note info no-icon"><ol>
<li>首先，使用命令<code>top</code>,找到cpu过高的<code>pid</code>；</li>
<li>接着，使用<code>top -Hp pid</code> 找到对应的<code>线程 tid</code>；</li>
<li>我们知道jstack可以查看当前java进程的堆栈状态；由于线程在堆栈信息的使用16进制的。那么，<code>printf "%x" tid</code> 可以获取16进制的 tid16。</li>
<li>最后使用 <code>jstack pid |grep -A 10 tid16 </code>，根据情况调整行数后，就可以看到该线程是执行的代码。</li>
</ol>
</div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射获取方法的参数名</title>
    <url>/post/f34deb23.html</url>
    <content><![CDATA[<h3 id="Parameter类"><a href="#Parameter类" class="headerlink" title="Parameter类"></a>Parameter类</h3><p>  从JDK8开始，反射类添加了Parameter，通过Parameter类，我们可以从.class编译后的文件中获取方法上参数名。<br>  获取参数名的方法：Parameter.getName()</p>
<span id="more"></span>
<p>  示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getParameterNameJava8</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//直接通过method就能拿到所有的参数</span>
			<span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Parameter</span> parameter <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				paramterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> paramterList<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="开启javac编译-class文件保留参数名"><a href="#开启javac编译-class文件保留参数名" class="headerlink" title="开启javac编译.class文件保留参数名"></a>开启javac编译.class文件保留参数名</h3><p>  默认情况下，JDK8的javac编译后的.class文件是不保留方法的参数名，参数名是以arg0，arg1，arg3…表示。<br>  如果要保留参数名，需要给javac添加参数-parameters开启。</p>
<h5 id="Maven配置开启parameters"><a href="#Maven配置开启parameters" class="headerlink" title="Maven配置开启parameters"></a>Maven配置开启parameters</h5><p>  在pom.xml的编译插件中增加参数配置<arg>-parameters</arg>。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>-parameters<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="Idea配置开启parameters"><a href="#Idea配置开启parameters" class="headerlink" title="Idea配置开启parameters"></a>Idea配置开启parameters</h5><ol>
<li>File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler</li>
<li>在 Additional command line parameters: 后面填上 -parameters</li>
<li>填好后，再将项目重新build一下，Build-&gt;Rebuild Project。<img data-src="/post/f34deb23/java-001.png" class="" title="配置图"></li>
</ol>
<h5 id="Eclipse配置开启parameters"><a href="#Eclipse配置开启parameters" class="headerlink" title="Eclipse配置开启parameters"></a>Eclipse配置开启parameters</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Preferences-<span class="token operator">&gt;</span>java-<span class="token operator">&gt;</span>Compiler下勾选Store information about method parameters选项。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  这样在使用eclipse编译java文件的时候就会将参数名称编译到class文件中。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn安装与镜像设置</title>
    <url>/post/2dcb4b.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  <a href="https://yarn.bootcss.com/">Yarn</a> 就是一个类似于 npm 的包管理工具，它是由 facebook 推出并开源。<br>  与 npm 相比，yarn 有着众多的优势，主要的优势在于：速度快、离线模式、版本控制。</p>
<span id="more"></span>

<p><img data-src="/post/2dcb4b/yarn.png" title="" style="width: 90%; height: 200;" class="zoom-in-cursor" width="400" vspace="0" hspace="0" height="179" border="0"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  macOS有几种安装yarn的方式，如下：</p>
<ol>
<li><p>使用homebrew安装yarn<br>  使用homebrew安装，如果node.js没有安装，那么它会自动安装node.js</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果你用的是 <code>nvm</code> 或类似工具，你需要确保 <code>PATH</code> 变量中列出的 nvm 版本的路径在 Homebrew 安装的 Node.js 路径之前。</p>
</li>
<li><p>使用MacPorts安装yarn<br>  你可以通过 <a href="https://www.macports.org/">MacPorts</a> 安装 Yarn 。 如果你还未安装 Node.MacPorts 会自动为你安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> port <span class="token function">install</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>使用脚本安装yarn<br>  macOS属于Unix系统的分支，在Unix环境下，使用脚本安装是很方便。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- <span class="token parameter variable">-L</span> https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装指定版本的yarn</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- <span class="token parameter variable">-L</span> https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--version</span> <span class="token number">1.19</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>通过tarball手动安装<br>  你可以通过<a href="https://yarn.bootcss.com/latest.tar.gz">下载tarball</a>并在任何地方提取它来安装yarn。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt
<span class="token function">wget</span> https://yarnpkg.com/latest.tar.gz
<span class="token function">tar</span> zvxf latest.tar.gz
<span class="token comment"># Yarn is now in /opt/yarn-[version]/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在提取yarn之前，建议您使用GPG验证tarball：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://dl.yarnpkg.com/debian/pubkey.gpg <span class="token operator">|</span> gpg <span class="token parameter variable">--import</span>
<span class="token function">wget</span> https://yarnpkg.com/latest.tar.gz.asc
gpg <span class="token parameter variable">--verify</span> latest.tar.gz.asc
<span class="token comment"># Look for "Good signature from 'Yarn Packaging'" in the output</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>npm来安装(<code>推荐</code>)<br>  虽然安装 <code>yarn</code> 可以不依赖 <code>npm</code>，但这里还是建议你使用 <code>npm</code> 来安装吧，快速而简洁：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token function">yarn</span> <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="Yarn-换源"><a href="#Yarn-换源" class="headerlink" title="Yarn 换源"></a>Yarn 换源</h3><p>  Yarn 源仓库包下载不稳定</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 yarn 配置</span>
<span class="token function">yarn</span> config get registry
或者
<span class="token function">yarn</span> config list

<span class="token operator">&gt;</span> registry: <span class="token string">'https://registry.yarnpkg.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置为淘宝镜像</span>
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token comment"># 设置为官方镜像</span>
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span class="token parameter variable">--global</span>
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist <span class="token parameter variable">--global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<p>  我们使用<code>yrm</code>来做<code>yarn</code>的镜像管理器；首先需要下载，使用如下命令下载安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i yrm <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  之后可以通过以下命令来查看所提供的镜像地址</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yrm <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  可以看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*  <span class="token function">npm</span> ---- https://registry.npmjs.org/
  cnpm --- http://r.cnpmjs.org/
  taobao - https://registry.npm.taobao.org/
  nj ----- https://registry.nodejitsu.com/
  rednpm - http://registry.mirror.cqupt.edu.cn/
  npmMirror  https://skimdb.npmjs.com/registry/
  edunpm - http://registry.enpmjs.org/
  <span class="token function">yarn</span> --- https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  所示的是我们现在的源地址是<code>npm</code>，让我们来切换镜像源吧，使用<code>yrm use 镜像名</code>，如我们切换成淘宝镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  可以看到</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YARN Registry has been <span class="token builtin class-name">set</span> to: https://registry.npm.taobao.org/

NPM Registry has been <span class="token builtin class-name">set</span> to: https://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>  有新版时，Yarn 会给你提示。 如需升级 Yarn ，仍然可以通过 Homebrew 来升级。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew upgrade <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  通过如下命令测试 Yarn 是否安装成功： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>  我们选择 yarn 的主要原因是依赖安装速度快，默认生成的 yarn.lock 会保证所有成员的模块依赖目录能够很好的保持一致。<br>  yarn install 和 yarn upgrade 的执行逻辑，可以让你可以很清晰的管理本地依赖的版本更新时机，又能很好的让所有开发人员的本地依赖保持一致性。<br>  使用 npm install 则有些乱，当你不想写死版本号依赖时，它总会安装依赖包最新可用的版本，但这在有时候并不是你想要的。<br>  在 yarn 之前，我们使用的是 npm+淘宝仓库方案，也会使用 cnpm。在国内，cnpm 的依赖安装速度比 yarn 还要快，但 cnpm 在 windows 下通过创建链接引用的方式管理包依赖，可能会带来一些问题。<br>  现在我们会默认使用淘宝仓库，使用 npm 管理全局依赖，使用 yarn 管理具体项目内的依赖。<br>  在一个新的项目中使用 yarn，我们会这么来做：<br>  1.  写好 package.json，写入初始的第三方依赖<br>  2.  执行 yarn 命令，初始化安装项目依赖，生成 yarn.lock 文件<br>  3.  后续通过执行 yarn add xxx 添加更多需要的依赖（也可直接在 package.json 文件中写入）<br>  4.  当确定需要更新依赖模块到其最新版本时，执行 yarn upgrade 命令<br>  5.  配置项目启动命令执行前，先执行 yarn 命令，以保证当 yarn.lock 被更新时，本地依赖也及时得到更新。例如，在 package.json 的 script 部分中配置 start 命令： “start”: “yarn &amp;&amp; yarn run build:dev”</p>
<br>

<blockquote>
<blockquote>
</blockquote>
<p><a href="https://neveryu.github.io/2018/07/20/yarn/">yarn安装</a><br><a href="https://docs.npmjs.com/">npm</a><br><a href="https://yarnpkg.com/">yarn</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos系统下查找命令</title>
    <url>/post/3553be4f.html</url>
    <content><![CDATA[<h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>  which命令查找出相关命令是否已经在搜索路径中，例子如下：<br>  //显示出ping安装在哪个目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xamppr10 bin<span class="token punctuation">]</span><span class="token comment"># which ping</span>
返回结果为：
/usr/bin/ping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>  locate命令用于查找文件，它比find命令的搜索速度快，它需要一个数据库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># updatedb</span>
<span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># locate php.ini</span>
/opt/zbox/etc/php/php.ini
/opt/zbox_old/etc/php/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="rpm（centos）"><a href="#rpm（centos）" class="headerlink" title="rpm（centos）"></a>rpm（centos）</h3><p>  如果用户知道自己要查找到软件包的名字，可以直接使用下面的命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查找检查系统是否安装了
<span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># rpm -q python</span>
python-2.7.5-90.el7.x86_64
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  或者：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$rpm</span> -qa<span class="token operator">|</span> <span class="token function">grep</span> python //这是两个命令的结合
<span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># rpm -qa| grep python</span>
langtable-python-0.0.31-4.el7.noarch
python-IPy-0.75-6.el7.noarch
python2-futures-3.1.1-5.el7.noarch
python-jwcrypto-0.4.2-1.el7.noarch
python-iniparse-0.4-9.el7.noarch
python-backports-1.0-8.el7.x86_64
libstoragemgmt-python-clibs-1.8.1-2.el7_9.x86_64
python-firewall-0.6.3-13.el7_9.noarch
python-kitchen-1.1.1-5.el7.noarch
python-2.7.5-90.el7.x86_64
abrt-python-2.1.11-60.el7.centos.x86_64
python-ipaddress-1.0.16-2.el7.noarch
python-gobject-3.22.0-1.el7_4.1.x86_64
python-enum34-1.0.4-1.el7.noarch
python-urwid-1.1.1-3.el7.x86_64
python-netaddr-0.7.5-9.el7.noarch
python-requests-2.6.0-10.el7.noarch
python-javapackages-3.4.1-11.el7.noarch
python2-ipaclient-4.6.8-5.el7.centos.6.noarch
python-deltarpm-3.6-3.el7.x86_64
dbus-python-1.1.1-9.el7.x86_64
libselinux-python-2.5-15.el7.x86_64
python-augeas-0.5.0-2.el7.noarch
python-pwquality-1.2.3-5.el7.x86_64
python-netifaces-0.10.4-3.el7.x86_64
python-dateutil-1.5-7.el7.noarch
libuser-python-0.60-9.el7.x86_64
python-urllib3-1.10.2-7.el7.noarch
python-schedutils-0.4-6.el7.x86_64
python2-ipalib-4.6.8-5.el7.centos.6.noarch
python-pyblock-0.53-6.el7.x86_64
python-ethtool-0.8-8.el7.x86_64
python-setuptools-0.9.8-7.el7.noarch
python-pyudev-0.15-9.el7.noarch
python-sssdconfig-1.16.5-10.el7_9.8.noarch
python-yubico-1.2.3-1.el7.noarch
python-ntplib-0.3.2-1.el7.noarch
python-ply-3.4-11.el7.noarch
python-rtslib-2.1.74-1.el7_9.noarch
python2-subprocess32-3.2.6-14.el7.x86_64
python-slip-0.4.0-4.el7.noarch
libreport-python-2.1.11-53.el7.centos.x86_64
python-configobj-4.7.2-7.el7.noarch
python-gobject-base-3.22.0-1.el7_4.1.x86_64
policycoreutils-python-2.5-34.el7.x86_64
python-perf-3.10.0-1160.31.1.el7.x86_64
python-gssapi-1.2.0-3.el7.x86_64
liblouis-python-2.5.2-12.el7_4.noarch
python-libipa_hbac-1.16.5-10.el7_9.8.x86_64
python-configshell-1.1.26-1.el7.noarch
python-inotify-0.9.4-4.el7.noarch
python-kmod-0.9-4.el7.x86_64
python-lxml-3.2.1-4.el7.x86_64
python2-blockdev-2.18-5.el7.x86_64
python-linux-procfs-0.4.11-4.el7.noarch
cryptsetup-python-2.0.3-6.el7.x86_64
python-slip-dbus-0.4.0-4.el7.noarch
python-smbc-1.0.13-8.el7.x86_64
python-dns-1.12.0-4.20150617git465785f.el7.noarch
audit-libs-python-2.8.5-4.el7.x86_64
python-cffi-1.6.0-5.el7.x86_64
python2-cryptography-1.7.2-2.el7.x86_64
python-blivet-0.61.15.76-1.el7_9.noarch
python-chardet-2.2.1-3.el7.noarch
python-pycurl-7.19.0-19.el7.x86_64
rpm-python-4.11.3-45.el7.x86_64
python-backports-ssl_match_hostname-3.5.0.1-1.el7.noarch
python-brlapi-0.6.0-16.el7.x86_64
libsemanage-python-2.5-14.el7.x86_64
systemd-python-219-78.el7_9.3.x86_64
python-meh-gui-0.25.3-1.el7.noarch
python2-pyasn1-modules-0.1.9-7.el7.noarch
speech-dispatcher-python-0.7.1-15.el7.x86_64
python-pycparser-2.14-1.el7.noarch
python-idna-2.4-1.el7.noarch
libstoragemgmt-python-1.8.1-2.el7_9.noarch
python-urlgrabber-3.10-10.el7.noarch
abrt-addon-python-2.1.11-60.el7.centos.x86_64
python2-pyasn1-0.1.9-7.el7.noarch
python-ldap-2.4.15-2.el7.x86_64
python-qrcode-core-5.0.1-1.el7.noarch
python-decorator-3.4.0-3.el7.noarch
python-cups-1.9.63-6.el7.x86_64
newt-python-0.52.15-4.el7.x86_64
python-meh-0.25.3-1.el7.noarch
python-sss-murmur-1.16.5-10.el7_9.8.x86_64
python-nss-0.16.0-3.el7.x86_64
python-di-0.3-2.el7.noarch
python-libs-2.7.5-90.el7.x86_64
python2-pyatspi-2.26.0-3.el7.noarch
libpeas-loader-python-1.22.0-1.el7.x86_64
libxml2-python-2.9.1-6.el7.5.x86_64
python-coverage-3.6-0.5.b3.el7.x86_64
python-six-1.9.0-2.el7.noarch
rpm的其他用法：
<span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token punctuation">(</span>列出所有安装了的包<span class="token punctuation">)</span>
<span class="token function">rpm</span> <span class="token parameter variable">-e</span> package <span class="token punctuation">(</span>删除某个包<span class="token punctuation">)</span>
<span class="token function">rpm</span> <span class="token parameter variable">-qi</span> package <span class="token punctuation">(</span>查询某个包<span class="token punctuation">)</span>
<span class="token function">rpm</span> <span class="token parameter variable">-qf</span> <span class="token builtin class-name">command</span> <span class="token punctuation">(</span>根据程序查询包的名字<span class="token punctuation">)</span>
<span class="token function">rpm</span> <span class="token parameter variable">-ql</span> package <span class="token punctuation">(</span>查询某个包所有的安装文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="yum（centos）"><a href="#yum（centos）" class="headerlink" title="yum（centos）"></a>yum（centos）</h3><div class="note info no-icon"><p>yum的参数很多，以下是用于查找软件包的命令。<br>$yum list //列出所指定的软件包,后可以加上你想查找的软件包的名字<br>$yum list installed //列出所有已安装的软件包<br>$yum info installed //列出所有已安裝的软件包信息</p>
</div>

<h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>  whereis是查找文件或者命令的所在目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查找pwd命令所在的目录
<span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># whereis pwd </span>
pwd: /usr/bin/pwd /usr/share/man/man1/pwd.1.gz /usr/share/man/man1p/pwd.1p.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>  这个命令可用来查找系统是否安装了指定的软件包，更重要的是也可以查找自己对软件包名称记忆不是很清晰的软件包。find的查找范围很广，功能强大，再搭配用正则表达，效果很好，不过建议尽量缩小搜索范围，减少系统压力，毕竟，当系统文件多了，搜索耗费时间和资源的。<br>  //从根目录开始查找包含”python“这个字符的文件和文件夹<br>  <code>find / -name "python"</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xamppr10 ~<span class="token punctuation">]</span><span class="token comment"># find / -name "python"</span>
/etc/python
/usr/bin/python
/usr/lib64/libreoffice/share/Scripts/python
/usr/share/gcc-4.8.2/python
/usr/share/gdb/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  find的详细使用有如下例子：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//在当前目录下查找，查找深度为一，查找以.jpg结尾文件，并将其转化
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-name</span> *.jpg <span class="token parameter variable">-print</span> <span class="token parameter variable">-exec</span> convert
//搜索以 <span class="token string">'.rpm'</span> 结尾的文件并定义其权限
<span class="token function">find</span> / <span class="token parameter variable">-name</span> *.rpm <span class="token parameter variable">-exec</span> <span class="token function">chmod</span> <span class="token number">755</span> <span class="token string">'{}'</span> <span class="token punctuation">\</span>
//从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录
<span class="token function">find</span> / <span class="token parameter variable">-name</span> file1
//罗列一个系统中所有使用了SUID控制的文件
<span class="token function">find</span> / <span class="token parameter variable">-perm</span> -u+s
//搜索属于用户 <span class="token string">'user1'</span> 的文件和目录
<span class="token function">find</span> / <span class="token parameter variable">-user</span> user1
//搜索以 <span class="token string">'.rpm'</span> 结尾的文件，忽略光驱、捷盘等可移动设备
<span class="token function">find</span> / <span class="token parameter variable">-xdev</span> <span class="token parameter variable">-name</span> <span class="token punctuation">\</span>*.rpm
//从一个目录查找并复制所有以 <span class="token string">'.txt'</span> 结尾的文件到另一个目录
<span class="token function">find</span> /home/user1 <span class="token parameter variable">-name</span> <span class="token string">'*.txt'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cp</span> <span class="token parameter variable">-av</span> --target-directory<span class="token operator">=</span>/home/backup/ <span class="token parameter variable">--parents</span>
//在目录 <span class="token string">'/ home/user1'</span> 中搜索带有<span class="token string">'.bin'</span> 结尾的文件
<span class="token function">find</span> /home/user1 <span class="token parameter variable">-name</span> <span class="token punctuation">\</span>*.bin
//搜索在过去100天内未被使用过的执行文件
<span class="token function">find</span> /usr/bin <span class="token parameter variable">-type</span> f <span class="token parameter variable">-atime</span> +100
//搜索在10天内被创建或者修改过的文件
<span class="token function">find</span> /usr/bin <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-10</span>
//查找所有以 <span class="token string">'.log'</span> 结尾的文件并做成一个bzip包
<span class="token function">find</span> /var/log <span class="token parameter variable">-name</span> <span class="token string">'*.log'</span> <span class="token operator">|</span> <span class="token function">tar</span> cv --files-from<span class="token operator">=</span>- <span class="token operator">|</span> <span class="token function">bzip2</span> <span class="token operator">&gt;</span> log.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx负载均衡的几种常见策略</title>
    <url>/post/e3076ab.html</url>
    <content><![CDATA[<p>  负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。<br>  简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</p>
<span id="more"></span>

<h3 id="RR-默认"><a href="#RR-默认" class="headerlink" title="RR(默认)"></a>RR(默认)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</span>

<span class="token directive"><span class="token keyword">upstream</span> test</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
　　<span class="token directive"><span class="token keyword">listen</span>       <span class="token number">81</span></span><span class="token punctuation">;</span>                                                         
　　<span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>                                               
　　<span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">1024M</span></span><span class="token punctuation">;</span>

　　<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
　　　　<span class="token directive"><span class="token keyword">proxy_pass</span> http://test</span><span class="token punctuation">;</span>
　　　　<span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span>:<span class="token variable">$server_port</span></span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><b><code>Remark:</code></b><br>  这里我配置了2台服务器，实际上也可能只有一台，只是端口不一样而已，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</span>

<span class="token directive"><span class="token keyword">upstream</span> test</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8080 weight=9</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8081 weight=1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> test</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> localhost:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><b><code>Remark:</code></b><br>  上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>
<h3 id="fair-第三方"><a href="#fair-第三方" class="headerlink" title="fair(第三方)"></a>fair(第三方)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配</span>

<span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span> 
        <span class="token directive"><span class="token keyword">fair</span></span><span class="token punctuation">;</span> 
        <span class="token directive"><span class="token keyword">server</span> localhost:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="url-hash-第三方"><a href="#url-hash-第三方" class="headerlink" title="url_hash(第三方)"></a>url_hash(第三方)</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">
<span class="token comment"># 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 </span>
<span class="token comment"># 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span>

<span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span> 
        <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span> 
        <span class="token directive"><span class="token keyword">hash_method</span> crc32</span><span class="token punctuation">;</span> 
        <span class="token directive"><span class="token keyword">server</span> localhost:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> localhost:8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过<code>fair</code>和<code>url_hash</code>需要<code>安装第三方模块</code>才能使用</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的基本配置--示例</title>
    <url>/post/a81ceb57.html</url>
    <content><![CDATA[<h3 id="配置文件语法"><a href="#配置文件语法" class="headerlink" title="配置文件语法"></a>配置文件语法</h3><p>  nginx是模块化的系统，整个系统是分成一个个模块的。每个模块负责不同的功能。如果不用某个模块的话，也可以去掉，可以让nginx更加轻量化。</p>
<p>  要用的模块已经被编译进nginx了，成为nginx的一部分了，那要怎么用这些模块呢？那就得通过配置文件，这跟传统的linux服务差不多，都是通过配置文件来改变功能。nginx的模块是通过一个叫指令(directive)的东西来用的。整个配置文件都是由指令来控制的。nginx也有自己内置的指令，比如events, http, server, 和 location等，下面会进行详细解释。</p>
<span id="more"></span>

<p>  如果是包管理方式安装的，配置文件默认在<code>/etc/nginx/nginx.conf</code>；如果是源码安装的，配置文件则在<code>configure</code>的时候指定的<code>--conf-path</code>下。</p>
<p>  nginx的配置文件分为两类。一类是主配置文件，用来设定nginx的基本和通用配置。域名的配置文件放在指定的目录下，避免主配置文件逻辑过于复杂，也方便对域名的配置文件进行管理。</p>
<h3 id="配置文件变量详解"><a href="#配置文件变量详解" class="headerlink" title="配置文件变量详解"></a>配置文件变量详解</h3><table>
<tbody><tr>
<th>变量</th>
<th>解释</th>
</tr>
<tr>
<td>$remote_addr</td>
<td>获取客户端ip</td>
</tr>
<tr>
<td>$binary_remote_addr</td>
<td>客户端ip（二进制)</td>
</tr>
<tr>
<td>$remote_port</td>
<td>客户端port，如：50472</td>
</tr>
<tr>
<td>$remote_user</td>
<td>已经经过Auth Basic Module验证的用户名</td>
</tr>
<tr>
<td>$host</td>
<td>请求主机头字段，否则为服务器名称，如:blog.xiaosige.com</td>
</tr>
<tr>
<td>$request</td>
<td>用户请求信息，如：GET ?a=1&amp;b=2 HTTP/1.1</td>
</tr>
<tr>
<td>$request_filename</td>
<td>当前请求的文件的路径名，由root或alias和URI request组合而成，如：/2013/81.html</td>
</tr>
<tr>
<td>$status</td>
<td>请求的响应状态码,如:200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>响应时送出的body字节数数量。即使连接中断，这个数据也是精确的,如：40</td>
</tr>
<tr>
<td>$content_length</td>
<td>等于请求行的“Content_Length”的值</td>
</tr>
<tr>
<td>$content_type</td>
<td>等于请求行的“Content_Type”的值</td>
</tr>
<tr>
<td>$http_referer</td>
<td>引用地址</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>客户端agent信息,如：Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.76 Safari/537.36</td>
</tr>
<tr>
<td>$args</td>
<td>与$query_string相同 等于当中URL的参数(GET)，如a=1&amp;b=2</td>
</tr>
<tr>
<td>$document_uri</td>
<td>与uri相同 这个变量指当前的请求URI，不包括任何参数(见args) 如:/2013/81.html</td>
</tr>
<tr>
<td>$document_root</td>
<td>针对当前请求的根路径设置值</td>
</tr>
<tr>
<td>$hostname</td>
<td>如：centos53.localdomain</td>
</tr>
<tr>
<td>$http_cookie</td>
<td>客户端cookie信息</td>
</tr>
<tr>
<td>$cookie_COOKIE</td>
<td>cookie COOKIE变量的值</td>
</tr>
<tr>
<td>$is_args</td>
<td>如果有$args参数，这个变量等于”?”，否则等于”"，空值，如?</td>
</tr>
<tr>
<td>$limit_rate</td>
<td>这个变量可以限制连接速率，0表示不限速</td>
</tr>
<tr>
<td>$query_string</td>
<td>与$args相同 等于当中URL的参数(GET)，如a=1&amp;b=2</td>
</tr>
<tr>
<td>$request_body</td>
<td>记录POST过来的数据信息</td>
</tr>
<tr>
<td>$request_body_file</td>
<td>客户端请求主体信息的临时文件名</td>
</tr>
<tr>
<td>$request_method</td>
<td>客户端请求的动作，通常为GET或POST,如：GET</td>
</tr>
<tr>
<td>$request_uri</td>
<td>包含请求参数的原始URI，不包含主机名，如：/2013/81.html?a=1&amp;b=2</td>
</tr>
<tr>
<td>$scheme</td>
<td>HTTP方法（如http，https）,如：http</td>
</tr>
<tr>
<td>$uri</td>
<td>这个变量指当前的请求URI，不包括任何参数(见$args) 如:/2013/81.html</td>
</tr>
<tr>
<td>$request_completion</td>
<td>如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)，如：OK</td>
</tr>
<tr>
<td>$server_protocol</td>
<td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1，如：HTTP/1.1</td>
</tr>
<tr>
<td>$server_addr</td>
<td>服务器IP地址，在完成一次系统调用后可以确定这个值</td>
</tr>
<tr>
<td>$server_name</td>
<td>服务器名称，如：blog.xiaosige.com</td>
</tr>
<tr>
<td>$server_port</td>
<td>请求到达服务器的端口号,如：80</td>
</tr>
</tbody></table>

<h3 id="主配置文件总览"><a href="#主配置文件总览" class="headerlink" title="主配置文件总览"></a>主配置文件总览</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#定义运行nginx的用户</span>
<span class="token directive"><span class="token keyword">user</span> nobody</span><span class="token punctuation">;</span>
<span class="token comment">#启动进程,通常设置成和cpu的数量相等</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span>
 
<span class="token comment">#全局错误日志及PID文件</span>
<span class="token comment">#日志的级别debug info notice warn error crit alert emerg 递增--&gt;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>
 
<span class="token comment">#pid        logs/nginx.pid;</span>
 
<span class="token comment">#工作模式及连接数上限</span>
<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>
    <span class="token comment">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span>
    <span class="token comment">#仅用于linux2.6以上内核,可以大大提高nginx的性能</span>
    <span class="token directive"><span class="token keyword">use</span>   epoll</span><span class="token punctuation">;</span> 
 
    <span class="token comment">#单个后台worker process进程的最大并发链接数    </span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
 
    <span class="token comment"># 并发总数是 worker_processes 和 worker_connections 的乘积</span>
    <span class="token comment"># 即 max_clients = worker_processes * worker_connections</span>
    <span class="token comment"># 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span>
    <span class="token comment"># 为什么上面反向代理要除以4，应该说是一个经验值</span>
    <span class="token comment"># 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span>
    <span class="token comment"># worker_connections 值的设置跟物理内存大小有关</span>
    <span class="token comment"># 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span>
    <span class="token comment"># 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span>
    <span class="token comment"># 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span>
    <span class="token comment"># $ cat /proc/sys/fs/file-max</span>
    <span class="token comment"># 输出 34336</span>
    <span class="token comment"># 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span>
    <span class="token comment"># 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span>
    <span class="token comment"># 使得并发总数小于操作系统可以打开的最大文件数目</span>
    <span class="token comment"># 其实质也就是根据主机的物理CPU和内存进行配置</span>
    <span class="token comment"># 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span>
    <span class="token comment"># ulimit -SHn 65535</span>
 
<span class="token punctuation">}</span>
 
<span class="token comment">#负责HTTP服务器相关属性的配置 </span>
<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment">#设定mime类型,类型由mime.type文件定义</span>
    <span class="token directive"><span class="token keyword">include</span>    mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>
    <span class="token comment">#设定日志格式</span>
    (默认格式)
    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>
 
    <span class="token directive"><span class="token keyword">access_log</span>  logs/access.log  main</span><span class="token punctuation">;</span>
 
    <span class="token comment">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span>
    <span class="token comment">#对于普通应用，必须设为 on,</span>
    <span class="token comment">#如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span>
    <span class="token comment">#以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span>
    <span class="token directive"><span class="token keyword">sendfile</span>     <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
 
    <span class="token comment">#连接超时时间</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">tcp_nodelay</span>     <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token comment">#包含/etc/nginx/sites-enabled下的所有以.conf结尾的配置文件</span>
    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/sites-enabled/*.conf</span><span class="token punctuation">;</span>
    <span class="token comment">#包含/etc/nginx/conf.d下的所有配置文件</span>
    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*</span><span class="token punctuation">;</span>
    <span class="token comment">#开启gzip压缩</span>
    <span class="token directive"><span class="token keyword">gzip</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]."</span></span><span class="token punctuation">;</span>
 
    <span class="token comment">#设定请求缓冲</span>
    <span class="token directive"><span class="token keyword">client_header_buffer_size</span>    <span class="token number">128k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">large_client_header_buffers</span>  <span class="token number">4</span> <span class="token number">128k</span></span><span class="token punctuation">;</span>
 
    <span class="token comment">#负载均衡模块 weight(权重)模式  默认模式</span>
    <span class="token directive"><span class="token keyword">upstream</span> project1</span><span class="token punctuation">{</span>
        <span class="token comment">#按权重将请求代理至指定服务的指定端口，weight数值越大接受的请求越多</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.cn:82 weight=2</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.com:83 weight=1</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> blog.do90.cn:84 weight=5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 ip_hash模式</span>
    <span class="token directive"><span class="token keyword">upstream</span> project2</span><span class="token punctuation">{</span>
        <span class="token comment">#按照ip的hash结果分配服务器，该ip会固定访问同一个后端服务器，可以解决动态网页存在的session共享问题</span>
        <span class="token directive"><span class="token keyword">ip_hash；</span>
        server www.do90.cn:port1</span> <span class="token punctuation">;</span>
        <span class="token comment"># 当前服务暂时不参加负载均衡</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.com:port1 down</span><span class="token punctuation">;</span>
        <span class="token comment"># 作为预留备份机器，当其它机器都忙或者故障的时候才会启用</span>
        <span class="token directive"><span class="token keyword">server</span> blog.do90.cn:port1 backup</span><span class="token punctuation">;</span>
        <span class="token comment"># 可定义最大失败次数和失败时间</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.cn:port1 max_fails=3  fail_timeout=20s</span><span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 fair模式  需要安装upstream_fair模块</span>
    <span class="token directive"><span class="token keyword">upstream</span> project3</span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">fair</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.cn:8080</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> www.do90.com:8082</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#负载均衡模块 url_hash模式  需要安装url_hash模块</span>
    <span class="token directive"><span class="token keyword">upstream</span> project4</span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">server</span> 10.0.0.10:7777</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server</span> 10.0.0.11:8888</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">hash_method</span> crc32</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">#设定虚拟主机配置</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token comment">#侦听80端口</span>
        <span class="token directive"><span class="token keyword">listen</span>    <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token comment">#定义使用 www.do90.cn访问</span>
        <span class="token directive"><span class="token keyword">server_name</span>  www.do90.cn</span><span class="token punctuation">;</span>
 
        <span class="token comment">#定义服务器的默认网站根目录位置</span>
        <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
 
        <span class="token comment">#设定本虚拟主机的访问日志</span>
        <span class="token directive"><span class="token keyword">access_log</span>  logs/nginx.access.log  main</span><span class="token punctuation">;</span>
 
        <span class="token comment">#默认请求</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
            
            <span class="token comment">#定义首页索引文件的名称</span>
            <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>   
 
        <span class="token punctuation">}</span>
 
        <span class="token comment"># 定义错误提示页面</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#静态文件，nginx自己处理</span>
        <span class="token directive"><span class="token keyword">location</span> ~ ^/(images|javascript|js|css|flash|media|static)/</span> <span class="token punctuation">{</span>
            
            <span class="token comment">#过期30天，静态文件不怎么更新，过期可以设大一点，</span>
            <span class="token comment">#如果频繁更新，则可以设置得小一点。</span>
            <span class="token directive"><span class="token keyword">expires</span> <span class="token number">30d</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span>
        <span class="token directive"><span class="token keyword">location</span> ~ .php$</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">fastcgi_pass</span> 127.0.0.1:9000</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">#禁止访问 .htxxx 文件</span>
            <span class="token directive"><span class="token keyword">location</span> ~ /.ht</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="域名配置文件"><a href="#域名配置文件" class="headerlink" title="域名配置文件"></a>域名配置文件</h3><p>  在主配置文件中会有include参数，include /etc/nginx/sites-enabled/*.conf;这个文件夹中的所有以.conf结尾的，都会被nginx作为配置文件。下方有几个例子。</p>
<ol>
<li><p>正常html访问</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span>
    <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">listen</span>    <span class="token number">80</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">server_name</span>  example.com</span><span class="token punctuation">;</span>
              <span class="token directive"><span class="token keyword">index</span>   index.html</span><span class="token punctuation">;</span>
              <span class="token directive"><span class="token keyword">root</span>  /var/www</span><span class="token punctuation">;</span>
          <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/jdnn_access.log combined</span><span class="token punctuation">;</span>
          <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/jdnn_error.log warn</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置php请求转发</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> m.example.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> /var/www/</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.php</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">if</span> (!-e <span class="token variable">$request_filename</span>)</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">rewrite</span> ^/(.*)  /index.php/<span class="token variable">$1</span> last</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> ~ ^(.+\.php)(.*)$</span>
    <span class="token punctuation">{</span>
                <span class="token directive"><span class="token keyword">fastcgi_pass</span>  unix:/var/run/php5-fpm.sock</span><span class="token punctuation">;</span>
                <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>
                <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>
                <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
                <span class="token directive"><span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/admin_access.log combined</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/admin_error.log warn</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem</span><span class="token punctuation">;</span> 
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/letsencrypt/live/pkgame.net/privkey.pem</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">include</span> /etc/letsencrypt/options-ssl-nginx.conf</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>配置python后端请求转发</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>  
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>  
        <span class="token directive"><span class="token keyword">server_name</span>  www.example.com</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>  
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">include</span> uwsgi_params</span><span class="token punctuation">;</span><span class="token comment">#加载uWSGI配置参数</span>
            <span class="token directive"><span class="token keyword">uwsgi_pass</span> 127.0.0.1:3031</span><span class="token punctuation">;</span><span class="token comment">#请求转发至”127.0.0.1:3031″端口上，即uWSGI服务器</span>
         <span class="token punctuation">}</span>  
         <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/www_access.log combined</span><span class="token punctuation">;</span>
         <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/www_error.log warn</span><span class="token punctuation">;</span>

       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx一键部署安装脚本</title>
    <url>/post/36c4e78d.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器, 在企业生产环境中常常使用yum或编译安装Nginx</p>
<span id="more"></span>

<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>  以下脚本，可完成Nginx的全自动编译安装，安装完成后自动启动并设置开机自启。脚本支持CentOS系列发行版本，shell脚本源码如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">ck_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span>
        <span class="token keyword">then</span>
                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$1</span> error."</span>
                <span class="token builtin class-name">exit</span> <span class="token number">1</span>
        <span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token function-name function">download_ng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token builtin class-name">cd</span>  /usr/local/src
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> nginx-1.23.0.tar.gz <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"当前目录已经存在nginx-1.23.0.tar.gz"</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"检测md5"</span>
        <span class="token assign-left variable">ng_md5</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>md5sum nginx-1.23.0.tar.gz<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">`</span></span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${ng_md5}</span> <span class="token operator">==</span> <span class="token string">'e8768e388f26fb3d56a3c88055345219'</span> <span class="token punctuation">]</span>
        <span class="token keyword">then</span>
            <span class="token builtin class-name">return</span> <span class="token number">0</span>
        <span class="token keyword">else</span>
            <span class="token function">sudo</span> /bin/mv nginx-1.23.0.tar.gz nginx-1.23.0.tar.gz.old
        <span class="token keyword">fi</span>
    <span class="token keyword">fi</span>

    <span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-O</span> http://nginx.org/download/nginx-1.23.0.tar.gz
    ck_ok <span class="token string">"下载Nginx"</span>
<span class="token punctuation">}</span>
<span class="token function-name function">install_ng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token builtin class-name">cd</span> /usr/local/src
    <span class="token builtin class-name">echo</span> <span class="token string">"解压Nginx"</span>
    <span class="token function">sudo</span> <span class="token function">tar</span> zxf nginx-1.23.0.tar.gz
    ck_ok <span class="token string">"解压Nginx"</span>
    <span class="token builtin class-name">cd</span> nginx-1.23.0


    <span class="token builtin class-name">echo</span> <span class="token string">"安装依赖"</span>
    <span class="token keyword">if</span> <span class="token function">which</span> yum <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
    <span class="token keyword">then</span>
        <span class="token comment">## RHEL/Rocky</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">pkg</span> <span class="token keyword">in</span> gcc <span class="token function">make</span> pcre-devel zlib-devel openssl-devel
        <span class="token keyword">do</span>
            <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">rpm</span> <span class="token parameter variable">-q</span> <span class="token variable">$pkg</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
            <span class="token keyword">then</span>
                <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token variable">$pkg</span>
                ck_ok <span class="token string">"yum 安装<span class="token variable">$pkg</span>"</span>
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$pkg</span>已经安装"</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">done</span>
    <span class="token keyword">fi</span>


    <span class="token keyword">if</span> <span class="token function">which</span> <span class="token function">apt</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
    <span class="token keyword">then</span>
        <span class="token comment">##ubuntu</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">pkg</span> <span class="token keyword">in</span> <span class="token function">make</span> libpcre++-dev  libssl-dev  zlib1g-dev
        <span class="token keyword">do</span>
            <span class="token keyword">if</span> <span class="token operator">!</span> dpkg <span class="token parameter variable">-l</span> <span class="token variable">$pkg</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
            <span class="token keyword">then</span>
                <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token variable">$pkg</span>
                ck_ok <span class="token string">"apt 安装<span class="token variable">$pkg</span>"</span>
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$pkg</span>已经安装"</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">done</span>
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"configure Nginx"</span>
    <span class="token function">sudo</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx  --with-http_ssl_module
    ck_ok <span class="token string">"Configure Nginx"</span>


    <span class="token builtin class-name">echo</span> <span class="token string">"编译和安装"</span>
    <span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
    ck_ok <span class="token string">"编译和安装"</span>


    <span class="token builtin class-name">echo</span> <span class="token string">"编辑systemd服务管理脚本"</span>


    <span class="token function">cat</span> <span class="token operator">&gt;</span> /tmp/nginx.service <span class="token operator">&lt;&lt;</span><span class="token string">EOF
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/usr/local/nginx/logs/nginx.pid
ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
ExecReload=/bin/sh -c "/bin/kill -s HUP \<span class="token variable"><span class="token variable">$(</span>/bin/cat /usr/local/nginx/logs/nginx.pid<span class="token variable">)</span></span>"
ExecStop=/bin/sh -c "/bin/kill -s TERM \<span class="token variable"><span class="token variable">$(</span>/bin/cat /usr/local/nginx/logs/nginx.pid<span class="token variable">)</span></span>"

[Install]
WantedBy=multi-user.target
EOF</span>

    <span class="token function">sudo</span> /bin/mv /tmp/nginx.service /lib/systemd/system/nginx.service
    ck_ok <span class="token string">"编辑nginx.service"</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"加载服务"</span>
    <span class="token function">sudo</span> systemctl unmask nginx.service
    <span class="token function">sudo</span>  systemctl daemon-reload
    <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> nginx
    <span class="token builtin class-name">echo</span> <span class="token string">"启动Nginx"</span>
    <span class="token function">sudo</span> systemctl start nginx
    ck_ok <span class="token string">"启动Nginx"</span>
<span class="token punctuation">}</span>

download_ng
install_ng<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  将脚本保存为nginx_install.sh，执行以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x nginx_install.sh <span class="token operator">&amp;&amp;</span> ./nginx_install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  访问服务器IP地址，可以发现已经可以正常访问Nginx了。常用nginx命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动nginx</span>
systemctl start nginx
<span class="token comment"># 停止nginx</span>
systemctl stop nginx
<span class="token comment"># 设置开机启动</span>
systemctl <span class="token builtin class-name">enable</span> nginx
<span class="token comment"># 取消开机启动</span>
systemctl disable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  最后附上一键安装nginx命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> s.aaa.al/nginx_install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Nginx--两种方式</title>
    <url>/post/69813a0e.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  Nginx是一个高性能的Web和反向代理服务器,它具有有很多非常优越的特性:<br>  <b>作为Web服务器</b>: 相比Apache，Nginx 使用更少的资源，支持更多 的并发连接，体现更高的效率，这点使Nginx尤其受到虚拟主机提供商的欢迎。能够支持高达50,000个并发连接数的响应，感谢Nginx为我们选择了epoll and kqueue作为开发模型.</p>
<span id="more"></span>
<p>  <b>作为负载均衡服务器</b>: Nginx 既可以在内部直接支持Rails和PHP，也可以支持作为HTTP代理服务器对外进行服务。Nginx 用C编写,不论是系统资源开销还是CPU使用效率都比Perlbal要好的多。<br>  <b>作为邮件代理服务器</b>: Nginx 同时也是一个非常优秀的邮件代理服务器(最早开发这个产品的目的之一也是作为邮件代理服务器)，Last.fm 描述了成功并且美妙的使用经验。<br>  <b>Nginx安装非常的简单，配置文件非常简洁(还能够支持perl语法)，Bugs非常少的服务器</b>: Nginx启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下进行软件版本的升级。</p>
<h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><h4 id="yum仓库配置"><a href="#yum仓库配置" class="headerlink" title="yum仓库配置"></a>yum仓库配置</h4><p>  在<code>/etc/yum.repos.d/</code>下新建一个nginx.repo，加入<a href="http://nginx.org/en/linux_packages.html">nginx官方提供的源</a> , <a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/">Installing NGINX Open Source</a></p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/&lt;OS&gt;/&lt;OSRELEASE&gt;/$basearch/
gpgcheck=0
enabled=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  注意其中的<code>&lt;OS&gt;</code> 为系统名，<code>&lt;OSRELEASE&gt;</code>为系统大版本</p>
<ol>
<li>CentOS7<br><code>vi /etc/yum.repos.d/nginx.repo</code><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>CentOS6<br><code>vi /etc/yum.repos.d/nginx.repo</code><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/6/$basearch/
gpgcheck=0
enabled=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ol>
<li>直接安装会安装当前的最新版本<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>该源仓库下有多个版本的nginx可供安装，可以用如下命令查看<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">--showduplicates</span> list nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>选择其中一个版本安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx-版本号
<span class="token comment"># 如下</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token number">1.18</span>.0-1.el6.ngx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="禁止更新"><a href="#禁止更新" class="headerlink" title="禁止更新"></a>禁止更新</h4><p>  我们在安装之后，为了能够正常运行，我们一般会禁止Nginx进行更新。因为在yum更新了Nginx之后，Nginx会自动重启。这对于我们来说是没有必要的，所以我们可以屏蔽更新。我们可以这样，将下列指定放到你的<code>/etc/yum.conf</code>文件中：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">exclude</span><span class="token punctuation">=</span><span class="token value attr-value">nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="更新Nginx"><a href="#更新Nginx" class="headerlink" title="更新Nginx"></a>更新Nginx</h4><p>  一般在生产环境，我们都是禁用更新的。所以说，这里只是作为一个参考<br>  我们需要执行的命令就是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code> 注意： 在使用 yum 更新之后，Nginx会自动重启。</code></p>
<h4 id="命令管理"><a href="#命令管理" class="headerlink" title="命令管理"></a>命令管理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx   <span class="token comment"># 启动</span>
systemctl restart nginx <span class="token comment"># 重启</span>
nginx <span class="token parameter variable">-t</span>                <span class="token comment"># 测试配置文件语法是否正确</span>
systemctl reload nginx  <span class="token comment"># 重载配置文件</span>
systemctl stop nginx    <span class="token comment"># 停止</span>
systemctl <span class="token builtin class-name">enable</span> nginx  <span class="token comment"># 启动开机启动</span>
systemctl diasble nginx <span class="token comment"># 禁止开机启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="源代码安装"><a href="#源代码安装" class="headerlink" title="源代码安装"></a>源代码安装</h3><p>  如果已安装，则remove掉<code>yum remove nginx</code></p>
<h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>  安装wget并下载nginx源码包， 去 <a href="http://nginx.org/download/">http://nginx.org/download/</a> 可以找到历史版本的包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> http://nginx.org/download/nginx-1.19.2.tar.gz

<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.19.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> www
<span class="token function">useradd</span> <span class="token parameter variable">-g</span> www www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p> useradd -g www -s /sbin/nologin -M www</p>
</blockquote>
<h4 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h4><ol>
<li>安装gcc<br>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境。安装指令如下：<br>安装gcc<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc automake autoconf libtool <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
安装g++<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装PCRE pcre-devel<br>Nginx的Rewrite模块和HTTP核心模块会使用到PCRE正则表达式语法。这里需要安装两个安装包pcre和pcre-devel。第一个安装包提供编译版本的库，而第二个提供开发阶段的头文件和编译项目的源代码。安装指令如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装zlib<br>zlib库提供了开发人员的压缩算法，在Nginx的各种模块中需要使用gzip压缩。安装指令如下:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装Open SSL<br>nginx不仅支持 http协议，还支持 https（即在 ssl 协议上传输 http），如果使用了 https，需要安装 OpenSSL 库。安装指令如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
环境结束.</li>
</ol>
<h4 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h4><p>没有特别配置，直接<code>./configure</code>就好了。安装完成后可以通过<code>nginx -V</code>查看选择的模块。</p>
<p>部分编译参数说明</p>
<table>
<tbody><tr>
<th>参数</th>
<th>描述</th>
</tr>
<tr>
<td>--prefix</td>
<td>定义nginx安装路径</td>
</tr>
<tr>
<td>--sbin-path</td>
<td>定义nginx可执行文件路径</td>
</tr>
<tr>
<td>--modules-path</td>
<td>nginx模块路径</td>
</tr>
<tr>
<td>--conf-path</td>
<td>nginx配置文件路径</td>
</tr>
<tr>
<td>--error-log-path、--http-log-path</td>
<td>错误和访问日志路径</td>
</tr>
<tr>
<td>--with-openssl</td>
<td>定义编译使用的openssl，默认为系统自带openssl</td>
</tr>
<tr>
<td>--with-http_ssl_module</td>
<td>ssl模块</td>
</tr>
</tbody></table>

<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/nginx \</span>
--sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">\</span>
--modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules <span class="token punctuation">\</span>
--conf-path<span class="token operator">=</span>/usr/local/nginx/nginx.conf <span class="token punctuation">\</span>
--error-log-path<span class="token operator">=</span>/usr/local/nginx/error.log <span class="token punctuation">\</span>
--http-log-path<span class="token operator">=</span>/usr/local/nginx/access.log <span class="token punctuation">\</span>
--pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid <span class="token punctuation">\</span>
--lock-path<span class="token operator">=</span>/usr/local/nginx/nginx.lock <span class="token punctuation">\</span>
--http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/client_temp <span class="token punctuation">\</span>
--http-proxy-temp-path<span class="token operator">=</span>/usr/local/nginx/proxy_temp <span class="token punctuation">\</span>
--http-fastcgi-temp-path<span class="token operator">=</span>/usr/local/nginx/fastcgi_temp <span class="token punctuation">\</span>
--http-uwsgi-temp-path<span class="token operator">=</span>/usr/local/nginx/uwsgi_temp <span class="token punctuation">\</span>
--http-scgi-temp-path<span class="token operator">=</span>/usr/local/nginx/scgi_temp <span class="token punctuation">\</span>
<span class="token parameter variable">--user</span><span class="token operator">=</span>www <span class="token punctuation">\</span>
<span class="token parameter variable">--group</span><span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-compat <span class="token punctuation">\</span>
--with-file-aio <span class="token punctuation">\</span>
--with-threads <span class="token punctuation">\</span>
--with-http_addition_module <span class="token punctuation">\</span>
--with-http_auth_request_module <span class="token punctuation">\</span>
--with-http_dav_module <span class="token punctuation">\</span>
--with-http_flv_module <span class="token punctuation">\</span>
--with-http_gunzip_module <span class="token punctuation">\</span>
--with-http_gzip_static_module <span class="token punctuation">\</span>
--with-http_mp4_module <span class="token punctuation">\</span>
--with-http_random_index_module <span class="token punctuation">\</span>
--with-http_realip_module <span class="token punctuation">\</span>
--with-http_secure_link_module <span class="token punctuation">\</span>
--with-http_slice_module <span class="token punctuation">\</span>
--with-http_ssl_module <span class="token punctuation">\</span>
--with-http_stub_status_module <span class="token punctuation">\</span>
--with-http_sub_module <span class="token punctuation">\</span>
--with-http_v2_module <span class="token punctuation">\</span>
--with-mail <span class="token punctuation">\</span>
--with-mail_ssl_module <span class="token punctuation">\</span>
--with-stream <span class="token punctuation">\</span>
--with-stream_realip_module <span class="token punctuation">\</span>
--with-stream_ssl_module <span class="token punctuation">\</span>
--with-stream_ssl_preread_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<img data-src="/post/69813a0e/nginx-001.png" class="" title="nginx编译输出">

<p>上面的编译是使用了系统默认的openssl，如果想使用更高版本的openssl进行编译的话。可以加上<code>--with-openssl=openssl安装路径</code>来自定义。高版本的openssl安装可以参考 <a href="https://www.jianshu.com/p/bf5a55a0a814">这篇文章</a>。</p>
<p><code>--with-openssl</code> 参数虽然可以指定 OpenSSL 路径，但只支持 OpenSSL 的源代码，不支持已编译好的 OpenSSL。每回更新 nginx 都要重新编译 OpenSSL 很麻烦 。以下是解决方案<br>打开nginx源码解压目录下的<code>auto/lib/openssl/conf</code>,找到所有带<code>.openssl</code>的行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_INCS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_INCS</span> <span class="token variable">$OPENSSL</span>/.openssl/include"</span>
<span class="token assign-left variable">CORE_DEPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_DEPS</span> <span class="token variable">$OPENSSL</span>/.openssl/include/openssl/ssl.h"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/.openssl/lib/libssl.a"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/.openssl/lib/libcrypto.a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>改成下面的样子，去掉<code>.openssl/</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CORE_INCS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_INCS</span> <span class="token variable">$OPENSSL</span>/include"</span>
<span class="token assign-left variable">CORE_DEPS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_DEPS</span> <span class="token variable">$OPENSSL</span>/include/openssl/ssl.h"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/lib/libssl.a"</span>
<span class="token assign-left variable">CORE_LIBS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CORE_LIBS</span> <span class="token variable">$OPENSSL</span>/lib/libcrypto.a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进行编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ./configure --prefix=/usr/local/nginx \</span>
--sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">\</span>
--modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules <span class="token punctuation">\</span>
--conf-path<span class="token operator">=</span>/usr/local/nginx/nginx.conf <span class="token punctuation">\</span>
--error-log-path<span class="token operator">=</span>/usr/local/nginx/error.log <span class="token punctuation">\</span>
--http-log-path<span class="token operator">=</span>/usr/local/nginx/access.log <span class="token punctuation">\</span>
--pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid <span class="token punctuation">\</span>
--lock-path<span class="token operator">=</span>/usr/local/nginx/nginx.lock <span class="token punctuation">\</span>
--http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/client_temp <span class="token punctuation">\</span>
--http-proxy-temp-path<span class="token operator">=</span>/usr/local/nginx/proxy_temp <span class="token punctuation">\</span>
--http-fastcgi-temp-path<span class="token operator">=</span>/usr/local/nginx/fastcgi_temp <span class="token punctuation">\</span>
--http-uwsgi-temp-path<span class="token operator">=</span>/usr/local/nginx/uwsgi_temp <span class="token punctuation">\</span>
--http-scgi-temp-path<span class="token operator">=</span>/usr/local/nginx/scgi_temp <span class="token punctuation">\</span>
<span class="token parameter variable">--user</span><span class="token operator">=</span>www <span class="token punctuation">\</span>
<span class="token parameter variable">--group</span><span class="token operator">=</span>www <span class="token punctuation">\</span>
--with-compat <span class="token punctuation">\</span>
--with-file-aio <span class="token punctuation">\</span>
--with-threads <span class="token punctuation">\</span>
--with-http_addition_module <span class="token punctuation">\</span>
--with-http_auth_request_module <span class="token punctuation">\</span>
--with-http_dav_module <span class="token punctuation">\</span>
--with-http_flv_module <span class="token punctuation">\</span>
--with-http_gunzip_module <span class="token punctuation">\</span>
--with-http_gzip_static_module <span class="token punctuation">\</span>
--with-http_mp4_module <span class="token punctuation">\</span>
--with-http_random_index_module <span class="token punctuation">\</span>
--with-http_realip_module <span class="token punctuation">\</span>
--with-http_secure_link_module <span class="token punctuation">\</span>
--with-http_slice_module <span class="token punctuation">\</span>
--with-http_ssl_module <span class="token punctuation">\</span>
--with-http_stub_status_module <span class="token punctuation">\</span>
--with-http_sub_module <span class="token punctuation">\</span>
--with-http_v2_module <span class="token punctuation">\</span>
--with-mail <span class="token punctuation">\</span>
--with-mail_ssl_module <span class="token punctuation">\</span>
--with-stream <span class="token punctuation">\</span>
--with-stream_realip_module <span class="token punctuation">\</span>
--with-stream_ssl_module <span class="token punctuation">\</span>
--with-openssl<span class="token operator">=</span>/usr/local/openssl <span class="token punctuation">\</span>
--with-stream_ssl_preread_module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<img data-src="/post/69813a0e/nginx-002.png" class="" title="nginx编译输出">


<p>部分编译参数说明</p>
<table>
<tbody><tr>
<th>参数选项</th>
<th>基本解释</th>
</tr>
<tr>
<td>–help</td>
<td>打印帮助信息</td>
</tr>
<tr>
<td>–prefix=PATH</td>
<td>Nginx安装部署后的根目录 默认为/usr/local/nginx目录。注意：这个目标的设置会影响其他参数中的相对目录。例如，如果设置了–sbin-path=sbin/nginx，那么实际上可执行文件会被放到/usr/local/nginx/sbin/nginx中</td>
</tr>
<tr>
<td>–sbin-path=PATH</td>
<td>可执行文件的放置路径 &lt;prefix&gt;/sbin/nginx </td>
</tr>
<tr>
<td>–conf-path=PATH</td>
<td>配置文件的放置路径 &lt;prefix&gt;/conf/nginx.conf</td>
</tr>
<tr>
<td>–error-log-path=PATH</td>
<td>error日志文件的放置路径。error日志用于定位问题，可输出多种级别（包括debug调试级别）的日志。它的配置非常灵活，可以在nginx.conf里配置为不同请求的日志并输出到不同的log文件中。这里是默认的Nginx核心日志路径 &lt;prefix&gt;/logs/error.log</td>
</tr>
<tr>
<td>–pid-path=PATH</td>
<td>pid文件的存放路径。这个文件里仅以ASC II码存放着Nginx master的进程ID，有了这个进程ID，在使用命令行（例如nginx -s reload）通过读取master进程ID向master进程发送信号时，才能对运行中的Nginx服务产生作用 &lt;prefix&gt;/logs/nginx.pid</td>
</tr>
<tr>
<td>–lock-path=PATH</td>
<td>lock文件的放置路径 &lt;prefix&gt;/logs/nginx.lock</td>
</tr>
<tr>
<td>–user=USER</td>
<td>指定Nginx worker进程运行时所属的用户。注意：不要将启动worker进程的用户设为root，在worker进程出问题时master进程要具备停止/启动worker进程的能力</td>
</tr>
<tr>
<td>–group=GROUP</td>
<td>指定Nginx worker进程运行时所属的组</td>
</tr>
<tr>
<td>–build=NAME</td>
<td>configure执行时与编译期间产生的临时文件名称</td>
</tr>
<tr>
<td>–builddir=DIR</td>
<td>configure执行时与编译期间产生的临时文件放置的目录，包括产生的Makefile、C源文件、目标文件、可执行文件等 &lt;nginx source path&gt;/objs</td>
</tr>
<tr>
<td>–with-rtsig_module</td>
<td>使用rtsig module处理事件驱动 默认情况下，Nginx是不安装rtsig module的，即不会把rtsig module编译进最终的Nginx二进制程序中</td>
</tr>
<tr>
<td>–with-select_module</td>
<td>使用select module处理事件驱动 select是Linux提供的一种多路复用机制，在epoll调用没有诞生前，例如在Linux 2.4及其之前的内核中，select用于支持服务器提供高并发连接 默认情况下，Nginx是不安装select module的，但如果没有找到其他更好的事件模块，该模块将会被安装</td>
</tr>
<tr>
<td>–without-select_module</td>
<td>不安装select module</td>
</tr>
<tr>
<td>–with-poll_module</td>
<td>使用poll module处理事件驱动 poll的性能与select类似，在大量并发连接下性能都远不如epoll。默认情况下，Nginx是不安装poll</td>
</tr>
<tr>
<td>–without-poll_module</td>
<td>不安装poll module</td>
</tr>
<tr>
<td>–with-file-aio</td>
<td>使用AIO方式处理事件驱动 (IO异步大幅度提升性能，需要内核 2.6.22 以上的版本)</td>
</tr>
<tr>
<td>–with-ipv6</td>
<td>使Nginx支持IPv6</td>
</tr>
<tr>
<td>–with-https_ssl_module</td>
<td>安装https ssl module。该模块使Nginx支持SSL协议，提供HTTPS服务。 注意：该模块的安装依赖于OpenSSL开源软件，即首先应确保已经在之前的参数中配置了OpenSSL需要安装 OpenSSL library yum install openssl-devel | # apt-get install libssl-dev</td>
</tr>
<tr>
<td>–with-https_spdy_module</td>
<td>开启 ngx_https_spdy_module 模块。是Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强</td>
</tr>
<tr>
<td>–with-https_realip_module</td>
<td>开启 ngx_https_realip_module 模块 。此模块支持显示真实来源IP地址，主要用于NGINX做前端负载均衡服务器使用。</td>
</tr>
<tr>
<td>–with-https_addition_module</td>
<td>开启 https addtion module。该模块可以在返回客户端的HTTP包体头部或者尾部增加内容。作为一个输出过滤器，支持不完全缓冲，分部分响应请求，游戏服务器不必安装，门户网站可以安装，有利于被搜索引擎收录页面信息。</td>
</tr>
<tr>
<td>–with-https_xslt_module</td>
<td>开启 ngx_https_xslt_module 模块 这个模块可以使XML格式的数据在发给客户端前加入XSL渲染，0.7.8后面版本才可以使用。</td>
</tr>
<tr>
<td>–with-https_image_filter_module</td>
<td>开启 ngx_https_image_filter_module 模块 。这个模块将符合配置的图片实时压缩为指定大小（width*height）的缩略图再发送给用户，目前支持JPEG、PNG、GIF格式。 注意：这个模块依赖于开源的libgd库，在安装前确保操作系统已经安装了libgd，是nginx提供的集成图片处理模块，支持nginx-0.7.54以后的版本，在网站访问量不是很高磁盘有限不想生成多余的图片文件的前提下可，就可以用它实时缩放图片，旋转图片，验证图片有效性以及获取图片宽高以及图片类型信息，由于是即时计算的结果，所以网站访问量大的话，不建议使用。</td>
</tr>
<tr>
<td>–with-https_geoip_module</td>
<td>开启 ngx_https_geoip_module 模块，这个模块基于客户端的IP地址创建一些ngx_https_geoip_module变量，并与MaxMindGeoIP文件进行匹配，该模块仅用于0.7.63和0.8.6版本之后。 需要安装 yum install geoip-devel | apt-get install geoip-bin geoip-database libgeoip-dev</td>
</tr>
<tr>
<td>–with-https_sub_module</td>
<td>开启 ngx_https_sub_module 。该模块可以在Nginx返回客户端的HTTP响应包中将指定的字符串替换为自己需要的字符串 例如，在HTML的返回中，将替换为<script language="”javascript”" src="”$script”"></script></td>
</tr>
<tr>
<td>–with-https_dav_module</td>
<td>开启 ngx_https_dav_module 模块。这个模块可以让Nginx支持Webdav标准，如支持Webdav协议中的PUT、DELETE、COPY、MOVE、MKCOL等请求 默认情况下为关闭，需编译开启,如果开启WebDAV扩展动作模块，（可为文件和目录指定权限）</td>
</tr>
<tr>
<td>–with-https_flv_module</td>
<td>开启 ngx_https_flv_module 模块 ，这个模块可以在向客户端返回响应时，对FLV格式的视频文件在header头做一些处理，使得客户端可以观看、拖动FLV视频</td>
</tr>
<tr>
<td>–with-https_mp4_module</td>
<td>开启 ngx_https_mp4_module 模块，该模块使客户端可以观看、拖动MP4视频</td>
</tr>
<tr>
<td>–with-https_gunzip_module</td>
<td>开启 ngx_https_gunzip_module 模块，是一个过滤器， 它为不支持“gzip”编码方法的客户端解压具有“Content-Encoding: gzip”头的响应。 当希望存储压缩后的数据以节省空间和减少I/O开销，又不希望对那些不支持gzip压缩的客户端造成不利影响时， 此模块会派上用途</td>
</tr>
<tr>
<td>–with-https_gzip_static_module</td>
<td>开启 ngx_https_gzip_static_module 模块 ，允许发送以“.gz”作为文件扩展名的预压缩文件，防止文件被重复压缩，以替代发送普通文件。如果采用gzip模块把一些文档进行gzip格式压缩后再返回给客户端，那么对同一个文件每次都会重新压缩，这是比较消耗服务器CPU资源的。</td>
</tr>
<tr>
<td>–with-https_auth_request_module</td>
<td>开启 ngx_https_auth_request_module 模块</td>
</tr>
<tr>
<td>–with-https_random_index_module</td>
<td>开启 ngx_https_random_index_module 模块 ，该模块在客户端访问某个目录时，随机返回该目录下的索引文件</td>
</tr>
<tr>
<td>–with-https_secure_link_module</td>
<td>开启 ngx_https_secure_link_module ，该模块提供一种验证请求是否有效的机制。例如，它会验证URL中需要加入的token参数是否属于特定客户端发来的，以及检查时间戳是否过期（计算和检查要求所需的安全链接网址（防盗链））</td>
</tr>
<tr>
<td>–with-https_degradation_module</td>
<td>开启 ngx_https_degradation_module 模块，该模块针对一些特殊的系统调用（如sbrk）做一些优化，允许在内存不足的情况下返回204或444码。</td>
</tr>
<tr>
<td>–with-https_stub_status_module</td>
<td>开启 ngx_https_stub_status_module 模块，该模块可以让运行中的Nginx提供性能统计页面，获取相关的并发连接、请求的信息</td>
</tr>
<tr>
<td>–without-https_charset_module</td>
<td>关闭 https charset module。这个模块可以将服务器发出的HTTP响应重编码</td>
</tr>
<tr>
<td>–without-https_gzip_module</td>
<td>关闭 ngx_https_gzip_module模块，在服务器发出的HTTP响应包中，这个模块可以按照配置文件指定的content-type对特定大小的HTTP响应包体执行gzip压缩</td>
</tr>
<tr>
<td>–without-https_ssi_module</td>
<td>关闭 ngx_https_ssi_module模块，该模块可以在向用户返回的HTTP响应包体中加入特定的内容，如HTML文件中固定的页头和页尾</td>
</tr>
<tr>
<td>–without-https_userid_module</td>
<td>关闭 ngx_https_userid_module模块，这个模块可以通过HTTP请求头部信息里的一些字段认证用户信息，以确定请求是否合法</td>
</tr>
<tr>
<td>–without-https_access_module</td>
<td>关闭 访问模块，这个模块可以根据IP地址限制能够访问服务器的客户端</td>
</tr>
<tr>
<td>–without-https_auth_basic_module</td>
<td>禁用基本的认证模块，这个模块可以提供最简单的用户名/密码认证</td>
</tr>
<tr>
<td>–without-https_autoindex_module</td>
<td>禁用自动索引模块，该模块提供简单的目录浏览功能</td>
</tr>
<tr>
<td>–without-https_geo_module</td>
<td>禁用Geo模块，这个模块可以定义一些变量，这些变量的值将与客户端IP地址关联，这样Nginx针对不同的地区的客户端（根据IP地址判断）返回不一样的结果，例如不同地区显示不同语言的网页</td>
</tr>
<tr>
<td>–without-https_map_module</td>
<td>禁用Map模块，这个模块可以建立一个key/value映射表，不同的key得到相应的value，这样可以针对不同的URL做特殊处理。例如，返回302重定向响应时，可以期望URL不同时返回的Location字段也不一样</td>
</tr>
<tr>
<td>–without-https_split_clients_module</td>
<td>切割客户端IP，该模块会根据客户端的信息，例如IP地址、header头、cookie等，来区分处理，nginx 的 Split Clients（切割客户端IP）的作用是使用 MurmurHash2 哈希算法对客户端的IP进行运算，得到一个32位的整数，这个数值范围从 0~4294967296，匹配不同的区间位置，得到不同的值赋予某个变量。最后根据这变量的不同，作不同的逻辑处理。</td>
</tr>
<tr>
<td>–without-https_referer_module</td>
<td>该模块可以根据请求中的referer字段来拒绝请求</td>
</tr>
<tr>
<td>–without-https_rewrite_module</td>
<td>禁用Rewrite模块，该模块提供HTTP请求在Nginx服务内部的重定向功能，依赖PCRE库</td>
</tr>
<tr>
<td>–without-https_proxy_module</td>
<td>禁用代理模块。该模块提供基本的HTTP反向代理功能</td>
</tr>
<tr>
<td>–without-https_fastcgi_module</td>
<td>禁用FastCGI模块。该模块提供FastCGI功能</td>
</tr>
<tr>
<td>–without-https_uwsgi_module</td>
<td>禁用uwsgi模块。该模块提供uWSGI功能</td>
</tr>
<tr>
<td>–without-https_scgi_module</td>
<td>禁用scqi模块。该模块提供SCGI功能</td>
</tr>
<tr>
<td>–without-https_memcached_module</td>
<td>禁用Memcached模块。该模块可以使得Nginx直接由上游的memcached服务读取数据，并简单地适配成HTTP响应返回给客户端</td>
</tr>
<tr>
<td>–without-https_limit_conn_module</td>
<td>禁用limit_conn_zone模块，该模块针对某个IP地址限制并发连接数。例如，使Nginx对一个IP地址仅允许一个连接。</td>
</tr>
<tr>
<td>–without-https_limit_req_module</td>
<td>禁用Limit Requests模块。该模块针对某个IP地址限制并发请求数</td>
</tr>
<tr>
<td>–without-https_empty_gif_module</td>
<td>禁用Empty Gif模块。该模块可以使得Nginx在收到无效请求时，立刻返回内存中的1×1像素的GIF图片。这种好处在于，对于明显的无效请求不会去试图浪费服务器资源</td>
</tr>
<tr>
<td>–without-https_browser_module</td>
<td>禁用Browser 模块。该模块会根据HTTP请求中的user-agent字段（该字段通常由浏览器填写）来识别浏览器</td>
</tr>
<tr>
<td>–without-https_upstream_hash_module</td>
<td>禁用Upstream模块。该模块用于配置负载均衡结构</td>
</tr>
<tr>
<td>–without-https_upstream_ip_hash_module</td>
<td>禁用Upstream模块 该模块提供当Nginx与后端server建立连接时，会根据IP做散列运算来决定与后端哪台server通信，这样可以实现负载均衡</td>
</tr>
<tr>
<td>–without-https_upstream_least_conn_module</td>
<td>禁用Upstream模块 中的 least 负载均衡算法</td>
</tr>
<tr>
<td>–without-https_upstream_keepalive_module</td>
<td>禁用Upstream模块 中的 keepalive 负载均衡算法</td>
</tr>
<tr>
<td>–with-https_perl_module</td>
<td>需要安装 perl # yum install perl-ExtUtils-Embed | # apt-get install libperl-dev</td>
</tr>
<tr>
<td>–with-perl_modules_path=PATH</td>
<td>perl module放置的路径。只有使用了第三方的perl module，才需要配置这个路径</td>
</tr>
<tr>
<td>–with-perl=PATH</td>
<td>perl binary放置的路径。如果配置的Nginx会执行Perl脚本，那么就必须要设置此路径</td>
</tr>
<tr>
<td>–https-log-path=PATH</td>
<td>access日志放置的位置。每个HTTP请求到结束时都会记录 &lt;prefix&gt;/logs/access.log</td>
</tr>
<tr>
<td>–https-client-body-temp-path=PATH</td>
<td> 处理HTTP请求时如果请求的包体需要暂时存放到临时磁盘文件中，则把这样的临时文件放置到该路径下 &lt;prefix&gt;/client_body_temp </td>
</tr>
<tr>
<td>–https-proxy-temp-path=PATH</td>
<td>Nginx作为HTTP反向代理服务器时，上游服务器产生的HTTP包体在需要临时存放到磁盘文件时，这样的临时文件将放到该路径下 &lt;prefix&gt;/proxy_temp </td>
</tr>
<tr>
<td>–https-fastcgi-temp-path=PATH</td>
<td>Fastcgi所使用临时文件的放置目录 &lt;prefix&gt;/fastcgi_temp</td>
</tr>
<tr>
<td>–https-uwsgi-temp-path=PATH</td>
<td>uWSGI所使用临时文件的放置目录 &lt;prefix&gt;/uwsgi_temp</td>
</tr>
<tr>
<td>–https-scgi-temp-path=PATH</td>
<td>SCGI所使用临时文件的放置目录 &lt;prefix&gt;/scgi_temp</td>
</tr>
<tr>
<td>–without-https</td>
<td>禁用HTTP服务</td>
</tr>
<tr>
<td>–without-https-cache</td>
<td>禁用HTTP 缓冲功能</td>
</tr>
<tr>
<td>–with-mail</td>
<td>开启邮件服务代理(mail server proxy)模块,支 持POP3, IMAP4和SMTP。该功能默认禁用</td>
</tr>
<tr>
<td>–with-mail_ssl_module</td>
<td>开启邮件代理服务对SSL的支持。该功能默认禁用</td>
</tr>
<tr>
<td>–without-mail_pop3_module</td>
<td>在邮件代理下禁用POP3功能。在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–without-mail_imap_module</td>
<td>对邮件代理服务器禁用IMAP4模块，在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–without-mail_smtp_module</td>
<td>对于邮件代理服务器禁用SMTP模块，在开启邮件代理模块后该功能默认启用</td>
</tr>
<tr>
<td>–with-google_perftools_module</td>
<td>Google的针对nginx性能调优的工具，需要安装：yum install gperftools gperftools-devel</td>
</tr>
<tr>
<td>–with-cpp_test_module</td>
<td>C预编译器测试模块</td>
</tr>
<tr>
<td>–add-module=PATH</td>
<td>当在Nginx里加入第三方模块时，通过这个参数指定第三方模块的路径</td>
</tr>
<tr>
<td>–with-cc=PATH</td>
<td>C编译器的路径</td>
</tr>
<tr>
<td>–with-cpp=PATH</td>
<td>C预编译器的路径</td>
</tr>
<tr>
<td>–with-cc-opt=OPTIONS</td>
<td>如果希望在Nginx编译期间指定加入一些编译选项，如指定宏或者使用-I加入某些需要包含的目录，这时可以使用该参数达成目的</td>
</tr>
<tr>
<td>–with-ld-opt=OPTIONS</td>
<td>最终的二进制可执行文件是由编译后生成的目标文件与一些第三方库链接生成的，在执行链接操作时可能会需要指定链接参数，–with-ld-opt就是用于加入链接时的参数。例如，如果我们希望将某个库链接到Nginx程序中，需要在这里加入–with-ld-opt=-llibraryName -LlibraryPath，其中libraryName是目标库的名称，libraryPath则是目标库所在的路径</td>
</tr>
<tr>
<td>–with-cpu-opt=CPU</td>
<td>指定CPU处理器架构，只能从以下取值中选择：pentium、pentiumpro、pentium3、pentium4、athlon、opteron、sparc32、sparc64、ppc64</td>
</tr>
<tr>
<td>–without-pcre</td>
<td>如果确认Nginx不用解析正则表达式，也就是说，nginx.conf配置文件中不会出现正则表达式，那么可以使用这个参数</td>
</tr>
<tr>
<td>–with-pcre</td>
<td>强制使用PCRE库</td>
</tr>
<tr>
<td>–with-pcre=DIR</td>
<td>指定PCRE库的源码位置，在编译Nginx时会进入该目录编译PCRE源码</td>
</tr>
<tr>
<td>–with-pcre-opt=OPTIONS</td>
<td>编译PCRE源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-pcre-jit</td>
<td>编译PCRE库支持及时编译</td>
</tr>
<tr>
<td>–with-md5=DIR</td>
<td>指定SHA1库的源码位置，在编译Nginx时会进入该目录编译SHA1源码。 注意：OpenSSL中已经有了SHA1算法的实现。如果已经安装了OpenSSL，那么完全可以使用OpenSSL实现的SHA1算法</td>
</tr>
<tr>
<td>–with-md5-opt=OPTIONS</td>
<td>编译MD5源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-md5-asm</td>
<td>使用MD5的汇编源码</td>
</tr>
<tr>
<td>–with-sha1=DIR</td>
<td>指定SHA1库的源码位置，在编译Nginx时会进入该目录编译SHA1源码。 注意：OpenSSL中已经有了SHA1算法的实现。如果已经安装了OpenSSL，那么完全可以使用OpenSSL实现的SHA1算法</td>
</tr>
<tr>
<td>–with-sha1-opt=OPTIONS</td>
<td>编译SHA1源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-sha1-asm</td>
<td>使用SHA1的汇编源码</td>
</tr>
<tr>
<td>–with-zlib=DIR</td>
<td>指定zlib库的源码位置，在编译Nginx时会进入该目录编译zlib源码。如果使用了gzip压缩功能，就需要zlib库的支持</td>
</tr>
<tr>
<td>–with-zlib-opt=OPTIONS</td>
<td>编译zlib源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-zlib-asm=CPU</td>
<td>指定对特定的CPU使用zlib库的汇编优化功能，目前仅支持两种架构：pentium和pentiumpro</td>
</tr>
<tr>
<td>–with-libatomic</td>
<td>强制使用atomic库。atomic库是CPU架构独立的一种原子操作的实现。它支持以下体系架构：x86（包括i386和x86_64）、PPC64、Sparc64（v9或更高版本）或者安装了GCC 4.1.0及更高版本的架构。</td>
</tr>
<tr>
<td>–with-libatomic=DIR</td>
<td>atomic库所在的位置</td>
</tr>
<tr>
<td>–with-openssl=DIR</td>
<td>指定OpenSSL库的源码位置，在编译Nginx时会进入该目录编译OpenSSL源码。注意：如果Web服务器支持HTTPS，也就是SSL协议，Nginx要求必须使用OpenSSL。</td>
</tr>
<tr>
<td>–with-openssl-opt=OPTIONS</td>
<td>编译OpenSSL源码时希望加入的编译选项</td>
</tr>
<tr>
<td>–with-debug</td>
<td>将Nginx需要打印debug调试级别日志的代码编译进Nginx。这样可以在Nginx运行时通过修改配置文件来使其打印调试日志，这对于研究、定位Nginx问题非常有帮助</td>
</tr>

</tbody></table>

<h4 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h4><p>这里和redis的编译安装比较类似，首先在当前目录（/usr/local/nginx-1.19.2）进行编译。输入make即可</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编译成功之后，就可以安装了，输入以下指令：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ok，安装成功。</p>
<blockquote>
<p> make &amp;&amp; make install</p>
</blockquote>
<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>设置nginx开机启动，只需在rc.local增加启动代码即可。</p>
<p><code>vim /etc/rc.local</code></p>
<p>然后在底部增加<code>/usr/local/nginx/sbin/nginx</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Git-两种方式详细教程</title>
    <url>/post/4370af2f.html</url>
    <content><![CDATA[<h3 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h3><p>  Git — The stupid content tracker, 傻瓜内容跟踪器。Linus Torvalds 是这样给我们介绍 Git 的。<br>  Git 是用于 Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>
<span id="more"></span>

<h3 id="yun安装"><a href="#yun安装" class="headerlink" title="yun安装"></a>yun安装</h3><ol>
<li>在Linux上是有yum安装Git，非常简单，只需要一行命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>输入 git –version查看Git是否安装完成以及查看其版本号<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>yum安装git被安装在<code>/usr/libexec/git-core</code>目录下</li>
</ol>
<h3 id="从github上下载最新的源码编译后安装"><a href="#从github上下载最新的源码编译后安装" class="headerlink" title="从github上下载最新的源码编译后安装"></a>从github上下载最新的源码编译后安装</h3><p>  yum安装简单，但版本太旧，你不好控制。如果想要使用最新版的git，那还是得自己下载源码安装。</p>
<ol>
<li><p>首先我们需要删除旧的Git</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> remove <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>进入<code>git</code>在<code>GitHub</code>上发布版本页面<code>https://github.com/git/git/releases</code> ，这个页面我们可以找到所有git已发布的版本。这里我们选择最新版的<code>tar.gz</code>包。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">https://github.com/git/git/releases<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>下载最新版本的tar.gz的Git到本地电脑上，利用ftp工具将压缩包上传至Linux服务器的<code>/usr/local</code>目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/git/git/archive/v2.28.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>进入<code>/usr/local</code> 目录解压git文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> git-2.28.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>拿到解压后的源码以后我们需要编译源码了，不过在此之前需要安装编译所需要的依赖。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>6、提示，安装编译源码所需依赖的时候，yum自动帮你安装了git，这时候你需要先卸载这个旧版的git。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> remove <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>编译git源码，进入cd <code>/usr/local/git-2.28.0.tar.gz</code> 目录</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">make prefix=/usr/local/git all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>安装git至/usr/local/git路径</p>
<pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">make prefix=/usr/local/git install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>配置环境变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile 

在底部加上如下

<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/git/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>刷新环境变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看Git是否安装完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> <span class="token function">git</span>
<span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<p>  至此，从github上下载最新的源码编译后安装git完成。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-key生成密钥及SSH无密码登录</title>
    <url>/post/16d9a840.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="首先什么是SSH"><a href="#首先什么是SSH" class="headerlink" title="首先什么是SSH"></a>首先什么是SSH</h3>  <div class="note success no-icon"><p>  Secure Shell (SSH) 是一个允许两台电脑之间通过安全的连接进行数据交换的网络协议。通过加密保证了数据的保密性和完整性。SSH采用公钥加密技术来验证远程主机，以及(必要时)允许远程主机验证用户。</p>
</div>
  <span id="more"></span>
<h3 id="SSH的好处"><a href="#SSH的好处" class="headerlink" title="SSH的好处"></a>SSH的好处</h3>  <div class="note success no-icon"><ul>
<li>传统的FTP、Telnet是再网络中明文传送数据、用户帐号和密码，很容易受到中间人攻击。而通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了， 而且也能够防止DNS和IP欺骗。</li>
<li>传输的数据是经过压缩的，所以可以加快传输的速度。 </li>
</ul>
</div>
<h3 id="怎么实现SSH的好处呢？"><a href="#怎么实现SSH的好处呢？" class="headerlink" title="怎么实现SSH的好处呢？"></a>怎么实现SSH的好处呢？</h3>  <div class="note success no-icon"><p>  SSH利用SSH Key来进行前面提到的基于密钥的安全验证。</p>
</div>
<h3 id="SSH-Key是什么？"><a href="#SSH-Key是什么？" class="headerlink" title="SSH-Key是什么？"></a>SSH-Key是什么？</h3>  <div class="note success no-icon"><ul>
<li>SSH-Key 就是一对密钥对。【一个是公钥，一个是私钥】</li>
<li>公钥是给别人用的。私钥是给自己用的。</li>
<li>别人是谁？可以是GitLab服务器。<br> 自己是谁？可以是本地。</li>
<li>举个例子<ul>
<li>本地想要使用git从gitHub/gitlab上拉取代码。</li>
<li>给GitHub/GitLab配置公钥，公钥就可以作为一个加密的箱子，将代码放在箱子里。</li>
<li>被本地拉取到后，使用私钥将加密的箱子打开。就能拿到代码了。</li>
<li>整个过程中，都没有用户名/密码在网络中传输，所以不会给他人拦截到，破解你的数据。</li>
</ul>
</li>
<li>所以，SSH-Key的直观作用，就是【让你方便的登录到 SSH 服务器，而无需输入密码】</li>
</ul>
</div>
<h3 id="SSH-Key的密钥类型"><a href="#SSH-Key的密钥类型" class="headerlink" title="SSH-Key的密钥类型"></a>SSH-Key的密钥类型</h3>  <div class="note success no-icon"><p>  有<code>RSA</code>和<code>DSA</code>两种认证密钥。</p>
</div>
<h2 id="SSH-Key生成"><a href="#SSH-Key生成" class="headerlink" title="SSH-Key生成"></a>SSH-Key生成</h2><h3 id="是否已存在SSH-Key"><a href="#是否已存在SSH-Key" class="headerlink" title="是否已存在SSH-Key"></a>是否已存在SSH-Key</h3>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-al</span> ~/.ssh <span class="token comment"># 用户目录.ssh文件,是否有id_rsa/id_rsa.pub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

  <div style="height: 10px;"></div>
  
<p>     <code>id_rsa</code> （私钥，要保存好，放在本地，私钥可以生产公钥，反之不行。）<br>     <code>id_rsa.pub</code> (公钥，可以用于发送到其他服务器，或者git上。)</p>
<h3 id="新生成SSH-key"><a href="#新生成SSH-key" class="headerlink" title="新生成SSH-key"></a>新生成SSH-key</h3>  <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">ssh-keygen</span> <span class="token value attr-value">-t rsa -C "leeze0216@163.com"</span>

-b：指定密钥长度；
-e：读取openssh的私钥或者公钥文件；
-C：添加注释；
-f：指定用来保存密钥的文件名；
-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；
-l：显示公钥文件的指纹数据；
-N：提供一个新密语；
-P：提供（旧）密语；
-q：静默模式；
-t：指定要创建的密钥类型（如：rsa,dsa)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>     键入命令后，会让你输入密码用来保护你的密钥等，总共三次需要输入的，你都直接三次回车就好！！<br>    【关键是，设置了你自己以后忘了就得重新生成】<br>    【-C 是给你的密钥设置注释，你不想设置为邮箱，设置成别的也行】</p>
<p>     生成后，当前<code>用户的目录</code>下，生成一个<code>.ssh</code>隐藏目录，目录中会有【<code>id_rsa</code>】和【<code>id_rsa.pub</code>】两个文件，一个是<code>私钥</code>，一个是<code>公钥</code>。你现在就可以复制使用了。</p>
<h3 id="上传公钥到服务器"><a href="#上传公钥到服务器" class="headerlink" title="上传公钥到服务器"></a>上传公钥到服务器</h3>  <div class="note no-icon"><p>把<code>id_rsa.pub （公钥）</code>内容，写到服务器上的<code>~/.ssh/authorized_keys</code>文件里</p>
</div>

  <ol>
  
  <li>上传方式</li>
  
<p>  <strong><mark class="label danger">方式一：</mark></strong><br>     这里测试用的服务器地址为：<code>10.211.55.61</code>，用户为：<code>root</code><br>  </p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">ssh-copy-id</span> <span class="token value attr-value">-i ~/.ssh/id_rsa.pub root@10.211.55.61</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>    如果之前登录过，可能会报错，需清理<code>known_hosts</code>对应<code>IP</code>的值<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.ssh/known_hosts      <span class="token comment"># 删除对应ip的相关rsa信息</span>
或者
ssh-keygen <span class="token parameter variable">-R</span> <span class="token number">192.168</span>.1.10 <span class="token comment"># 清除旧的公钥信息</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>    删除<code>know_host.old</code><p></p>
<p>  <strong><mark class="label danger">方式二：</mark></strong><br>     将之前在本地生成的公钥<code>id_rsa.pub</code>,发送到需要<code>无密码登录的服务器</code>，然后将id_rsa.pub的内容追加到服务器的<code>~/.ssh/authorized_keys</code>文件中即可。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">&gt;&gt;</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li>重启SSH服务 </li>
  
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li> 测试免密登录服务器</li>
  
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@10.211.55.61<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code>ssh  -o StrictHostKeyChecking=no  192.168.xxx.xxx</code></p>
  <li> 设置ssh无密码访问git仓库</li>
  
  <div class="note no-icon"><p>将本地<code>id_rsa.pub</code>的内容添加到git仓库的 <code>SSH公钥 </code>中。</p>
</div>
<p>  测试ssh无密码访问git仓库：<code>ssh -T git@gitee.com</code></p>
  </ol>
  
<h2 id="Git配置多个SSH-Key"><a href="#Git配置多个SSH-Key" class="headerlink" title="Git配置多个SSH-Key"></a>Git配置多个SSH-Key</h2><ol>

<li> 生成 gitee SSH-Key </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$</span> <span class="token value attr-value">ssh-keygen -t rsa -C 'git@gitee.com' -f ~/.ssh/gitee_id_rsa</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 生成 github SSH-Key </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">$</span> <span class="token value attr-value">ssh-keygen -t rsa -C 'git@github.com' -f ~/.ssh/github_id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 添加配置文件，在 ~/.ssh 目录下新建一个 config 文件 </li>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># gitee</span>
<span class="token key attr-name">Host</span> <span class="token value attr-value">gitee.com</span>
<span class="token key attr-name">HostName</span> <span class="token value attr-value">gitee.com</span>
<span class="token key attr-name">PreferredAuthentications</span> <span class="token value attr-value">publickey</span>
<span class="token key attr-name">IdentityFile</span> <span class="token value attr-value">~/.ssh/gitee_id_rsa</span>
<span class="token comment"># github</span>
<span class="token key attr-name">Host</span> <span class="token value attr-value">github.com</span>
<span class="token key attr-name">HostName</span> <span class="token value attr-value">github.com</span>
<span class="token key attr-name">PreferredAuthentications</span> <span class="token value attr-value">publickey</span>
<span class="token key attr-name">IdentityFile</span> <span class="token value attr-value">~/.ssh/github_id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置文件参数</span>
 <span class="token key atrule">Host</span> <span class="token punctuation">:</span> Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）
 <span class="token key atrule">HostName</span> <span class="token punctuation">:</span> 要登录主机的主机名（建议与Host一致）
 <span class="token key atrule">User</span> <span class="token punctuation">:</span> 登录名（如gitlab的username）
 <span class="token key atrule">IdentityFile</span> <span class="token punctuation">:</span> 指明上面User对应的identityFile路径
 <span class="token key atrule">Port</span><span class="token punctuation">:</span> 端口号（如果不是默认22号端口则需要指定）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<li> 测试 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com
$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下Jira8.x版本安装与破解</title>
    <url>/post/afb30e04.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   JIRA 是 Atlassian 公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。</p>
<span id="more"></span>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li>Jdk1.8以上：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">jdk8</a> ，<a href="https://www.oracle.com/java/technologies/javase-downloads.html">其他</a></li>
<li>Mysql驱动：<a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar">mysql-connector-java-5.1.49.jar</a> , <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/">其他</a></li>
<li>JIRA安装包：<a href="https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-8.5.7-x64.bin">atlassian-jira-software-8.5.7-x64.bin</a> , <a href="https://www.atlassian.com/zh/software/jira/download/data-center">其他</a></li>
<li>破解包：<a href="https://gitee.com/pengzhile/atlassian-agent/attach_files/283101/download">atlassian-agent-v1.2.3</a>  , <a href="https://gitee.com/pengzhile/atlassian-agent/releases">其他1</a> ，<a href="https://www.cnblogs.com/caibao666/p/14992713.html">其他2</a>  </li>
<li>机子分配的内存适当大些。</li>
</ol>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>   先把上面下载的软件包放到同一目录下，比如<code>/tmp</code>目录下，然后输入下面的命令进行安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> atlassian-agent-v1.2.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./atlassian-jira-software-8.5.7-x64.bin <span class="token comment"># 下面执行的是默认的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/post/afb30e04/jira-001.png" class="" title="JIRA安装图">

<p>  安装路径：    <code>/opt/atlassian/jira</code><br>  数据存放路径：<code>/var/atlassian/application-data/jira</code><br>  HTTP Port:  <code>8080</code><br>  RMI Port:    <code>8005</code></p>
<h4 id="复制包"><a href="#复制包" class="headerlink" title="复制包"></a>复制包</h4><p>   复制驱动包、破解包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> atlassian-agent-v1.2.3/atlassian-agent.jar /home/jira1/
<span class="token function">cp</span> atlassian-agent-v1.2.3/atlassian-agent.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/
<span class="token function">cp</span> mysql-connector-java-5.1.49.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ol> 
<li>破解：<font color="LightCoral" size="3">修改setenv.sh</font></li>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">vi /opt/atlassian/jira/bin/setenv.sh
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> export JAVA_OPTS # 70行的(其实，不用删的，嘿嘿，我是为了突出修改)
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> export JAVA_OPTS="-javaagent:/home/jira1/atlassian-agent.jar ${JAVA_OPTS}"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div style="height: 10px;"></div>
<li>个人习惯，把Java改了,默认<font color="LightCoral" size="3">OpenJDK</font>,改成<font color="orangered" size="3">Java(TM) SE </font></li>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"># DO NOT remove the following line
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> JAVA_HOME="/usr/java/jdk1.8.0_261-amd64"; export JAVA_HOME
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> JAVA_HOME="/opt/atlassian/jira/jre"; export JAVA_HOME</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div style="height: 10px;"></div>
<li>更改端口（默认8080）</li>
<font color="LightCoral" size="3">lsof -i:8080</font>，<font color="LightCoral" size="3">ss -tanlp </font>, 如果被占用
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/atlassian/jira/conf/server.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
将 <font color="LightCoral" size="3">Server port（8005）</font> and the <font color="LightCoral" size="3">Connector port （8080）</font> 改了。

<div style="height: 10px;"></div>
<li> 配置jira_home（默认不做更改）</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/atlassian/jira/atlassian-jira/WEB-INF/classes/jira-application.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<font color="red" size="2">（路径需根据实际情况配置，而且需要注意此路径配置不能和安装软件同一个目录，否则报错）</font>

</ol>

<h4 id="启动Jira"><a href="#启动Jira" class="headerlink" title="启动Jira"></a>启动Jira</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/atlassian/jira/bin/start-jira.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-n</span> <span class="token number">500</span> /opt/atlassian/jira/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h4><p>   访问地址：<a href="http://10.211.55.61:8080/">http://10.211.55.61:8080</a></p>
<img data-src="/post/afb30e04/jira-002.png" class="" title="中文">
<img data-src="/post/afb30e04/jira-003.png" class="" title="自定义">

<p>   创建数据库，如果是选择Mysql，建议使用Mysql5.6或者Mysql5.7，这样不容易出错。另外在创建数据库时建议选择UTF8编码，目前不支持UTF8MB4。<a href="https://confluence.atlassian.com/adminjiraserver085/connecting-jira-applications-to-mysql-5-7-981154582.html">参考</a></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> jiradb <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>   如果，想添加DB用户的话：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> jira<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'jira'</span><span class="token variable">@'%'</span> identifiedby <span class="token string">'jira'</span><span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span><span class="token string">'jira'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>   配置DB数据，并测试，如下图：</p>
<img data-src="/post/afb30e04/jira-004.png" class="" title="DB配置">
<p>   测试OK，点击<code>下一步</code>:</p>
<img data-src="/post/afb30e04/jira-005.png" class="" title="DB配置">
<p>   此时，发现服务停止，<code>tail -f -n 500 /opt/atlassian/jira/logs/catalina.out</code>，后台报错：</p>
<blockquote>
<p>   WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting <code>useSSL=false</code>, or set useSSL=true and provide truststore for server certificate</p>
</blockquote>
<p>   查看<code>/var/atlassian/application-data/jira</code>，新生成<code>dbconfig.xml</code>，<code>原先没有的</code>。</p>
<p>   解决：<a href="https://community.atlassian.com/t5/Jira-Core-questions/JIRA-and-MySql-5-7-with-SSL/qaq-p/1251720">参考1</a> ， <a href="https://community.atlassian.com/t5/Jira-questions/useSSL-false-with-Jira-ServiceDesk/qaq-p/1088212">参考2</a> </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /var/atlassian/application-data/jira/dbconfig.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>   DB的URL末尾加上<code>&amp;amp;useSSL=false</code>，我们习惯加<code>&amp;</code>，但是这里却是<code>&amp;amp;</code>。</p>
<img data-src="/post/afb30e04/jira-006.png" class="" title="SSL">

<p>   重新启动：<code>/opt/atlassian/jira/bin/start-jira.sh</code></p>
<img data-src="/post/afb30e04/jira-007.png" class="" title="Title+URL">

<img data-src="/post/afb30e04/jira-008.png" class="" title="KEY">

<p>   根据Server ID 生成license Key：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/atlassian/jira/jre/bin/java <span class="token parameter variable">-jar</span> /home/jira1/atlassian-agent.jar <span class="token parameter variable">-p</span> jira <span class="token parameter variable">-m</span> jira@jira.com <span class="token parameter variable">-n</span> jira <span class="token parameter variable">-o</span> https://jira.com <span class="token parameter variable">-s</span> BFZ0-PD41-I9AX-YXDP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<br>
<div class="note default no-icon"><p>-p jira(安装的是jira产品)，具体的可以根据-p进行参考<br>-m <a href="mailto:jira@jira.com">jira@jira.com</a>(随意写)<br>-n jira(随意写)<br>-o <a href="https://jira.com/">https://jira.com</a> (随意写)<br>-s BFZ0-PD41-I9AX-YXDP (即jira显示的服务器ID)</p>
</div>
<br>

<img data-src="/post/afb30e04/jira-009.png" class="" title="KEY">
<p>   复制生成的KEY，点击<code>Next</code>：</p>
<img data-src="/post/afb30e04/jira-010.png" class="" title="KEY">
<p>   创建账户：</p>
<img data-src="/post/afb30e04/jira-011.png" class="" title="Admin">
<p>   Email配置，跳过</p>
<img data-src="/post/afb30e04/jira-012.png" class="" title="Email">

<p>。。。。。。。。。</p>
<h4 id="重配实例"><a href="#重配实例" class="headerlink" title="重配实例"></a>重配实例</h4><p>   如果页面配置失败或者想要重新配置实例，可以把原来的实例删除：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /var/atlassian/application-data/jira/* <span class="token parameter variable">-rf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div style="height: 10px;"></div>
   然后再重新进行Web页面配置。



<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>虚拟机装的，原先内存2G，老报memory问题，关闭服务</li>
<div style="height: 10px;"></div>
<div class="note danger"><p>error=’Cannot allocate memory’ </p>
</div>

<p>把本地内存最好调大点,我任性给了6G，哈哈。。。</p>
<img data-src="/post/afb30e04/jira-013.png" class="" title="VM">


<p><code>vi /opt/atlassian/jira/bin/setenv.sh</code></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">JVM_MINIMUM_MEMORY</span><span class="token punctuation">=</span><span class="token value attr-value">"768m"</span>
<span class="token key attr-name">JVM_MAXIMUM_MEMORY</span><span class="token punctuation">=</span><span class="token value attr-value">"4096m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</ol>

<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><div style="height: 10px;"></div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/atlassian/application-data/jira/dbconfig.xml    <span class="token comment"># DB设置</span>

/opt/atlassian/jira/bin/start-jira.sh                <span class="token comment"># 启动</span>

<span class="token function">tail</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-n</span> <span class="token number">500</span> /opt/atlassian/jira/logs/catalina.out <span class="token comment"># 日志</span>

<span class="token function">vi</span> /opt/atlassian/jira/conf/server.xml               <span class="token comment"># 端口设置</span>

/opt/atlassian/jira/                                 <span class="token comment"># 安装路径</span>

/var/atlassian/application-data/jira                 <span class="token comment"># 数据存放路径</span>

/opt/atlassian/jira/atlassian-jira/WEB-INF/classes/database-defaults
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac正确的安装和使用nvm</title>
    <url>/post/c0a81ac4.html</url>
    <content><![CDATA[<h3 id="了解nvm"><a href="#了解nvm" class="headerlink" title="了解nvm"></a>了解nvm</h3><p>  目前主流的node版本管理工具有两种，nvm和n。两者差异挺大的。</p>
<p>  总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。</p>
<span id="more"></span>


<h3 id="认识nvm、node、npm"><a href="#认识nvm、node、npm" class="headerlink" title="认识nvm、node、npm"></a>认识nvm、node、npm</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol>

<li>nvm：nodejs 版本管理工具。</li>
  也就是说：一个 nvm 可以管理很多 node 版本和 npm 版本。

<p>  这个技术出现的原因， 是由于不同的项目node版本也不同，有的是5.0.1， 有的是6.3.2。 如果node出现版本不对，运行 某个应用时，很可能就会遇到各种莫名其妙的问题 。</p>
<li>nodejs：在项目开发时的所需要的代码库。</li>
<li>npm：nodejs 包管理工具。</li>
  在安装的 nodejs 的时候，npm 也会跟着一起安装，它是包管理工具。

<p>  npm 管理 nodejs 中的第三方插件。他的作用与Ruby中的 bundler及Java中的maven相同，都是对第三方依赖进行管理的。</p>
</ol>
  
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>     nvm 管理 nodejs 和 npm 的版本</p>
<p>     npm 可以管理 nodejs 的第三方插件</p>
   <img data-src="/post/c0a81ac4/nvmMac001.png" class="" title="nvm、node、npm关系图">


<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  这里主要介绍mac的安装(linux可以参照),windows系统的话可以参考<a href="https://cnodejs.org/topic/5338c5db7cbade005b023c98">windows</a></p>
<h4 id="不推荐的安装方法"><a href="#不推荐的安装方法" class="headerlink" title="不推荐的安装方法"></a>不推荐的安装方法</h4><p>  一开始我是使用homebrew来安装的,安装命令如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> nvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装完后，为了让你可以直接在shell使用nvm指令，必须在你的<code> .bash_profile</code> 加入以下这行（习惯把设定放在.bashrc的人可以把以下的.bash_profile改成.bashrc）(注:如果没有这个文件,可以touch创建)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> nvm<span class="token variable">)</span></span>/nvm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  或者直接输入以下这行来加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"source <span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> nvm<span class="token variable">)</span></span>/nvm.sh"</span> <span class="token operator">&gt;&gt;</span> .bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  记得重新source你的 .bash_profile 来让设定生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">.</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  OK，以上就完成了nvm的安裝。</p>
<p>  我们来装一下 node v5.12.0</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  安装成功后,使用nvm use 来切换版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use v5.12.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如，出现错误如下:</p>
 <div class="note danger no-icon"><p>nvm is not compatible with the npm config “prefix” option: currently set to “/Users/fabian/.nvm/versions/node/v0.12.7”<br>Run <code>nvm use --delete-prefix v4.6.2</code> to unset it.
 </p>
</div>
<p>  所以只能安装提示,使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use --delete-prefix v4.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  成功切换。</p>
<p>  至于为什么用homebrew安装会出现上面的问题,可参考Github上的一个<a href="https://github.com/nvm-sh/nvm/issues/855">issue</a>。</p>
<p>  查看<a href="https://github.com/nvm-sh/nvm">nvm文档</a>发现:文档中Installation 那一小节倒数第二行有一句Homebrew installation is not supported.，由此可见，没事儿还是要多看看文档。</p>
<h4 id="推荐的安装方法"><a href="#推荐的安装方法" class="headerlink" title="推荐的安装方法"></a>推荐的安装方法</h4><h5 id="卸载已安装到全局的-node-npm"><a href="#卸载已安装到全局的-node-npm" class="headerlink" title="卸载已安装到全局的 node/npm"></a><em><strong>卸载已安装到全局的 node/npm</strong></em></h5><p>  如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>
<p>  node 命令在 <code>/usr/local/bin/node</code> ，</p>
<p>  npm 命令在全局 <code>node_modules</code> 目录中，具体路径为 <code>/usr/local/lib/node_modules/npm</code></p>
<p>  安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span>

<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/lib/node_modules <span class="token comment">#删除全局 node_modules 目录</span>
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/node <span class="token comment">#删除 node</span>
<span class="token builtin class-name">cd</span>  /usr/local/bin <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"../lib/node_modules/"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $9}'</span><span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span> <span class="token comment">#删除全局 node 模块注册的软链</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a><em><strong>安装 nvm</strong></em></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <code>如果报错</code>，解决办法：通过修改<mark> hosts </mark>解决此问题。</p>
<p>  查询真实IP，在 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询 raw.githubusercontent.com 的真实IP。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改hosts</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts

<span class="token comment">#添加如下内容：</span>
<span class="token number">199.232</span>.28.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  安装完成后请重新打开终端环境，Mac 下推荐使用 oh-my-zsh 代替默认的 bash shell。 安装完成后,发现使用 <strong><mark class="label danger">nvm install stable 安装node速度很慢</mark></strong> ,原因嘛,大概大家都知道我大天朝的国情。 接下来介绍如何使用国内镜像快速安装node: 把环境变量 <code>NVM_NODEJS_ORG_MIRROR</code>, 那么我建议你加入到<code> .bash_profile</code> 文件中:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nvm</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  然后你可以继续非常方便地安装各个版本的 node 了.</p>
<p><mark>查看</mark><font color="LightCoral" size="4"> node  </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm ls-remote     <span class="token comment"># 远端版本</span>
nvm <span class="token function">ls</span>            <span class="token comment"># 本地已安装的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p><mark>安装</mark><font color="LightCoral" size="4"> node </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token function">node</span>                            <span class="token comment"># 安装最新版本</span>
nvm <span class="token function">install</span> <span class="token number">6.14</span>.4 <span class="token comment"># or 10.10.0, 8.9.1, etc # 安装指定版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p><mark>使用</mark><font color="LightCoral" size="4"> node </font>版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm use <span class="token function">node</span>    <span class="token comment"># 使用最新版本</span>
nvm use <span class="token number">12.13</span>.0 <span class="token comment"># 使用指定版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><mark>查看</mark><font color="LightCoral" size="4"> node  </font>版本 <em><mark class="label warning">安装位置</mark></em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">which</span> <span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用-cnpm-加速-npm"><a href="#使用-cnpm-加速-npm" class="headerlink" title="使用 cnpm 加速 npm"></a><em><strong>使用 cnpm 加速 npm</strong></em></h5><p>  同理 nvm , npm 默认是从国外的源获取和下载包信息, 不慢才奇怪. 可以通过简单的 —registry 参数, 使用国内的镜像 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> :</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org <span class="token function">install</span> koa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  于是屏幕又哗啦哗啦地一大片输出</p>
<div class="note default no-icon"><p>$ npm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> install koa<br>npm http GET <a href="https://registry.npm.taobao.org/koa">https://registry.npm.taobao.org/koa</a><br>npm http 200 <a href="https://registry.npm.taobao.org/koa">https://registry.npm.taobao.org/koa</a><br>…<br>npm http 200 <a href="https://registry.npm.taobao.org/negotiator">https://registry.npm.taobao.org/negotiator</a><br>npm http 200 <a href="https://registry.npm.taobao.org/keygrip">https://registry.npm.taobao.org/keygrip</a><br>koa<a href="/user/0">@0</a>.5.2 node_modules/koa<br>├── koa-compose<a href="/user/2">@2</a>.2.0<br>├── statuses<a href="/user/1">@1</a>.0.2<br>├── finished<a href="/user/1">@1</a>.1.1<br>├── escape-html<a href="/user/1">@1</a>.0.1<br>├── only<a href="/user/0">@0</a>.0.2<br>├── debug<a href="/user/0">@0</a>.8.0<br>├── fresh<a href="/user/0">@0</a>.2.2<br>├── type-is<a href="/user/1">@1</a>.0.1<br>├── delegates<a href="/user/0">@0</a>.0.3<br>├── mime<a href="/user/1">@1</a>.2.11<br>├── co<a href="/user/3">@3</a>.0.5<br>├── accepts<a href="/user/1">@1</a>.0.1 (negotiator<a href="/user/0">@0</a>.4.2)<br>└── cookies<a href="/user/0">@0</a>.4.0 (keygrip<a href="/user/1">@1</a>.0.0)</p>
</div>

<p>  但是毕竟镜像跟官方的 npm 源还是会有一个同步时间差异, 目前 cnpm 的默认同步时间间隔是 15 分钟. 如果你是模块发布者, 或者你想马上同步一个模块, 那么推荐你安装 cnpm cli:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org <span class="token function">install</span> cnpm <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  通过 cnpm 命令行, 你可以快速同步任意模块:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm <span class="token function">sync</span> koa connect mocha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  呃, 我就是不想安装 cnpm cli 怎么办? 哈哈, 早就想到你会这么懒了, 于是我们还有一个 web 页面:</p>
<p>  例如我想马上同步 koa, 直接打开浏览器: <a href="https://npm.taobao.org/sync/koa">https://npm.taobao.org/sync/koa</a></p>
<p>  或者你是命令行控, 通过 open 命令打开:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">open</span> https://npm.taobao.org/sync/koa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果你安装的模块依赖了 C++ 模块, 需要编译, 肯定会通过 node-gyp 来编译, node-gyp 在第一次编译的时候, 需要依赖 node 源代码, 于是又会去 node dist 下载, 于是大家又会吐槽, 怎么 npm 安装这么慢…</p>
<p>  好吧, 于是又要提到 <code>--disturl</code> 参数, 通过七牛的镜像来下载:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org <span class="token parameter variable">--disturl</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node <span class="token function">install</span> microtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  再次要提到 cnpm cli, 它已经默认将 –registry 和 –disturl 都配置好了, 谁用谁知道 如果不想使用cnpm cli，可以</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span class="token parameter variable">--global</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist <span class="token parameter variable">--global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  查看npm的配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token function">ls</span> <span class="token comment"># npm的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="nvm常用命令"><a href="#nvm常用命令" class="headerlink" title="nvm常用命令"></a>nvm常用命令</h3><ol>
<li> nvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</version></li>
<li> nvm uninstall <version> ## 删除已安装的指定版本，语法与install类似</version></li>
<li> nvm use <version> ## 切换使用指定的版本node</version></li>
<li> nvm ls ## 列出所有安装的版本</li>
<li> nvm ls-remote ## 列出所以远程服务器的版本（官方node version list）</li>
<li> nvm current ## 显示当前的版本</li>
<li> nvm alias <name> <version> ## 给不同的版本号添加别名</version></name></li>
<li> nvm unalias <name> ## 删除已定义的别名</name></li>
<li> nvm reinstall-packages <version> ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li>
</ol>
<h3 id="附-MAC-的-bash-profile"><a href="#附-MAC-的-bash-profile" class="headerlink" title="附: MAC 的 .bash_profile"></a>附: MAC 的 <code>.bash_profile</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment"># This loads nvm</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment"># This loads nvm bash_completi    on</span>
 
<span class="token comment"># nvm 改为国内node镜像</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>https://npm.taobao.org/mirrors/node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目添加外部Jar包</title>
    <url>/post/afccf6ff.html</url>
    <content><![CDATA[<p>  SpringBoot项目引入外部jar包是非常方便的。</p>
<p>  1，首先在src同级目录建一个lib文件夹，将第三方jar包放到这个文件内，比如我将ojdbc6.jar 这个jar包放到这个地方。<br>  2，接着我们需要在pom.xml文件里配置jar的maven坐标，不过这个坐标比较特殊，我们需要直接定位到我们上一步添加的文件，而不是从Maven仓库里面去下载，以ojdbc6.jar为例，配置依赖如下：</p>
<span id="more"></span>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.oracle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ojdbc6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>12.1.0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${project.basedir}/lib/ojdbc6.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这里比较特殊的是<code>systemPath</code>，常见的Maven坐标是没有这个的，这里面直接指定该jar的相对路径（相对项目的根目录），这样Maven在编译的时候就不会从中央仓库里面去下载该jar包了。但只配置这个还不行，还需要配置SpringBoot编译时插件属性<code>includeSystemScope</code>，具体如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  上面配置完毕，我们就可以直接执行<code>mvn clean install</code>进行打包，然后我们查看打好的jar包里面包含的jar包，会发现ojdbc6.jar这个包已经正确被包含进去了。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现高精度计算</title>
    <url>/post/26f63a55.html</url>
    <content><![CDATA[<h4 id="js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题"><a href="#js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题" class="headerlink" title="js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题"></a>js实现高精度计算，金钱价格计算，避免数字计算精度丢失问题</h4><p>   下载地址：<a href="/download/js-big-decimal.min.js">js-big-decimal.min.js</a><br>       <a href="https://static.xiaosige.com/download/js-big-decimal.min.js">js-big-decimal.min.js(<code>推荐</code>)</a></p>
<span id="more"></span>

<p>   使用方法：</p>
<ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/js-big-decimal.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<br>

<h5 id="加法："><a href="#加法：" class="headerlink" title="加法："></a>加法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.059"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"7.559595"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> MathContext<span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="减法："><a href="#减法：" class="headerlink" title="减法："></a>减法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.123123213120"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.55555555"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="乘法："><a href="#乘法：" class="headerlink" title="乘法："></a>乘法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.21312312312"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="除法："><a href="#除法：" class="headerlink" title="除法："></a>除法：</h5><ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.4123123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1231231232"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> def<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Decimal</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下mongo启动关闭重启方法</title>
    <url>/post/91eed2.html</url>
    <content><![CDATA[<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>  启动<code>mongodb</code>首先要指定mongo的<code>数据</code>目录和<code>日志</code>文件路径，如:  <code>/data/mongodb/</code>,<code>/var/log/mongodb/mongodb.log</code><br>  启动命令： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongdb/bin/mongod <span class="token parameter variable">-port</span> <span class="token number">27017</span> <span class="token parameter variable">--dbpath</span> /data/mongodb/ <span class="token parameter variable">--logpath</span> /var/mongodb/mongodb.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h4 id="通过配置文件配置："><a href="#通过配置文件配置：" class="headerlink" title="通过配置文件配置："></a>通过配置文件配置：</h4><p>  <code>vim mongodb.conf </code>   </p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#数据库路径</span>
<span class="token key attr-name">dbpath</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/mongodb/data/</span>

<span class="token comment">#日志输出文件路径</span>
<span class="token key attr-name">logpath</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/mongodb/log/mongodb.log</span>

<span class="token comment">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span>
<span class="token key attr-name">logappend</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#启用日志文件，默认启用</span>
<span class="token key attr-name">journal</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span>
<span class="token key attr-name">quiet</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>

<span class="token comment">#是否后台启动，有这个参数，就可以实现后台运行</span>
<span class="token key attr-name">fork</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#端口号 默认为27017</span>
<span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">27017</span>

<span class="token comment">#远程连接</span>
<span class="token key attr-name">bind_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  启动命令： </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/loca/mongodb/bin/mongod <span class="token parameter variable">-f</span> mongodb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><ol>
<li> 使用<font color="LightCoral" size="4"><b>--fork</b></font> 选项将会通知 mongod 在后台运行   </li> 

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongodb/bin/mongod  <span class="token parameter variable">-port</span> <span class="token number">10001</span> <span class="token parameter variable">--dbpath</span> /data/mongodb/ <span class="token parameter variable">--logpath</span> /var/mongodb/mongodb.log <span class="token parameter variable">--fork</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<li> 使用<font color="LightCoral" size="4"><b>&amp;</b></font>后台启动      </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/mongodb/bin/mongod  <span class="token parameter variable">-port</span> <span class="token number">10001</span> <span class="token parameter variable">--dbpath</span> /data/mongodb/ <span class="token parameter variable">--logpath</span> /var/mongodb/mongodb.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><ol>
<li> pkill mongod</li>

<li> 进入mongo shell，运行： </li>

<pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span><span class="token function">shuidownServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目配置多数据源</title>
    <url>/post/a810e572.html</url>
    <content><![CDATA[<p>  由于对接的项目比较老，要与其数据库进行交互，而且数据库类型不一致，所以我们的项目需要支持多数据源（接口平台），这个还是非常好配置的，SpringBoot给我们提供了多数据源配置的方案，并且每个数据源对应一个JdbcTemplate，这样就方便很多，具体配置如下：</p>
<span id="more"></span>

<h4 id="application-properties文件内配置多数据源信息"><a href="#application-properties文件内配置多数据源信息" class="headerlink" title="application.properties文件内配置多数据源信息"></a>application.properties文件内配置多数据源信息</h4><p>  首先在application.properties或者yml文件内配置多数据源信息，具体配置如下：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># ds1数据源配置</span>
<span class="token key attr-name">spring.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>
<span class="token key attr-name">spring.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/zz?useUnicode=true&amp;characterEncoding=utf8</span>
<span class="token key attr-name">spring.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">zz</span>
<span class="token key attr-name">spring.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">zz</span>

<span class="token comment"># ds2数据源配置</span>
<span class="token key attr-name">spring.datasource.ds2.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">oracle.jdbc.driver.OracleDriver</span>
<span class="token key attr-name">spring.datasource.ds2.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:oracle:thin:@localhost:1521:orcl</span>
<span class="token key attr-name">spring.datasource.ds2.username</span><span class="token punctuation">=</span><span class="token value attr-value">system</span>
<span class="token key attr-name">spring.datasource.ds2.password</span><span class="token punctuation">=</span><span class="token value attr-value">050508</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="指定数据源与配置信息"><a href="#指定数据源与配置信息" class="headerlink" title="指定数据源与配置信息"></a>指定数据源与配置信息</h4><p>  上面我们配置好了数据源，但是已经不是SpringBoot默认的数据源配置信息了，所以我们还要指定不同的数据源实例对应哪个配置信息，配置如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 多数据源配置
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">/**
   * ds1数据源配置
   *
   * @return 配置信息
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1DataSourceProperties"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.ds1"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">ds1DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds1数据源
   *
   * @param dataSourceProperties 配置信息
   * @return 数据源实例
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1DataSource"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">ds1DataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1DataSourceProperties"</span><span class="token punctuation">)</span> <span class="token class-name">DataSourceProperties</span> dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds2数据源配置
   *
   * @return 配置信息
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2DataSourceProperties"</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.ds2"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">ds2DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * ds2数据源
   *
   * @param dataSourceProperties 配置信息
   * @return 数据源实例
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2DataSource"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">ds2DataSource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2DataSourceProperties"</span><span class="token punctuation">)</span> <span class="token class-name">DataSourceProperties</span> dataSourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="配置JdbcTemplate与数据源关系"><a href="#配置JdbcTemplate与数据源关系" class="headerlink" title="配置JdbcTemplate与数据源关系"></a>配置JdbcTemplate与数据源关系</h4><p>  配置完数据源信息，我们想直接用不同的JdbcTemplate来操作不同的数据库，所以我们还要创建几个<code>JdbcTemplate</code>实例，并且这些实例与不同的数据源进行绑定，配置信息如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * JdbcTemplate 多数据源配置
 *
 * @author 明山
 * @see DataSourceConfig
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateDataSourceConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">/**
   * ds1 JdbcTemplate 配置
   *
   * @param dataSource 数据源
   * @return JdbcTemplate
   */</span>
  <span class="token annotation punctuation">@Primary</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds1JdbcTemplate"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   *ds2 JdbcTemplate 配置
   *
   * @param dataSource 数据源
   * @return JdbcTemplate
   */</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ds2JdbcTemplate"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">hdwmsJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2DataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用JdbcTemplate"><a href="#使用JdbcTemplate" class="headerlink" title="使用JdbcTemplate"></a>使用JdbcTemplate</h4><p>  配置完后，我们可以直接在具体的类中使用了，使用方式如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds1JdbcTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> ds1JdbcTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"ds2JdbcTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> ds2JdbcTemplate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置静态资源不重启即时生效</title>
    <url>/post/f3f7b1c5.html</url>
    <content><![CDATA[<p>在项目中，用到了模板引擎,每次修改一个 html，要重启才生效,配置不重启也实时生效,可以提供开发效率</p>
<span id="more"></span>

<p>在<code>pom</code>中直接引入依赖<code>spring-boot-devtools</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>automatically.properties</code> 中 <code>开启application.properties</code> 开启页面热价值</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#页面热加载</span>
<span class="token key attr-name">spring.thymeleaf.cache</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>点击<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Build-Execution-Deplyment</code> -&gt; <code>Compiler</code>，选中打勾 <code>Build project</code></p>
<img data-src="/post/f3f7b1c5/springbootstatic.png" class="" title="设置开启实时生效"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客实现自动部署阿里云服务器</title>
    <url>/post/dd42c2af.html</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li> 搭建Nginx服务器：</li>

<p>   参考：<a href="/post/69813a0e.html" title="Linux安装Nginx--两种方式">Linux安装Nginx--两种方式</a></p>
<li> 搭建Git环境：</li>

<p>   参考：<a href="/post/4370af2f.html" title="Linux安装Git-两种方式详细教程">Linux安装Git-两种方式详细教程</a></p>
</ol>

<span id="more"></span>    

<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>  在<code>/etc/nginx/vhosts</code>下，新建<code>blog.conf</code>：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>    <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/blog</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span> aliyun-ip*****</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">index</span> index.html index.htm index.php default.html default.htm default.php</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> ~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$</span>
        <span class="token punctuation">{</span>
           <span class="token directive"><span class="token keyword">access_log</span>   <span class="token boolean">off</span></span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">1d</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token directive"><span class="token keyword">location</span> ~ .*\.(js|css|txt|xml)?$</span>
        <span class="token punctuation">{</span>
           <span class="token directive"><span class="token keyword">access_log</span>   <span class="token boolean">off</span></span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">12h</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">{</span>
           <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ =404</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/blog.access.log combined</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/blog.error.log warn</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>chown -R git:gitgroup blog</code></p>
<h3 id="GIT账户-组"><a href="#GIT账户-组" class="headerlink" title="GIT账户/组"></a>GIT账户/组</h3><p>  接下来我们 创建一个git用户组和用户，用来运行git服务：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">groupadd gitgroup
useradd git <span class="token operator">-</span>g gitgroup
passwd git
<span class="token string">''''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="禁用shell登录"><a href="#禁用shell登录" class="headerlink" title="禁用shell登录"></a>禁用shell登录</h3><p>  为安全考虑，git用户不允许登录shell，从而只能用 git clone，git push 等登录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells // 查看 git-shell 是否在登录方式里面
<span class="token function">which</span> git-shell // 查看是否安装

<span class="token function">vi</span> /etc/shells
添加上2步显示出来的路径，通常在 /usr/bin/git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  修改<code>/etc/passwd</code>中的权限:</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">vi /etc/passwd

<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> git:x:500:500::/home/git:/bin/bash
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> git:x:500:500::/home/git:/usr/local/git/bin/git-shell</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这样用户用git账户ssh连接后只能使用git命令了.<br>  <b><code>各种配置配完再禁</code></b></p>
<h3 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h3><p>  首先在用户本地主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"aliyun_test_git_id_rsa"</span> <span class="token parameter variable">-f</span> aliyun_test_git_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  把本地生成的公钥aliyun_test_git_id_rsa.pub，导入到远程服务器<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。<br>  远程服务器如果没有该文件创建它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span>  <span class="token comment"># 这步很重要，不切换用户后面会很麻烦</span>

<span class="token builtin class-name">cd</span> /home/git/
<span class="token function">mkdir</span> .ssh
<span class="token function">chmod</span> <span class="token number">755</span> .ssh
<span class="token function">touch</span> .ssh/authorized_keys
<span class="token function">chmod</span> <span class="token number">644</span> .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  把本地公钥复制到远程服务器（<code>确保相应的权限</code>）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> aliyun_test_git_id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys
<span class="token comment"># 确保权限</span>
<span class="token comment"># chmod 700 ~/.ssh -R;</span>
<span class="token comment"># chmod 600 ~/.ssh/authorized_keys</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="打开-RSA-认证"><a href="#打开-RSA-认证" class="headerlink" title="打开 RSA 认证"></a>打开 RSA 认证</h3><p>  然后就可以去Git服务器上添加你的公钥用来验证你的信息了。在Git服务器上首先需要将<code>/etc/ssh/sshd_config</code>中将RSA认证打开，即：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RSAAuthentication <span class="token function">yes</span>
PubkeyAuthentication <span class="token function">yes</span>
AuthorizedKeysFile .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  保存并重启 sshd 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/rc.d/init.d/sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"leeze"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"leeze0216@163.com"</span>

<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">false</span>  // 禁用自动转换，这个不设置后面上传时会出现警告，如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/dd42c2af/git-warning.jpg" class="" title="warning">

<h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><p>  <code>su git  # 这步很重要，不切换用户后面会很麻烦</code><br>  首先我们选定一个目录作为Git仓库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/git
<span class="token function">mkdir</span> gitrepos
<span class="token comment"># chown git:gitgroup gitrepo/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  在服务器初始化一个远程 Git 裸仓库 (git init –bare)<br>  裸仓库与 git init 初使化的仓库不太一样，裸仓库其实相当于通过克隆来的仓库里的.git文件夹，整个裸仓库中只有git索引（index），不包含工作目录。要实现 Push to Deploy，首先我们需要一个裸仓库，进入/home/USER/repos/，创建如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/git/gitrepos
<span class="token function">git</span> init <span class="token parameter variable">--bare</span> blog-bare.git <span class="token comment"># Git 裸仓库</span>
<span class="token comment"># chown -R git:gitgroup blog-bare.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="测试git仓库"><a href="#测试git仓库" class="headerlink" title="测试git仓库"></a>测试git仓库</h3><p>  另找空白文件夹，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/gitrepos/blog-bare.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果能把空仓库拉下来，就说明 git 仓库搭建成功了</p>
<h3 id="配置-Git-Hook"><a href="#配置-Git-Hook" class="headerlink" title="配置 Git Hook"></a>配置 Git Hook</h3><ol>

<li> post-update</li>

<p>  将目录切换至 <code>/home/USER/repos/xxx-bare.git/hooks</code>，用 <code>cp post-update.sample post-update</code> 复制并重命名文件后 <code>vim post-update</code> 修改，增加执行脚本:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">unset</span> GIT_DIR
<span class="token assign-left variable">DIR_ONE</span><span class="token operator">=</span>/usr/share/nginx/blog/  <span class="token comment">#此目录为服务器页面展示目录</span>
<span class="token builtin class-name">cd</span> <span class="token variable">$DIR_ONE</span>

<span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin /home/git/gitrepos/blog-bare.git
<span class="token function">git</span> clean <span class="token parameter variable">-df</span>
<span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <b><code> 注意： 一定要unset GIT_DIR清除变量， 不然会引起remote: fatal: Not a git repository: ‘.’错误。</code></b></p>
<p>  <code>post-update</code>添加执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x post-update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> post-receive</li>

<p>  将目录切换至 <code>/home/USER/repos/xxx-bare.git/hooks</code>，用 <code>cp post-receive.sample post-receive</code> 复制并重命名文件后 <code>vim post-receive</code> 修改，增加执行脚本:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token function">git</span> --work-tree<span class="token operator">=</span>/usr/share/nginx/blog/ --git-dir<span class="token operator">=</span>/home/git/gitrepos/blog-bare.git checkout <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  <code>post-receive</code>添加执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>  修改Hexo博客根目录下<code>_config.yml</code>文件</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">deploy</span><span class="token punctuation">:</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">type: git</span>
<span class="token key attr-name">  repo</span><span class="token punctuation">:</span> <span class="token value attr-value">git@aliyun-ip:/home/git/gitrepos/blog-bare.git</span>
<span class="token key attr-name">  branch</span><span class="token punctuation">:</span> <span class="token value attr-value">master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>  <code>hexo clean hexo g hexo d</code>后，网站更新了。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot配置logback.xml日志信息</title>
    <url>/post/4d8e6ca2.html</url>
    <content><![CDATA[<p>由于<code>Spring Boot</code> 默认的日志框架 <code>Logback</code>,直接在resource下创建<code>logback-spring.xml</code><br>创建logback-spring.xml文件</p>
<span id="more"></span>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span>  <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span>
    <span class="token comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span>
    <span class="token comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span>
    <span class="token comment">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">&gt;</span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:/data/edu<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- 彩色日志 --&gt;</span>
    <span class="token comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span>
    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>
    <span class="token comment">&lt;!-- boldMagenta:粗红--&gt;</span>
    <span class="token comment">&lt;!-- cyan:青色 --&gt;</span>
    <span class="token comment">&lt;!-- white:白色 --&gt;</span>
    <span class="token comment">&lt;!-- magenta:洋红 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>
              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>


    <span class="token comment">&lt;!--输出到控制台--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span>
        <span class="token comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 设置字符集 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--输出到文件--&gt;</span>

    <span class="token comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 此处设置字符集 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${log.path}/log_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--日志文件输出格式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 此处设置字符集 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--日志文件保留天数--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--
        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。
        &lt;logger&gt;仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              如果未设置此属性，那么当前logger将会继承上级的级别。
    --&gt;</span>
    <span class="token comment">&lt;!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把&lt;root level="INFO"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：
     --&gt;</span>
    <span class="token comment">&lt;!--开发环境:打印控制台--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.guli<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

        <span class="token comment">&lt;!--
            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG
            可以包含零个或多个appender元素。
        --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--生产环境:输出到文件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>applicationyml</code>配置环境</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##环境设置</span>
 <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
   <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>控制台输入彩色,然后去日志存储目录中分表有log_error.log log_info.log log_warn.log 3个文件</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven打包跳过test测试类</title>
    <url>/post/454608c3.html</url>
    <content><![CDATA[<h3 id="记录一下，有两种方式："><a href="#记录一下，有两种方式：" class="headerlink" title="记录一下，有两种方式："></a>记录一下，有两种方式：</h3><ol>
<li> 传统方式<br>  命令带上参数 <code>mvn install -Dmaven.test.skip=true</code> 即可<span id="more"></span></li>
<li> 使用<code>maven-surefire-plugin</code>插件<br>  在pom.xml的build里添加插件如下：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.20.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在<code>properties</code>定义<skiptests>，设置其值为true。<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></skiptests></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Mysql 修改密码 三种方式</title>
    <url>/post/3738ac5b.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  本文都以用户为 root 为例，<code>5.7</code>特别注意。</p>
<span id="more"></span>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="拥有原来的myql的root的密码"><a href="#拥有原来的myql的root的密码" class="headerlink" title="拥有原来的myql的root的密码"></a>拥有原来的myql的root的密码</h4><ol>
<li>方法一：<br>  在mysql系统外，使用mysqladmin<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqladmin <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> password <span class="token string">"test123"</span>
Enter password: 【输入原来的密码】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>方法二：<br>  通过登录mysql系统<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
Enter password: 【输入原来的密码】
mysql<span class="token operator">&gt;</span>use mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>passworD<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<code>注意</code>：如果Mysql的版本是5.7及以上的话update语句更换如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>passworD<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h4 id="忘记原来的myql的root的密码"><a href="#忘记原来的myql的root的密码" class="headerlink" title="忘记原来的myql的root的密码"></a>忘记原来的myql的root的密码</h4><ol>
<li>方法三：<br>  首先拿到操作系统的root权限，然后kill掉Mysql服务或者手动stop掉，这里我推荐使用手动stop；<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  然后执行<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqld_safe --skip-grant-tables <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  &amp;，表示在后台运行，不再后台运行的话，就再打开一个终端吧。<br>  接着登陆MySQL修改密码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql
mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> UPDATE user SET <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">"test123"</span><span class="token punctuation">)</span> WHERE <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>   
mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<code>注意</code>：如果Mysql的版本是5.7及以上的话update语句如下<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>passworD<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>连接 MySQL 8.0 时，加密方式不兼容的解决方法</title>
    <url>/post/170d9336.html</url>
    <content><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><div class="note info no-icon"><p>报错如下： “Authentication plugin ‘caching_sha2_password’ cannot be loaded”。</p>
</div>

<p><escape><span id="more"></span></escape></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><div class="note info no-icon"><p>问题的原因：是从<code>MySQL8.0 </code>开始，默认的加密规则使用的是 <code>caching_sha2_password</code>。</p>
</div>


<ol>
<li> 首先找到当前数据库用户root的加密规则</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span> 
mysql<span class="token operator">&gt;</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> plugin <span class="token keyword">from</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<br>

<img data-src="/post/170d9336/mysqlpassword1.png" class="" title="USER">

<ol start="2">
<li> 修改加密规则为“mysql_native_password”</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <code>注： password 替换为 root 的密码； 或者直接更新这一行 pluggin字段 的值为 “mysql_native_password”</code></p>
<p>  修改my.cnf配置文件，加入</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  default-authentication-plugin=mysql_native_password</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  但是这个配置参数只对新的用户起作用，对于老的，比如root那就要重新设置一下密码</p>
<p>  对与那个用户使用了哪种认证插件，你可以去mysql的用户表去查看plugin字段</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
<span class="token keyword">use</span> mysql
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  接着我们修改root的认证插件</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  之后就好了.</p>
<p>  完成后效果如下：</p>
<img data-src="/post/170d9336/mysqlpassword2.png" class="" title="PASS">

<h3 id="更为优雅的解决方案"><a href="#更为优雅的解决方案" class="headerlink" title="更为优雅的解决方案"></a>更为优雅的解决方案</h3><p>   又重新回到了 MySQL 官方在docker的仓库中，仔细的阅读了一遍官方的说明。<br> 其实，我们在启动MySQL 容器的时候，是可以修改一些设置的。主要有2种方式。</p>
<ol>
<li>自定义配置文件，并 mount 到 container里。这样在MySQL启动时，会加载我们的配置文件。 </li>
<li>启动MySQL容器是传入CMD，通过命令修改默认加密规则（下面绿色部分）</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>weather_db <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> test-mysql <span class="token parameter variable">--restart</span> always <span class="token parameter variable">-v</span>  /home/ct/mysql/data:/var/lib/mysql  
mysql:8.0.12  --default-authentication-plugin<span class="token operator">=</span>mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>为MySQL数据库分配指定用户</title>
    <url>/post/409d24a5.html</url>
    <content><![CDATA[<blockquote>
<p>日常语句</p>
</blockquote>
<p><escape><span id="more"></span></escape></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> kanyme identified <span class="token keyword">by</span> <span class="token string">'kanyme'</span><span class="token punctuation">;</span>

<span class="token comment">-- 授权</span>
<span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> kanyme_db<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> kanyme<span class="token variable">@'%'</span><span class="token punctuation">;</span>
<span class="token comment">-- 刷新权限</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看权限</span>
<span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'kanyme'</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改密码</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> password <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'kanyme_new'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'kanyme'</span> <span class="token operator">and</span> host <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>

<span class="token comment">-- 新版</span>
<span class="token keyword">alter</span> <span class="token keyword">user</span><span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'kanyme_new'</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除用户</span>
<span class="token keyword">drop</span> <span class="token keyword">user</span> kanyme<span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改Root用户密码</span>
<span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span><span class="token string">"kanyme_new"</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<br>
<div class="note info no-icon"><p>mysql 5.7.9 之后取消了password 函数，authentication_string=password(“123456”) 会报错</p>
</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare安装CentOS8</title>
    <url>/post/ea7d9732.html</url>
    <content><![CDATA[<h3 id="VMware虚拟机"><a href="#VMware虚拟机" class="headerlink" title="VMware虚拟机"></a>VMware虚拟机</h3><div class="note info no-icon"><p>vmware是什么？<br>有了这个软件，大家就不需要为了学习linux特意再去买一台电脑了，虚拟机能让用户在一台机器上模拟出多个操作系统的软件，一般的机器配置足够胜任虚拟机的任务。<br>虚拟机不但可以虚拟出硬件资源，把实验环境与真机文件分离保证数据安全，更nb的是当你手残删掉系统核心配置时，还能有”快照“的功能，立即恢复到出错前的状态，省去装机的超长时间。。。。</p>
<p>(Windows用户)VMware Workstation是一款功能强大的桌面虚拟计算机软件，提供用户可在单一的桌面上同时运行不同的操作系统，和进行开发、测试 、部署新的应用程序的最佳解决方案。<br>(Mac用户) VMware fusion<br>简单的说，虚拟机（virtual Machine）软件就是一套特殊的软件，同时可以用“多个操作系统”<br>虚拟出硬件+操作系统==服务器+OS<br>误区：学Linux不需要再物理机上安装，费时费力，采用虚拟机是最合适的方式</p>
</div>

<span id="more"></span>
<table>
    <tbody><tr>
        <td><img data-src="/post/ea7d9732/VM-001.png" class="" title="VMware Workstation"></td>
        <td><img data-src="/post/ea7d9732/VM-002.png" class="" title="VMware fusion"></td>
    </tr>
</tbody></table>


<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="https://www.cnblogs.com/zyling/p/12845191.html"> VMware与Centos系统安装、重置root密码 </a><br><a href="https://www.bilibili.com/read/cv9694457/"> VMware Workstation 16 Pro破解—CentOS8 Linux安装 </a><br><a href="https://www.jb51.net/article/162824.htm"> Mac VMware Fusion CentOS7配置静态IP的教程图解 </a><br><a href="https://blog.csdn.net/renfeigui0/article/details/102726456"> macOS系统虚拟机安装centos8（图形化模式）</a><br><a href="https://blog.csdn.net/qq_33018697/article/details/109161775">mac系统虚拟机安装及挂载centos8镜像并配置linux基础配置</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>Meting漂亮的背景音乐播放器</title>
    <url>/post/c1dab809.html</url>
    <content><![CDATA[<div class="note success no-icon"><p> 以前就很想给网站加上一个背景音乐播放器！并且这个播放器要简洁大气，Meting完美的阐释了这句话！</p>
</div>

<img data-src="/post/c1dab809/meting.png" class="" title="Meting">

<span id="more"></span>

<!-- require APlayer -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>
<!-- require MetingJS -->
<script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script>

<p><meting-js server="netease" type="playlist" list-folded="true" theme="#eb7aab" id="14721111"><br></meting-js></p>
<p>  在Github的开源地址：<a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a></p>
<p>  如果你想在你的网站上添加Meting你可以这么做，找到一个公共的页面在底部添加上下面的代码:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meting-js</span> <span class="token attr-name">server</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>netease<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playlist<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2287227122<span class="token punctuation">"</span></span> <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>random<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#eb7aab<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meting-js</span><span class="token punctuation">&gt;</span></span>



<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/aplayer@1.10.1/dist/APlayer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://npm.elemecdn.com/meting@2.0.1/dist/Meting.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> meting_api <span class="token operator">=</span> <span class="token string">'https://service-opb3o3ky-1251733603.gz.apigw.tencentcs.com/release/Meting?server=:server&amp;type=:type&amp;id=:id&amp;r=:r'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meting-js</span> <span class="token attr-name">auto</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://music.163.com/#/playlist?id=2287227122<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>random<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0073aa<span class="token punctuation">"</span></span> <span class="token attr-name">list-folded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meting-js</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<p>  这样你的网站就会有一个在左下角收缩的播放器了！如果你想换歌单可以在meting-js标签中修改id属性！这样就完成了是不是很简单！</p>
<p><meting-js auto="https://music.163.com/#/playlist?id=2287227122" order="random" theme="#0073aa" list-folded="true"></meting-js></p>
<br>

<blockquote>
<p>其他播放器<br><a href="https://yy.mosq.cn/">漫音乐播放器</a><br><a href="https://player.hexiongbiao.cn/">宅音乐播放器</a><br><a href="https://cloud.tencent.com/developer/article/2000423#2.1">MKOnlinePlayer</a><br><a href="https://cloud.tencent.com/developer/article/1829900#2.1">mmPlayer</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Meting</tag>
      </tags>
  </entry>
  <entry>
    <title>linux搭建GitLab</title>
    <url>/post/73879c7f.html</url>
    <content><![CDATA[<h3 id="1-初始GitLab"><a href="#1-初始GitLab" class="headerlink" title="1.初始GitLab"></a>1.初始GitLab</h3><p>  GitLab是利用Ruby on Rails一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。<br>  与Github类似，GitLab能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。<br>  它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p>
<span id="more"></span>


<h3 id="2-准备安装GitLab"><a href="#2-准备安装GitLab" class="headerlink" title="2.准备安装GitLab"></a>2.准备安装GitLab</h3><p>  <code>yum install -y postfix sshd policycoreutils-python</code></p>
<ul>
<li><code>postfix</code> 邮件通知</li>
<li><code>sshd</code> ssh服务(一般系统已经有了,可以不装)</li>
<li><code>policycoreutils-python</code> GitLab必备依赖</li>
</ul>
<p>  设置postfix开机自启: <code>chkconfig --add postfix</code></p>
<h3 id="3-开始安装GitLab"><a href="#3-开始安装GitLab" class="headerlink" title="3.开始安装GitLab"></a>3.开始安装GitLab</h3><p>  官方下载地址：<a href="https://packages.gitlab.com/gitlab/gitlab-ce">https://packages.gitlab.com/gitlab/gitlab-ce</a><br>  国内镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-12.7.6-ce.0.el6.x86_64.rpm
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ce-12.7.6-ce.0.el6.x86_64.rpm
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-配置GitLab"><a href="#4-配置GitLab" class="headerlink" title="4.配置GitLab"></a>4.配置GitLab</h3><p>  主要配置两个地方: 访问GitLab的IP地址和发送邮件的账号配置</p>
<p>  <code>vim /etc/gitlab/gitlab.rb</code></p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">external_url</span> <span class="token value attr-value">'http://192.168.183.200' # 你自己的IP</span>

<span class="token comment">### Email Settings</span>
<span class="token key attr-name">gitlab_rails['gitlab_email_enabled']</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">gitlab_rails['gitlab_email_from']</span> <span class="token punctuation">=</span> <span class="token value attr-value">'你的邮箱'</span>
<span class="token key attr-name">gitlab_rails['gitlab_email_display_name']</span> <span class="token punctuation">=</span> <span class="token value attr-value">'邮件名字'</span>

<span class="token comment">### GitLab email server settings</span>
<span class="token comment">### 这里邮件服务器使用的是QQ企业邮箱,163自行修改</span>
<span class="token key attr-name">gitlab_rails['smtp_enable']</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">gitlab_rails['smtp_address']</span> <span class="token punctuation">=</span> <span class="token value attr-value">"smtp.exmail.qq.com"</span>
<span class="token key attr-name">gitlab_rails['smtp_port']</span> <span class="token punctuation">=</span> <span class="token value attr-value">465</span>
<span class="token key attr-name">gitlab_rails['smtp_user_name']</span> <span class="token punctuation">=</span> <span class="token value attr-value">"你的邮箱"</span>
<span class="token key attr-name">gitlab_rails['smtp_password']</span> <span class="token punctuation">=</span> <span class="token value attr-value">"邮箱密码"</span>
<span class="token key attr-name">gitlab_rails['smtp_authentication']</span> <span class="token punctuation">=</span> <span class="token value attr-value">"login"</span>
<span class="token key attr-name">gitlab_rails['smtp_enable_starttls_auto']</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">gitlab_rails['smtp_tls']</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  ESC保存并退出 :<code>wq</code></p>
<h3 id="5-更改gitlab默认端口"><a href="#5-更改gitlab默认端口" class="headerlink" title="5.更改gitlab默认端口"></a>5.更改gitlab默认端口</h3><p>  若linux服务器的80和8080端口都已经被使用，则需修改gitlab监听的端口</p>
<p>  修改路径文件：<code>vim /etc/gitlab/gitlab.rb</code></p>
<p>  1、修改<code>external_url</code>  （将前面的#注释符号去掉）,我改成了8099</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## GitLab URL</span>
<span class="token comment">##! URL on which GitLab will be reachable.</span>
<span class="token comment">##! For more details on configuring external_url see:</span>
<span class="token comment">##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab</span>
<span class="token comment">##!</span>
<span class="token comment">##! Note: During installation/upgrades, the value of the environment variable</span>
<span class="token comment">##! EXTERNAL_URL will be used to populate/replace this value.</span>
<span class="token comment">##! On AWS EC2 instances, we also attempt to fetch the public hostname/IP</span>
<span class="token comment">##! address from AWS. For more details, see:</span>
<span class="token comment">##! https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html</span>
<span class="token key attr-name">external_url</span> <span class="token value attr-value">'http://10.211.55.61:8099'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  2、找到Advanced settings 下的8080端口 将端口改成自己备用端口号<br>  （<code>不能和上面url端口号相同，会冲突占用！</code>），我改的28080</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">### Advanced settings</span>
<span class="token comment"># unicorn['listen'] = 'localhost'</span>
<span class="token key attr-name"> unicorn['port']</span> <span class="token punctuation">=</span> <span class="token value attr-value">28080</span>
<span class="token comment"># unicorn['socket'] = '/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket'</span>
<span class="token comment"># unicorn['pidfile'] = '/opt/gitlab/var/unicorn/unicorn.pid'</span>
<span class="token comment"># unicorn['tcp_nopush'] = true</span>
<span class="token comment"># unicorn['backlog_socket'] = 1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  3、运行下面命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl stop --停止服务
<span class="token function">sudo</span> gitlab-ctl reconfigure --启动服务
<span class="token function">sudo</span> gitlab-ctl start --启动所有gitlab组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>  4、若访问不了gitlab，尝试关闭或开放防火墙</p>
<h3 id="6-启动GitLab"><a href="#6-启动GitLab" class="headerlink" title="6.启动GitLab"></a>6.启动GitLab</h3><p>  刷新配置: <code>gitlab-ctl reconfigure</code><br>  重启服务: <code>gitlab-ctl restart</code></p>
<h3 id="7-访问GitLab"><a href="#7-访问GitLab" class="headerlink" title="7.访问GitLab"></a>7.访问GitLab</h3><p>  此时还不能访问,需要关闭防火墙 <code>service iptables stop</code> 或者 在防火墙中开放8099端口:</p>
<p>  编辑iptables <code>vi /etc/sysconfig/iptables</code></p>
<p>  添加配置 <code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8099 -j ACCEPT</code></p>
<p>  重启防火墙 <code>service iptables restart</code></p>
<p>  访问 <a href="http://10.211.55.61:8099/">http://10.211.55.61:8099/</a></p>
<p>  第一次登录需要修改<code>root</code>密码, 密码8位以上,修改完就可以登录</p>
<h3 id="8-Linux下Gitlab个人界面汉化"><a href="#8-Linux下Gitlab个人界面汉化" class="headerlink" title="8.Linux下Gitlab个人界面汉化"></a>8.Linux下Gitlab个人界面汉化</h3><p>  1.进入个人用户界面<br>  点击右上角<code>个人头像-&gt;settings-&gt;profile-&gt;Preferred language</code><br>  2.默认是english,可以切换中文<br>  3.再刷新一下，我们看见语言变成中文了<br>  4.不过其它账号登录依然是英文，只有当前账号登录才会显示成功切换的语言</p>
<h3 id="9-GitLab基本操作"><a href="#9-GitLab基本操作" class="headerlink" title="9.GitLab基本操作"></a>9.GitLab基本操作</h3><p>  添加用户2种方式: root后台添加和自己注册</p>
<p>  用户权限:</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">Regular</span><span class="token punctuation">:</span> <span class="token value attr-value">可以访问自己组和项目</span>
<span class="token key attr-name">Admin</span><span class="token punctuation">:</span> <span class="token value attr-value">可以访问所有组和项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p>  添加组</p>
<p>  组权限</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">Private</span><span class="token punctuation">:</span> <span class="token value attr-value">私用,只允许组成员可见</span>
<span class="token key attr-name">Internal</span><span class="token punctuation">:</span> <span class="token value attr-value">内部,所有登录用户可见</span>
<span class="token key attr-name">Public</span><span class="token punctuation">:</span> <span class="token value attr-value">公共,所有人可见</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  创建仓库和添加成员到组,很简单,不再赘述. 重点说下仓库成员权限,</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">Guest</span><span class="token punctuation">:</span> <span class="token value attr-value">可以创建issue、发表评论，不能读写版本库</span>
<span class="token key attr-name">Reporter</span><span class="token punctuation">:</span> <span class="token value attr-value">可以克隆代码，不能提交，QA、PM可以赋予这个权限</span>
<span class="token key attr-name">Developer</span><span class="token punctuation">:</span> <span class="token value attr-value">可以克隆代码、开发、提交、push，RD可以赋予这个权限</span>
<span class="token key attr-name">Master</span><span class="token punctuation">:</span> <span class="token value attr-value">可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心RD负责人可以赋予这个权限</span>
<span class="token key attr-name">Owner</span><span class="token punctuation">:</span> <span class="token value attr-value">可以设置项目访问权限 (- Visibility Level、删除项目、迁移项目、管理组成员，开发组leader可以赋予这个权限)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="10-Gitlab相关操作及说明"><a href="#10-Gitlab相关操作及说明" class="headerlink" title="10.Gitlab相关操作及说明"></a>10.Gitlab相关操作及说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
/etc/gitlab/gitlab.rb          <span class="token comment">#gitlab配置文件</span>
/opt/gitlab                    <span class="token comment">#gitlab的程序安装目录</span>
/var/opt/gitlab                <span class="token comment">#gitlab目录数据目录</span>
/var/opt/gitlab/git-data       <span class="token comment">#存放仓库数据</span>
gitlab-ctl reconfigure         <span class="token comment">#重新加载配置</span>
gitlab-ctl status              <span class="token comment">#查看当前gitlab所有服务运行状态</span>
gitlab-ctl stop                <span class="token comment">#停止gitlab服务</span>
gitlab-ctl stop nginx          <span class="token comment">#单独停止某个服务</span>
gitlab-ctl <span class="token function">tail</span>                <span class="token comment">#查看所有服务的日志</span>

Gitlab的服务构成：
nginx：                 静态web服务器
gitlab-workhorse        轻量级反向代理服务器
<span class="token function">logrotate</span>              日志文件管理工具
postgresql             数据库
redis                  缓存数据库
sidekiq                用于在后台执行队列任务（异步执行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7 安装 event 扩展</title>
    <url>/post/c42ce648.html</url>
    <content><![CDATA[<div class="note success no-icon"><p>  Libevent 是一个用C语言编写的、轻量级的开源高性能I/O框架，支持多种 I/O 多路复用技术： epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。PHP提供了对应的扩展 libevent、 Event 。</p>
<p>  相比 libevent ext, event ext 拥有更好的性能表现和更全面的API，可以让我们更友好的使用 Libevent。</p>
</div>

<span id="more"></span>

<h4 id="安装-Libevent-库"><a href="#安装-Libevent-库" class="headerlink" title="安装 Libevent 库"></a>安装 Libevent 库</h4><p>   php event 扩展 依赖 Libevent 库，需要先编译安装（注意是 Libevent 库，非 libevent 扩展）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/nmathewson/Libevent.git
<span class="token builtin class-name">cd</span> Libevent
./autogen.sh

./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/libevent
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装-Event-扩展"><a href="#安装-Event-扩展" class="headerlink" title="安装 Event 扩展"></a>安装 Event 扩展</h4><p>   可以直接使用 pecl 安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl <span class="token function">install</span> event
downloading event-2.5.3.tgz <span class="token punctuation">..</span>.
Starting to download event-2.5.3.tgz <span class="token punctuation">(</span><span class="token number">140,913</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>done: <span class="token number">140,913</span> bytes
<span class="token number">50</span> <span class="token builtin class-name">source</span> files, building
running: phpize
Configuring for:
PHP Api Version:         <span class="token number">20180731</span>
Zend Module Api No:      <span class="token number">20180731</span>
Zend Extension Api No:   <span class="token number">320180731</span>
Enable internal debugging <span class="token keyword">in</span> Event <span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> 
Enable sockets support <span class="token keyword">in</span> Event <span class="token punctuation">[</span>yes<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> 
libevent installation prefix <span class="token punctuation">[</span>/usr<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> /usr/local/libevent
<span class="token punctuation">..</span>.
Build process completed successfully
Installing <span class="token string">'/usr/local/php/lib/php/extensions/no-debug-non-zts-20180731/event.so'</span>
<span class="token function">install</span> ok: channel://pecl.php.net/event-2.5.3
Extension event enabled <span class="token keyword">in</span> php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>   查看安装结果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># php --ri event</span>

event

Event support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Sockets support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Debug support <span class="token operator">=</span><span class="token operator">&gt;</span> disabled
Extra functionality support including HTTP, DNS, and RPC <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
OpenSSL support <span class="token operator">=</span><span class="token operator">&gt;</span> enabled
Thread safety support <span class="token operator">=</span><span class="token operator">&gt;</span> disabled
Extension version <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2.5</span>.3
libevent2 headers version <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2.2</span>.0-alpha-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>   1,<code>问题</code>，<code>pecl install event</code>连不上，下载失败。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update pecl.php.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   2,<code>问题</code>，<code>pecl channel-update pecl.php.net 失败</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update pecl.php.net

Updating channel <span class="token string">"pecl.php.net"</span>
Error: No version number found <span class="token keyword">in</span> <span class="token operator">&lt;</span>channel<span class="token operator">&gt;</span> tag
Invalid channel.xml <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>
   解决方案：

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl channel-update https://pecl.php.net/channel.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 6 安装 MySQL 8.0.+</title>
    <url>/post/577cb4e8.html</url>
    <content><![CDATA[<h3 id="一、Linux下MySQL安装-YUM"><a href="#一、Linux下MySQL安装-YUM" class="headerlink" title="一、Linux下MySQL安装(YUM)"></a>一、Linux下MySQL安装(YUM)</h3><h4 id="1、检查并删除已经安装的MySql"><a href="#1、检查并删除已经安装的MySql" class="headerlink" title="1、检查并删除已经安装的MySql"></a>1、检查并删除已经安装的MySql</h4><ul>
<li>检查MariaDB</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mariadb
mariadb-server-5.5.60-1.el7_5.x86_64
mariadb-5.5.60-1.el7_5.x86_64
mariadb-libs-5.5.60-1.el7_5.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><escape><span id="more"></span></escape></p>
<ul>
<li>删除mariadb</li>
</ul>
<p>  如果不存在（上面检查结果返回空）则跳过步骤</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb-server
shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb
shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> mariadb-libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>  其实yum方式安装是可以不用删除mariadb的，安装MySQL会覆盖掉之前已存在的mariadb</p>
<ul>
<li>检查MySQL</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>删除MySQL</li>
</ul>
<p>  如果不存在（上面检查结果返回空）则跳过步骤</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> <span class="token variable"><span class="token variable">`</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2、添加MySQL-Yum-Repository"><a href="#2、添加MySQL-Yum-Repository" class="headerlink" title="2、添加MySQL Yum Repository"></a>2、添加MySQL Yum Repository</h4><blockquote>
<p>从CentOS 7开始，MariaDB成为Yum源中默认的数据库安装包。<br>也就是说在CentOS 7及以上的系统中使用yum安装MySQL默认安装的会是MariaDB（MySQL的一个分支）。<br>如果想安装官方MySQL版本，需要使用MySQL提供的Yum源。</p>
</blockquote>
<ul>
<li>下载MySQL源</li>
</ul>
<p>  官网地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p>
<ul>
<li>查看系统版本：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release <span class="token parameter variable">-a</span>   查看系统版本
getconf LONG_BIT 查看系统位数

查看系统版本
<span class="token function">cat</span> /etc/redhat-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>选择对应的版本进行下载</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://repo.mysql.com//mysql80-community-release-el6-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>安装MySQL源</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span>  mysql80-community-release-el6-3.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>检查是否安装成功</li>
</ul>
<p>  执行成功后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code>及 <code>mysql-community-source.repo</code></p>
<p>  并且通过yum repolist可以看到mysql相关资源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span>
<span class="token operator">!</span>mysql-connectors-community/x86_64 MySQL Connectors Community                <span class="token number">108</span>
<span class="token operator">!</span>mysql-tools-community/x86_64      MySQL Tools Community                      <span class="token number">90</span>
<span class="token operator">!</span>mysql80-community/x86_64          MySQL <span class="token number">8.0</span> Community Server                <span class="token number">113</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3、选择MySQL版本"><a href="#3、选择MySQL版本" class="headerlink" title="3、选择MySQL版本"></a>3、选择MySQL版本</h4><blockquote>
<p>使用MySQL Yum Repository安装MySQL，<br>默认会选择当前最新的稳定版本，例如通过上面的MySQL源进行安装的话，默安装会选择MySQL 8.0版本，<br>如果就是想要安装该版本，可以直接跳过此步骤，<br>如果不是，比如我这里希望安装MySQL5.7版本，就需要“切换一下版本”：</p>
</blockquote>
<ul>
<li>查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>切换版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--disable</span> mysql80-community
shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--enable</span> mysql57-community<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>  除了使用yum-config-manager之外，还可以直接编辑<code>/etc/yum.repos.d/mysql-community.repo</code>文件</p>
<p>  enabled=0禁用</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysql80-community]
<span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">MySQL 8.0 Community Server</span>
<span class="token key attr-name">baseurl</span><span class="token punctuation">=</span><span class="token value attr-value">http://repo.mysql.com/yum/mysql-8.0-community/el/7/$basearch/</span>
<span class="token key attr-name">enabled</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token value attr-value">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  enabled=1启用</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Enable to use MySQL 5.7</span>
[mysql57-community]
<span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">MySQL 5.7 Community Server</span>
<span class="token key attr-name">baseurl</span><span class="token punctuation">=</span><span class="token value attr-value">http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span>
<span class="token key attr-name">enabled</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token value attr-value">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>检查当前启用的MySQL仓库</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  如果同时启用了多个仓库，安装时会选择最新版本</p>
<h4 id="4、安装MySQL"><a href="#4、安装MySQL" class="headerlink" title="4、安装MySQL"></a>4、安装MySQL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  该命令会安装MySQL服务器 (mysql-community-server) 及其所需的依赖、相关组件，包括mysql-community-client、mysql-community-common、mysql-community-libs等</p>
<p>  如果带宽不够，这个步骤时间会比较长，请耐心等待~</p>
<p>  或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="5、查询是否安装成功"><a href="#5、查询是否安装成功" class="headerlink" title="5、查询是否安装成功"></a>5、查询是否安装成功</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqladmin <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="6、启动MySQL"><a href="#6、启动MySQL" class="headerlink" title="6、启动MySQL"></a>6、启动MySQL</h4><p>  启动前<code>最好</code>修改<code>/etc/my.cnf</code>配置文件</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">vi</span> <span class="token value attr-value">/etc/my.cnf</span>

 添加：

<span class="token comment"># leeze</span>
<span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span>
<span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token comment">#忘记密码时使用</span>
<span class="token comment">#skip-grant-tables</span>
<span class="token comment">#设置协议认证方式</span>
<span class="token key attr-name">default_authentication_plugin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql_native_password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<br>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> <span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>其他命令：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld status
<span class="token function">service</span> mysqld stop
<span class="token function">service</span> mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="7、修改密码"><a href="#7、修改密码" class="headerlink" title="7、修改密码"></a>7、修改密码</h4><ul>
<li>初始密码</li>
</ul>
<p>  MySQL第一次启动后会创建超级管理员账号root@localhost，初始密码存储在日志文件中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>修改默认密码</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shell<span class="token operator">&gt;</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>修改密码</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Cn@12345678'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <code>这里会遇到一个问题</code>，mysql默认的密码规则必须包含特殊字符、大写字母、小写字母、数字、一定长度<br>  并且对密码要求严格，至少8位，包含大小写等，</p>
<p>  密码策略的所有参数</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.policy%'</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%validate_password.length%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>  若想设置成123456，则要以下两条命令：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">#设置为弱口令</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> validate_password<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">#密码最小长度为1</span>

<span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="8、允许root远程访问"><a href="#8、允许root远程访问" class="headerlink" title="8、允许root远程访问"></a>8、允许root远程访问</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#任何主机</span>
mysql<span class="token operator">&gt;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'root'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment">#指定主机</span>
mysql<span class="token operator">&gt;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'xxxx'</span>@’xx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xx’ IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'xxxx'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
<span class="token comment"># 然后刷新权限</span>
mysql<span class="token operator">&gt;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>首先查看用户表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>plugin <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  发现登录主机是localhost，当然不能登录，把root用户的localhost设置为%，这样任意主机都可以连接。</p>
<p>  修改连接权限(%表示所有ip，如果只指定某台电脑，则改成相应的ip)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>更改加密方式</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> plugin<span class="token operator">=</span><span class="token string">'mysql_native_password'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>授权远程连接</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> root<span class="token variable">@'%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>执行刷新权限</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>centos系统之部署ShowDoc</title>
    <url>/post/ef6fd2ef.html</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><div class="note info no-icon"><p>  showdoc是一个php语言编写的API文档系统，专为程序员设计，界面布局简单功能强大，支持在线和私服部署。</p>
</div>

<span id="more"></span>

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li>支持markdown语法</li>
<li>支持多用户协作，你可以在项目下面随意添加多个用户一起完成api文档的写作。</li>
<li>可以分享并导出项目，生成需要的文档格式如doc，可以离线浏览</li>
<li>支持响应式，手机电脑同样精彩</li>
<li>支持项目转让</li>
<li>支持模版插入</li>
<li>支持历史版本，你可以把操作恢复到以前的版本。</li>
<li>showdoc完全开源</li>
<li>可以部署到自己的服务器</li>
<li>如果在线使用，可以设置自己的个性域名，也可以对文档进行加密，浏览者需要密码才能访问</li>
<li>可以通过一个在线测试api的工具，直接生成markdown，你几乎不用写代码就能过所有的参数自动生成</li>
</ol>
<br>

<p>   下载地址：<a href="https://github.com/star7th/showdoc">https://github.com/star7th/showdoc</a><br>   官网地址：<a href="https://www.showdoc.cc/">https://www.showdoc.cc</a></p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>   showdoc需要运行在<code>php</code>环境上，因此需要安装好<code>nginx</code>和<code>php</code><br>   nginx和php的安装步骤这里不再赘述，网上相关安装教程数不胜数</p>
<p>   <code>注意php版本最好5.4以上</code></p>
<h4 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h4><p>   <a href="https://github.com/star7th/showdoc">https://github.com/star7th/showdoc</a></p>
<p>   将zip包传到部署好的nginx和php所在服务器<br>   放到nginx默认的网站目录html下解压</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> showdoc-master.zip 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>   请确保nginx和php对源码包下这5个目录可写权限：<br>   /Application/Runtime 、 /Public/Uploads 、 /Sqlite 、 /Sqlite、showdoc.db.php</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> nginx.nginx  /usr/local/nginx/html/showdoc-master
<span class="token comment"># nginx.nignx表示属主和属组，主与组的名字取决于nginx和php的启动用户是谁</span>
<span class="token comment"># 如果不太理解，也可以直接chmod 777 -R 对以上的几个目录分别授予写入权限</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> showdoc-master/

<span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> server/
<span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> Public/Uploads/
<span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> install/
<span class="token function">chmod</span> <span class="token number">777</span> <span class="token parameter variable">-R</span> Sqlite/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装showdoc"><a href="#安装showdoc" class="headerlink" title="安装showdoc"></a>安装showdoc</h4><p>   showdoc采用web安装方式，非常人性化<br>   检查nginx和php是否启动成功，配置好nginx虚拟主机目录指向showdoc目录并关联php</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#配置nginx虚拟主机目录指向showdoc源码包目录</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> showdoc.***.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span>  /usr/local/nginx/showdoc-master</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.php index.html</span><span class="token punctuation">;</span>
   
<span class="token comment">#配置nginx关联php</span>
    <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">fastcgi_pass</span> 127.0.0.1:9000</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME  <span class="token variable">$DOCUMENT_ROOT</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   在浏览器访问 <a href="http://showdoc.***.com/install/">http://showdoc.***.com/install/</a> 按步骤安装即可。</p>
<p>   。。。</p>
<p>   按网页中提示删除install目录(防止重装)：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span>  /usr/local/nginx/html/showdoc-master/install/
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>   安装完毕后可使用 <a href="http://showdoc.***.com/index.php">http://showdoc.***.com/index.php</a> 访问登录首页，默认账号showdoc（密码：123456）登录，也可以自行注册账户）</p>
<p>   <code>至此showdoc部署完成，尽情探索吧</code></p>
<h4 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h4><p><a href="https://www.showdoc.com.cn/help/65610">HELP</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
        <category>API文档系统</category>
      </categories>
      <tags>
        <tag>ShowDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 打包将 system 的文件添加到 war 中</title>
    <url>/post/63dee017.html</url>
    <content><![CDATA[<h4 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h4><div class="note info no-icon"><p>   在个人的工作中使用了百度的编辑器的jar文件，但是在阿里云的maven镜像中是没有这个文件的，以前自己的私服里面有这个文件。<br>后面使用，<scope>system</scope> 添加后发现不能打包的war文件中。<br>对于国内的互联网的资料，我个人的意见是能用 English 的还是用这样的方式去查询吧。</p>
</div>

<span id="more"></span>

<h4 id="基础姿势"><a href="#基础姿势" class="headerlink" title="基础姿势"></a>基础姿势</h4><div class="note info no-icon"><p>个人在网络上寻找到的资料很多都是使用 spring-boot-maven-plugin 的 plugin ，首先我们来了解下作用域：</p>
<ul>
<li>compile 默认的scope，表示 dependency 都可以在生命周期中使用。而且，这些dependencies 会传递到依赖的项目中。适用于所有阶段，会随着项目一起发布</li>
<li>provided 跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet AP和一些Java EE APIs。这个scope 只能作用在编译和测试时，同时没有传递性。</li>
<li>runtime 表示dependency不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段。</li>
<li>test 表示dependency作用在测试时，不作用在运行时。 只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li>
<li>system 跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。</li>
</ul>
</div>

<br>

<blockquote>
<p>下面添加一个解决依赖冲突的办法，这个是题外话。</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 这里是举个栗子，我们在添加别人写好的工具类的时候，会自动依赖很多jar，并且和项目本身的jar有冲突，用这个可以解决。其他是本地一定有引用这个jar文件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><blockquote>
<p>这边先给出spring-boot-maven-plugin的配置，至于能不能将本地 jar 打入 war 中自己测试（实践出真知）：</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeSystemScope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>以下是我本地使用的百度的UE编辑器的jar</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 百度的编辑器，这个在自己的私服上面，如果要使用的话需要配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ueditor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${project.basedir}/libs/ueditor-1.1.2.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 记得这个地方要添加版本的，反正我很奇怪没有添加版本是正常运行了 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webResources</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.basedir}/libs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>WEB-INF/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webResources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之安装jdk及环境配置</title>
    <url>/post/2aaf08ad.html</url>
    <content><![CDATA[<h4 id="一、Linux下JDK安装"><a href="#一、Linux下JDK安装" class="headerlink" title="一、Linux下JDK安装"></a>一、Linux下JDK安装</h4><h5 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h5><p><code>通过yum安装的默认路径为：/usr/lib/jvm</code></p>
<span id="more"></span>

<ol>
<li>首先执行以下命令查看可安装的jdk版本</li>
  
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> list java*
or
yum search jdk
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<li>选择自己需要的jdk版本进行安装，比如这里安装1.8，执行以下命令：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> java-1.8.0-openjdk-devel.x86_64
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>等待安装完成即可。</p>
<li>安装完成之后，查看安装的jdk版本，输入以下指令：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
此处便可以看到自己安装的jdk版本信息。
你如果好奇这个自动安装把jdk安装到哪里去了，其实你可以在usr/lib/jvm下找到它们。
ok，完成！

<li>卸载</li>

<p> 检测是否已经安装JDK<br> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>
<p> 卸载系统自带jdk</p>
<p> 删除系统自带JDK的命令，两种方法都可以：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> –nodeps java-1.6.0-openjdk-1.6.0.0-1.41.1.10.4.e16.x86_64
OR
yum <span class="token parameter variable">-y</span> remove  java-1.6.0-openjdk-1.6.0.0-1.41.1.10.4.el6.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p> 继续用第一步的命令检测，或者用：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> gcj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> 然后再用上面删除的方法把libgcj和java-gcj的文件删掉.</p>
</ol>

<h5 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h5><ol>
<li>获取文件权限</li>
  
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span>    /storage/sdc-data/software/jdk-8u65-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li>安装JDK</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span>  /storage/sdc-data/software/jdk-8u65-linux-x64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该命令默认将jdk安装到了/usr/java目录下。</p>
<li>移动安装目录</li>

<p> 将jdk安装目录，重命名并且移动到目录/usr/local/下。并查看是否移动成功。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /usr/java/jdk1.8.0_45 /usr/local/jdk1.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 <li>rpm包的卸载</li>
 
<p>   输入命令查看rpm包安装信息，如果第一条未出现信息，可以使用第二条命令查看，如果都没  有可能是未安装或者是tar包安装的<br>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  我用上述rpm包安装之后，用命令查看，提示如下：<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master100 local<span class="token punctuation">]</span><span class="token comment"># rpm -qa | grep jdk</span>
jdk1.8-1.8.0_181-fcs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  知道安装的rpm包名后就可以卸载了，卸载命令如下：<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> jdk1.8-1.8.0_181-fcs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>  卸载完成后删除环境变量<br>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile
<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br> <p></p></ol><p></p>
<h5 id="tar包安装"><a href="#tar包安装" class="headerlink" title="tar包安装"></a>tar包安装</h5> <ol>
 
 <li>下载 jdk-8u231-linux-x64.tar.gz</li>
 
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://download.oracle.com/otn/java/jdk/8u231-b11/5b13a193868b4bf28bcb45c792fce896/jdk-8u231-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 <li>解压文件，命令如下，输入后会出现一长串的提示：</li>
 
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> /usr/local/jdk-8u231-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 <li>解压后文件夹名为：jdk1.8.0_231</li>
 
<p> 在这里修改一下文件名，将jdk1.8.0_231改成java，方便我们后面配置环境变量，在这也可以不修改，在配置环境变量时要注意文件名不能写错，修改文件名命令如下：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">mv</span> /usr/local/jdk1.8.0_231 /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
 <li>tar包的卸载</li>
 
<p> 将安装包删除，然后把配置文件内添加的环境变量删除</p>
<p> 删除安装包的命令如下：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> 修改配置文件的方法和上述配置环境变量一样</p>
 </ol>
 
<h4 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h4> <ol>
 
  <li>用vi命令 打开文件,打开后默认是命令模式,输入a或i可进入编辑模式</li>
  
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li>在文件最后配置如下变量,编辑完成按ESC键退出编辑,然后输入:wq或者:x保存退出.</li>
  
  <pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">set</span> <span class="token value attr-value">java environment</span>
<span class="token key attr-name">JAVA_HOME</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/java/jdk1.8.0_231        </span>
<span class="token key attr-name">JRE_HOME</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/java/jdk1.8.0_231/jre     </span>
<span class="token key attr-name">CLASS_PATH</span><span class="token punctuation">=</span><span class="token value attr-value">.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span>
<span class="token key attr-name">PATH</span><span class="token punctuation">=</span><span class="token value attr-value">$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span>
<span class="token key attr-name">export</span> <span class="token value attr-value">JAVA_HOME JRE_HOME CLASS_PATH PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <li>然后输入source /etc/profile命令，使配置文件生效。</li>
   
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
   <li>建立软连接</li>
   
<p>   <code>tar形式</code></p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/java/jdk1.8.0_231/bin/java /usr/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li>检测配置是否成功</li>
  
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  </ol>
  
<p>  <code>有问题参考：</code><a href="/post/4824a74d.html" title="Linux之使用alternatives 切换Java版本">Linux之使用alternatives 切换Java版本</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot之统一包装响应</title>
    <url>/post/88151b22.html</url>
    <content><![CDATA[<p>  SpringBoot 中可以基于 <code>ControllerAdvice</code> 和 <code>HttpMessageConverter</code> 实现对数据返回的包装。</p>
<p>  实现如下，先来写一个 POJO 来定义一下返回格式：</p>
<span id="more"></span>


<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">ErrorCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> errorCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>


<pre><code>这里用到了lombok，lombok的使用介绍不在本文范围内。
</code></pre>
<p>用一个 ResponseBodyAdvice 类的实现包装 Controller 的返回值：<br>以下是我以前的实现方式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatResponseBodyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">FormatResponseBodyAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Object</span> wrapperBody <span class="token operator">=</span> body<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    wrapperBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    wrapperBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request uri path: {}, format response body error"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> wrapperBody<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note primary no-icon"><p>为什么要对返回类型是 String 时进行特殊处理呢？因为如果直接返回 new Response&lt;&gt;(body) 的话，在使用时返回 String 类型的话，会报类型转换异常，当时也没有理解什么原因导致的，所以最后使用了 jackson 对 Response 又做了一次序列化。</p>
</div>

<p>今天找到了导致这个异常的原因：</p>
<div class="note primary no-icon"><p>因为在所有的 HttpMessageConverter 实例集合中，StringHttpMessageConverter 要比其它的 Converter 排得靠前一些。我们需要将处理 Object 类型的 HttpMessageConverter 放得靠前一些，这可以在 Configuration 类中完成：</p>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">HttpMessageConverter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">MappingJackson2HttpMessageConverter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后 FormatResponseBodyAdvice 就可以修改为如下实现：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MethodParameter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServletServerHttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBodyAdvice</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormatResponseBodyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span>
                                  <span class="token class-name">Class</span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> body<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比之前的实现方式优雅了很多而且不用再处理 jackson 的异常了。</p>
<p>写一个 Controller 来尝试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>请求这个端点得到结果：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"hello world!"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>说明我们的配置是成功的，同时可以在相应头中看到：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">content-type</span><span class="token punctuation">:</span> <span class="token value attr-value">application/json;charset=UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果是之前的实现方式，这里的值就是：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">content-type</span><span class="token punctuation">:</span> <span class="token value attr-value">html/text</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也不太符合 <code>restful</code> 规范.</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之404 跳转</title>
    <url>/post/20e74403.html</url>
    <content><![CDATA[<h4 id="新建-404-页面"><a href="#新建-404-页面" class="headerlink" title="新建 404 页面"></a>新建 404 页面</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h4 id="编辑-404-md"><a href="#编辑-404-md" class="headerlink" title="编辑 404.md"></a>编辑 <code>404.md</code></h4><p>  添加 Front-matter 信息 permalink: /404 并替换自己的网站地址，下面的网址是腾讯公益信息宝贝回家，寻找失踪儿童的信息。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---
title: 404
date: 2018-11-08 21:19:51
permalink: /404
---
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">homePageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pzb568.github.io<span class="token punctuation">"</span></span> <span class="token attr-name">homePageName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>回到我的主页<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之永久链接</title>
    <url>/post/2c523943.html</url>
    <content><![CDATA[<p>  设置永久链接，所有的文章都是中文的以至于网站地址特别长，不方便记忆，不美观。利用 hexo-abbrlink 这个插件可以解决。</p>
<span id="more"></span>

<h4 id="安装-hexo-abbrlink"><a href="#安装-hexo-abbrlink" class="headerlink" title="安装 hexo-abbrlink"></a>安装 hexo-abbrlink</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">permalink</span><span class="token punctuation">:</span> <span class="token value attr-value">post/:abbrlink.html</span>
<span class="token key attr-name">abbrlink</span><span class="token punctuation">:</span>
<span class="token key attr-name">  alg</span><span class="token punctuation">:</span> <span class="token value attr-value">crc32  # 算法：crc16(default) and crc32</span>
<span class="token key attr-name">  rep</span><span class="token punctuation">:</span> <span class="token value attr-value">hex    # 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之主题更新问题处理</title>
    <url>/post/58bb50d8.html</url>
    <content><![CDATA[<p>  由于 next 主题经常更新，自己又在本地大量修改主题，更新中会有很多问题，经过很多次折腾及网络上其他朋友的教程，我找到了不错的处理方法。</p>
<span id="more"></span>

<h3 id="进入主题目录并更新"><a href="#进入主题目录并更新" class="headerlink" title="进入主题目录并更新"></a>进入主题目录并更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> themes/next
<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  因为修改了很多的配置项目，所以更新<code>失败</code>了</p>
<h4 id="一，解决更新"><a href="#一，解决更新" class="headerlink" title="一，解决更新"></a>一，解决更新</h4><h5 id="1，将修改储藏到暂存区"><a href="#1，将修改储藏到暂存区" class="headerlink" title="1，将修改储藏到暂存区"></a>1，将修改储藏到暂存区</h5><p>  我们可以通过 <code>git stash</code> 这句命令将对主题文件的修改储存到本地的暂存区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="2，执行更新"><a href="#2，执行更新" class="headerlink" title="2，执行更新"></a>2，执行更新</h5><p>  我们现在需要再次使用 git pull 命令来获取最新的主题文件，别担心，这次不会再有上面的错误了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="3，从暂存区取出修改"><a href="#3，从暂存区取出修改" class="headerlink" title="3，从暂存区取出修改"></a>3，从暂存区取出修改</h5><p>  我们现在要通过执行 git stash pop 这句命令来从暂存区取出修改。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="二，报错"><a href="#二，报错" class="headerlink" title="二，报错"></a>二，报错</h4><p>  如果报错如下内容需要进入提示的文件修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> stash pop
Auto-merging _config.yml
CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="1，进入文件"><a href="#1，进入文件" class="headerlink" title="1，进入文件"></a>1，进入文件</h5><p>  可以看到文中 &lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;b8e436 中间是你自己的分支，删掉一个就可以了</p>
<h5 id="2，提交记录"><a href="#2，提交记录" class="headerlink" title="2，提交记录"></a>2，提交记录</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> _config.yml
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"冲突处理"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="3，在更新"><a href="#3，在更新" class="headerlink" title="3，在更新"></a>3，在更新</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote class="blockquote-center">
<p>主题升级成功。</p>

</blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之hosts主机名不对</title>
    <url>/post/2cf589fe.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h4><div class="note info no-icon"><p>[root@bogon ~]#<br>[root@bogon ~]# hostname<br>bogon</p>
</div>

<span id="more"></span>

<h4 id="查看几个相关文件，都正确"><a href="#查看几个相关文件，都正确" class="headerlink" title="查看几个相关文件，都正确"></a>查看几个相关文件，都正确</h4><div class="note info no-icon"><p>[root@bogon ~]# vi /etc/sysconfig/network</p>
<p>NETWORKING=yes<br>HOSTNAME=localhost.localdomain</p>
<p>[root@bogon ~]# vi /etc/hosts</p>
<p>127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</p>
</div>

<h4 id="继续，dns的的配置"><a href="#继续，dns的的配置" class="headerlink" title="继续，dns的的配置"></a>继续，dns的的配置</h4><div class="note info no-icon"><p>[root@bogon logs]# vi /etc/resolv.conf<br>#Generated by NetworkManager<br>search com (大爷的，这行不知道咋来的，删不掉)<br>nameserver 10.211.55.1</p>
</div>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><div class="note success no-icon"><p>[root@bogon ~]# hostname localhost<br>[root@localhost logs]# hostname<br>localhost</p>
</div>

<h4 id="又变回去"><a href="#又变回去" class="headerlink" title="又变回去"></a>又变回去</h4><p>若4操作后重启发现hostname又变回去了，如下操作</p>
<div class="note default"><p><code>vi /etc/hosts</code>，追加 本机IP localhost</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</span>
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 10.211.55.12 localhost（追加的）</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</div>

<hr>
<h3 id="centos6修改主机名"><a href="#centos6修改主机名" class="headerlink" title="centos6修改主机名"></a>centos6修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">第一种方式：临时修改
临时修改主机名，但是重启后又会恢复
修改方式如下：
shell#hostname &lt;主机名&gt;
第二种方式：永久修改
修改配置文件，使其永久生效
shell# sed -i “s/HOSTNAME=localhost/HOSTNAME=&lt;主机名&gt;/g” /etc/sysconfig/network
意思就是修改配置文件/etc/sysconfig/network文件，将新的主机名加入到配置文件里面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>centos6永久修改主机名</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/network
<span class="token assign-left variable">NETWORKING</span><span class="token operator">=</span>yes
<span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span>CentOS6.localdomain		<span class="token comment">#修改localdomain前面的即可</span>

<span class="token function">vim</span> /etc/hosts
<span class="token number">127.0</span>.0.1   localhost CentOS6.localdomain localhost4 localhost4.localdomain4		<span class="token comment">#修改localdomain之前即可</span>
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
~                                                                                                                                                             
~  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="centos7修改主机名"><a href="#centos7修改主机名" class="headerlink" title="centos7修改主机名"></a>centos7修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">第一种方式：临时修改
这个和centos6一样，都是直接在命令行敲hostname +新的主机名，eg：hostname &lt;主机名&gt;
第二种方式： 永久修改
这种方式和centos6有所不同，我们看一下如何操作
shell# hostnamectl set-hostname &lt;主机名&gt;
还可以直接修改配置文件/etc/hostname直接将新的主机名加入到配置文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例：</span>
hostnamectl <span class="token parameter variable">--static</span> set-hostname manager01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>centos7永久更改主机名</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hostname
CentOS7		<span class="token comment">#修改为想要的名字即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-table 显示行号</title>
    <url>/post/644b0626.html</url>
    <content><![CDATA[<h4 id="动态生成行号"><a href="#动态生成行号" class="headerlink" title="动态生成行号"></a>动态生成行号</h4><p>思想：借助bootstrap-table 本身的<code>index</code>属性和<code>options</code>的对象， 巧妙的的通过<code>formatter</code> 实现</p>
<span id="more"></span>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">"Number"</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"序号"</span><span class="token punctuation">,</span><span class="token literal-property property">halign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span><span class="token literal-property property">align</span><span class="token operator">:</span><span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">formatter</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> options <span class="token operator">=</span> $table<span class="token punctuation">.</span><span class="token function">bootstrapTable</span><span class="token punctuation">(</span><span class="token string">"getOptions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>pageNumber<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>BootStrap</category>
        <category>table</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins之shell 部署脚本</title>
    <url>/post/5f2bf15a.html</url>
    <content><![CDATA[<h4 id="记录一下，以防遗忘。"><a href="#记录一下，以防遗忘。" class="headerlink" title="记录一下，以防遗忘。"></a>记录一下，以防遗忘。</h4><span id="more"></span>

<img data-src="/post/5f2bf15a/shell.jpg" class="" title="部署脚本示例图">
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins之SSH Publishers时踩的坑</title>
    <url>/post/4995ab80.html</url>
    <content><![CDATA[<h4 id="source相对路径问题"><a href="#source相对路径问题" class="headerlink" title="source相对路径问题"></a>source相对路径问题</h4><p><code>source</code>相对路径问题，不是<mark class="label danger">.Jenkins/workspace</mark>，而是<mark class="label success">.jenkins/workspace/[project]/</mark></p>
<span id="more"></span>


<img data-src="/post/4995ab80/jkp.jpeg" class="" title="相对路径示例图"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之修改文章样式</title>
    <url>/post/346628a2.html</url>
    <content><![CDATA[<h4 id="文章样式"><a href="#文章样式" class="headerlink" title="文章样式"></a>文章样式</h4><p>修改<code>themes/next/source/css/_custom/custom.styl</code>文件，加入自定义样式</p>
<span id="more"></span>


<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*******************文章样式*****************************/</span>

<span class="token comment">/*文章*/</span>
<span class="token selector">.post</span> <span class="token punctuation">{</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 45px 36px 36px 36px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 文章标题字体*/</span>
<span class="token selector">.posts-expand .post-title</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章标题动态效果*/</span>
<span class="token selector">.posts-expand .post-title-link::before</span> <span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a166ab 0%<span class="token punctuation">,</span> #ef4e7b 25%<span class="token punctuation">,</span> #f37055 50%<span class="token punctuation">,</span> #ef4e7b 75%<span class="token punctuation">,</span> #a166ab 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章元数据（meta）留白更改*/</span>
<span class="token selector">.posts-expand .post-meta</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0px 20px 0px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 文章的描述description */</span>
<span class="token selector">.posts-expand .post-meta .post-description</span> <span class="token punctuation">{</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改[Read More]按钮样式</title>
    <url>/post/3f27960.html</url>
    <content><![CDATA[<h4 id="修改-Read-More-按钮样式"><a href="#修改-Read-More-按钮样式" class="headerlink" title="修改[Read More]按钮样式"></a>修改[Read More]按钮样式</h4><p> 修改<code>themes/next/source/css/_custom/custom.styl</code>文件，加入自定义样式</p>
<span id="more"></span>

 <pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">// [Read More]按钮样式
.post-button .btn</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #555 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">transition-property</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0px 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.post-button .btn:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 10px 0px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a166ab 0%<span class="token punctuation">,</span> #ef4e7b 25%<span class="token punctuation">,</span> #f37055 50%<span class="token punctuation">,</span> #ef4e7b 75%<span class="token punctuation">,</span> #a166ab 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/post/423abe9e.html</url>
    <content><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h5 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h5><ol>
<li><p>仓库级别 local 【优先级最高】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--local</span> user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config <span class="token parameter variable">--local</span> user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git 仓库级别对应的配置文件是当前仓库下的.git/config 【在当前目录下.git目录默认是隐藏的，所以在文件管理器中我们要打开显示以藏文件】</p>
<span id="more"></span></li>
<li><p>用户级别 global【优先级次之】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git 用户级别对应的配置文件是用户宿主目录下的~/.gitconfig</p>
</li>
<li><p>系统级别 system【优先级最低】</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--system</span> user.name <span class="token string">"Your name"</span>
<span class="token function">git</span> config <span class="token parameter variable">--system</span> user.email <span class="token string">"you@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  git系统级别对应的配置文件是git安装目录下的 /etc/gitconfig</p>
</li>
</ol>
<h5 id="获取当前git配置"><a href="#获取当前git配置" class="headerlink" title="获取当前git配置"></a>获取当前git配置</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name         <span class="token comment"># 获取当前登录的用户</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email        <span class="token comment"># 获取当前登录用户的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者</p>
<ol>
<li>git config –local -l 查看仓库配置【必须要进入到具体的目录下，比如要查看TestGit仓库的配置信息】</li>
<li>git config –global -l 查看用户配置</li>
<li>git config –system -l 查看系统配置</li>
<li>git config -l查看所有的配置信息，依次是系统级别、用户级别、仓库级别<img data-src="/post/423abe9e/gitcom-001.png" class="" title="示例图"></li>
<li>git config 常用配置选项<ul>
<li>git config -e 编辑配置文件 <ul>
<li>git config –local -e 编辑仓库级别配置文件</li>
<li>git config –global -e 编辑用户级别配置文件</li>
<li>git config –system -e 编辑系统级别配置文件</li>
</ul>
</li>
<li>git config 添加配置项目 <ul>
<li>git config –global user.email “<a href="mailto:you@example.com">you@example.com</a>”</li>
<li>git config –global user.name “Your Name”<br>上面的操作表示添加用户级别的配置信息，也就是说修改用户宿主目录下面的配置文件</li>
</ul>
</li>
</ul>
</li>
<li>配置文件如何生效的<br>  对于git来说，配置文件的权重是仓库&gt;全局&gt;系统。Git会使用这一系列的配置文件来存储你定义的偏好，它首先会查找/etc/gitconfig文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来Git会查找每个用户的~/.gitconfig文件（全局级）。最后Git会查找由用户定义的各个库中Git目录下的配置文件.git/config（仓库级），该文件中的值只对当前所属仓库有效</li>
</ol>
<h5 id="增加配置项"><a href="#增加配置项" class="headerlink" title="增加配置项"></a>增加配置项</h5><p>  参数 –add<br>  格式: git config [–local|–global|–system] –add section.key value(默认是添加在local配置中)<br>  注意add后面的section,key,value一项都不能少，否则添加失败。比如我们执行：git config –add cat.name tom</p>
<img data-src="/post/423abe9e/gitcom-002.png" class="" title="示例图">

<h5 id="获取一个配置项"><a href="#获取一个配置项" class="headerlink" title="获取一个配置项"></a>获取一个配置项</h5><p>  有时候，我们并不需要查看所有配置的值，而是查看某个配置项的值，怎么做呢？<br>  命令参数 –get<br>  格式：git config [–local|–global|–system] –get section.key(默认是获取local配置中内容)<br>  我们先往global配置中写入一个cat.name=Tomcat的配置项，再使用git config –get cat.name看看得到的是什么：</p>
<img data-src="/post/423abe9e/gitcom-003.png" class="" title="示例图">
<p>  结果就是local中的cat.name=Tom，因此git config –get section.key 等价于git config –local –get section.key<br>  如果获取一个section不存在的key值，不会返回任何值<br>  如果获取一个不存在的section的key值，则会报错</p>
<h5 id="删除一个配置项"><a href="#删除一个配置项" class="headerlink" title="删除一个配置项"></a>删除一个配置项</h5><p>  命令参数 –unset<br>  格式：git config [–local|–global|–system] –unset section.key<br>  相信有了前两个命令的使用基础，大家举一反三就知道改怎么用了，来，我们试试删除local配置中的cat.name</p>
<img data-src="/post/423abe9e/gitcom-004.png" class="" title="示例图">

<h5 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h5><p>如果文件不存在，则创建文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"hello git"</span>
<span class="token operator">&gt;</span> index.html                          <span class="token comment"># 将'hello git'写入到index.html中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>单个<code>&gt;</code>箭头表示写入，<code>&gt;&gt;</code>表示追加</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init                        <span class="token comment"># 初始化当前所在目录的这个项目</span>
<span class="token function">git</span> status                      <span class="token comment"># 查看项目状态，有没有添加或者修改文件</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                       <span class="token comment"># 给目前的项目制作一个快照snapshot（快照只是登记留名，快照不等于记录在案，git管快照叫做索引index）</span>
<span class="token function">git</span> commit                      <span class="token comment"># 将快照里登记的内容永久写入git仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-a</span>                   <span class="token comment"># 直接提交所有修改，省去了``git add``和``git diff``和``git commit``的工序</span>
                                <span class="token comment"># 无法把新增文件或文件夹加入进来，所以，如果你新增了文件或文件夹，那么就要老老实实的先``git add ..``，再``git commit``</span>
<span class="token function">git</span> push                        <span class="token comment"># 把更新推送到远程分支</span>
<span class="token function">git</span> log <span class="token parameter variable">-p</span>                      <span class="token comment"># git不但会给出开发日志，而且会显示每个开发版本的代码区别所在</span>
<span class="token function">git</span> log <span class="token parameter variable">--online</span>                <span class="token comment"># 查看版本</span>
<span class="token function">git</span> <span class="token function">diff</span>                        <span class="token comment"># 比较暂存区和工作区的差别</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>               <span class="token comment"># 比较暂存区和历史区的差别</span>
<span class="token function">git</span> <span class="token function">diff</span> master                 <span class="token comment"># 比较历史区和工作区的差别（修改）</span>
<span class="token function">git</span> checkout index.html         <span class="token comment"># 用暂存区中的内容或者版本库中的内容覆盖掉工作区</span>
<span class="token function">git</span> reset HEAD index.html       <span class="token comment"># 取消增加到暂存区的内容（添加时）</span>
<span class="token function">git</span> <span class="token function">rm</span> index.html <span class="token parameter variable">--cached</span>      <span class="token comment"># 使用--cached表示只删除缓冲区中的内容</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD/commit_id <span class="token comment"># 回滚版本</span>
<span class="token function">git</span> reflog                      <span class="token comment"># 回滚到未来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总结：先git add修改过的文件，再git diff并git status查看确认，然后git commit提交，然后输入开发日志，然后git push推送到远程分支，最后git log再次确认。</p>
<h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch                      <span class="token comment"># 查看分支列表</span>
<span class="token function">git</span> branch experiment           <span class="token comment"># 创建experiment分支</span>
<span class="token function">git</span> checkout experiment         <span class="token comment"># 切换到experiment分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> experiment      <span class="token comment"># 创建分支并切换分支</span>
<span class="token function">git</span> commit <span class="token parameter variable">-a</span>                   <span class="token comment"># 在分支上提交工作</span>
<span class="token function">git</span> checkout master             <span class="token comment"># 切换到主干道</span>
<span class="token function">git</span> merge experiment            <span class="token comment"># 合并分支到主干道</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> experiment        <span class="token comment"># -d，表示“在分支已经合并到主干后删除分支”。如果使用大写的-D的话，则表示“不论如何都删除分支”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="使用git-stash命令保存和恢复进度"><a href="#使用git-stash命令保存和恢复进度" class="headerlink" title="使用git stash命令保存和恢复进度"></a>使用git stash命令保存和恢复进度</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash                       <span class="token comment"># 保留当前工作区进度，会把暂存区和工作区的改动保存起来</span>
<span class="token function">git</span> stash save <span class="token string">'message...'</span>     <span class="token comment"># 保存当前工作区，并添加备注</span>
<span class="token function">git</span> stash list                  <span class="token comment"># 显示保存进度的列表。也就意味着，git stash命令可以多次执行。</span>
<span class="token function">git</span> stash pop                   <span class="token comment"># 恢复最新的进度到工作区并删除。git默认会把工作区和缓存区的改动都恢复到工作区。</span>
<span class="token function">git</span> stash apply                 <span class="token comment"># 恢复最新的进度到工作区不删除</span>
<span class="token function">git</span> stash drop <span class="token punctuation">[</span>stash_id<span class="token punctuation">]</span>       <span class="token comment"># 删除一个存储的进度，如果不指定stash_id，则默认删除最新的存储进度，stash_id从git stash list获取</span>
<span class="token function">git</span> stash <span class="token function">clear</span>                 <span class="token comment"># 删除所有存储的进度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="撤销一次已经提交到Github的内容"><a href="#撤销一次已经提交到Github的内容" class="headerlink" title="撤销一次已经提交到Github的内容"></a>撤销一次已经提交到Github的内容</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1
<span class="token function">git</span> push <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>该命令执行后，会隐藏掉Github库中的被撤销掉的记录，但是指定到该被隐藏掉的记录来访问，依旧可以访问。</p>
<h5 id="GitHub更新自己fork的代码"><a href="#GitHub更新自己fork的代码" class="headerlink" title="GitHub更新自己fork的代码"></a>GitHub更新自己fork的代码</h5><ol>
<li> clone已经fork到自己账号的代码 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/shadow000902/ApiTestEngine.git
<span class="token builtin class-name">cd</span> ApiTestEngine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<li> 查看远程分支列表 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─taoyi at TaoYi-Mac <span class="token keyword">in</span> ~/git_projects/GitHub/ApiTestEngine on master✔ using ‹› <span class="token number">17</span>-08-23 - <span class="token number">15</span>:01:23
╰─○ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>
debugtalk	https://github.com/debugtalk/ApiTestEngine.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
debugtalk	https://github.com/debugtalk/ApiTestEngine.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
origin	https://github.com/shadow000902/ApiTestEngine.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin	https://github.com/shadow000902/ApiTestEngine.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<li> fetch原始源代码的新版本到本地 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch debugtalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 合并两个版本的代码 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge debugtalk/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<li> 如果合并代码后有冲突，解决冲突 </li>

<li> 把合并好的最新的代码提交到自己的GitHub账号上 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h5 id="git撤销最后一次commit"><a href="#git撤销最后一次commit" class="headerlink" title="git撤销最后一次commit"></a>git撤销最后一次commit</h5><ol>
<li> 使用git log查看commit记录 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">commit-id1
commit-id2
commit-id3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果想要撤销commit-id1的话，就要选择commit-id2</p>
<li> 使用命令撤销提交 </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset commit-id2				<span class="token comment"># 只是撤销提交，修改的内容不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> commit-id2			<span class="token comment"># 撤销提交，并撤销修改的内容</span>
<span class="token function">git</span> push origin HARD <span class="token parameter variable">--force</span>		<span class="token comment"># 撤销后，强制提交并push到远程分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<li> 修改最新一次已提交但未 push 的 message </li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">"your new message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<br>

<blockquote>
<p>其他相关链接<br><a href="https://cloud.tencent.com/developer/article/1664429">Git 常用命令</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之显示当前浏览进度</title>
    <url>/post/e28ea32e.html</url>
    <content><![CDATA[<h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p>
<span id="more"></span>


<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Back to top in sidebar</span>
<span class="token key attr-name">b2t</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span>

<span class="token comment"># Scroll percent label in b2t button</span>
<span class="token key attr-name">scrollpercent</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之主页文章添加边框阴影效果</title>
    <url>/post/35232b4b.html</url>
    <content><![CDATA[<h2 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h2><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p>
<span id="more"></span>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 主页文章添加阴影效果*/</span>
<span class="token selector">.post</span> <span class="token punctuation">{</span>
   <span class="token property">margin-top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
   <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
   <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
   <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 204<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改访问URL路径</title>
    <url>/post/e9980575.html</url>
    <content><![CDATA[<h2 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h2><p>默认情况下访问URL路径为：<code>domain/2018/10/18/</code>关于本站,修改为 <code>domain/About/</code>关于本站。 编辑 Hexo 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p>
<span id="more"></span>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">permalink</span><span class="token punctuation">:</span> <span class="token value attr-value">:category/:title/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之博文置顶</title>
    <url>/post/c53d9800.html</url>
    <content><![CDATA[<h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> uninstall hexo-generator-index <span class="token parameter variable">--save</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>然后在需要置顶的文章的Front-matter中加上<code>top</code>即可：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">2018</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-10-25 16:10:03</span>
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-设置置顶标志"><a href="#2-设置置顶标志" class="headerlink" title="2. 设置置顶标志"></a>2. 设置置顶标志</h4><p>打开：<code>/themes/*/layout/_macro/post.swig</code>或者<code>_partials/post/post-meta.njk</code>，<br>定位到<code>&lt;div class="post-meta"&gt;</code>标签下，插入如下代码：</p>
<pre class="line-numbers language-velocity" data-language="velocity"><code class="language-velocity">{% if post.top %}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-thumb-tack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>7D26CD</span><span class="token punctuation">&gt;</span></span>置顶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
{% endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之静态资源压缩</title>
    <url>/post/2299cf25.html</url>
    <content><![CDATA[<h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><p>在<code>站点目录</code>下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> gulp <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<p>安装<code>gulp</code>插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp-minify-css <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-uglify <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-htmlmin <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-htmlclean <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-imagemin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 <code>Hexo 站点</code>下新建 <code>gulpfile.js</code>文件，文件内容如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> minifycss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-minify-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlclean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩css文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.css'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">minifycss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩html文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.html'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">removeComments</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minifyJS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minifyCSS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minifyURLs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩js文件</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/**/.js'</span><span class="token punctuation">,</span><span class="token string">'!./public/js/**/*min.js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩 public/demo 目录内图片</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-images'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/demo/**/*.*'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
           <span class="token literal-property property">optimizationLevel</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span>
           <span class="token literal-property property">progressive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 无损压缩jpg图片</span>
           <span class="token literal-property property">interlaced</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>
           <span class="token literal-property property">multipass</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 默认任务</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">'minify-html'</span><span class="token punctuation">,</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span><span class="token string">'minify-js'</span><span class="token punctuation">,</span><span class="token string">'minify-images'</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g
gulp
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之实现点击出现桃心效果</title>
    <url>/post/862b573a.html</url>
    <content><![CDATA[<h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p><font style="font-size:18px;"> 在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。</font></p>
<span id="more"></span>


<p><font style="font-size:18px;"> 代码如下：</font><br>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+=</span><span class="token number">.004</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">-=</span><span class="token number">.013</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">"left:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">"px;top:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">"px;opacity:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha<span class="token operator">+</span><span class="token string">";transform:scale("</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token operator">+</span><span class="token string">") rotate(45deg);background:"</span><span class="token operator">+</span>d<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onclick<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">&amp;&amp;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">"heart"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span>a<span class="token punctuation">,</span><span class="token literal-property property">x</span><span class="token operator">:</span>e<span class="token punctuation">.</span>clientX<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>e<span class="token punctuation">.</span>clientY<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">scale</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">alpha</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText<span class="token operator">=</span>e<span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"rgb("</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">}</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">requestAnimationFrame</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>requestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>webkitRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>mozRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token operator">||</span>e<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">1e3</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>
<p><font style="font-size:18px;">在<code>\themes\*\layout\_layout.swig</code>文件末尾添加:</font></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 页面点击小红心 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/src/clicklove.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之网站标题栏背景颜色</title>
    <url>/post/91a443ec.html</url>
    <content><![CDATA[<h2 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h2><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>
<span id="more"></span>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.site-meta</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> //修改为自己喜欢的颜色
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改内容区域的宽度</title>
    <url>/post/e20d3e6e.html</url>
    <content><![CDATA[<h2 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h2><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p>
<span id="more"></span>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 修改成你期望的宽度 */</span>
$content-desktop = 700px

<span class="token comment">/* 当视窗超过 1600px 后的宽度 */</span>
$content-desktop-large = 900px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之修改Logo字体</title>
    <url>/post/6d38bae0.html</url>
    <content><![CDATA[<h2 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h2><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>
<span id="more"></span>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Zitiming<span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/fonts/Zitiming.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.site-title</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 40px <span class="token important">!important</span><span class="token punctuation">;</span>
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Zitiming'</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加背景图</title>
    <url>/post/2db94f1a.html</url>
    <content><![CDATA[<h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>
<span id="more"></span>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span>cover<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之文章加密访问</title>
    <url>/post/78491cc3.html</url>
    <content><![CDATA[<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>下载 <code>hexo-blog-encrypt</code>，它将会被存储在本地浏览器的localStorage中：</p>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-blog-encrypt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="文章信息头，将-password-字段添加到文章信息头："><a href="#文章信息头，将-password-字段添加到文章信息头：" class="headerlink" title="文章信息头，将 password 字段添加到文章信息头："></a>文章信息头，将 <code>password</code> 字段添加到文章信息头：</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">title</span><span class="token punctuation">:</span> <span class="token value attr-value">Hello World</span>
<span class="token key attr-name">date</span><span class="token punctuation">:</span> <span class="token value attr-value">2016-03-30 21:18:02</span>
<span class="token key attr-name">password</span><span class="token punctuation">:</span> <span class="token value attr-value">abcd1234xxx</span>
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">title</span><span class="token punctuation">:</span> <span class="token value attr-value">Hello World</span>
<span class="token key attr-name">tags</span><span class="token punctuation">:</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">加密文章tag</span>
<span class="token key attr-name">date</span><span class="token punctuation">:</span> <span class="token value attr-value">2019-10-26 20:22:58</span>
<span class="token key attr-name">password</span><span class="token punctuation">:</span> <span class="token value attr-value">mikemessi</span>
<span class="token key attr-name">abstract</span><span class="token punctuation">:</span> <span class="token value attr-value">该文章已加密, 请输入密码查看。</span>
<span class="token key attr-name">message</span><span class="token punctuation">:</span> <span class="token value attr-value">该文章已加密, 请输入密码查看。</span>
<span class="token key attr-name">wrong_pass_message</span><span class="token punctuation">:</span> <span class="token value attr-value">密码不正确，请重新输入！</span>
<span class="token key attr-name">wrong_hash_message</span><span class="token punctuation">:</span> <span class="token value attr-value">文章不能被校验, 不过您还是能看看解密后的内容！</span>
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>在本地预览加密的文章。</p>
<h5 id="或者-修改-config-yml"><a href="#或者-修改-config-yml" class="headerlink" title="或者,修改_config.yml"></a><code>或者</code>,修改<code>_config.yml</code></h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">
<span class="token comment"># Security</span>
<span class="token key attr-name">encrypt</span><span class="token punctuation">:</span> <span class="token value attr-value"># hexo-blog-encrypt</span>
<span class="token key attr-name">  abstract</span><span class="token punctuation">:</span> <span class="token value attr-value">有东西被加密了, 请输入密码查看.</span>
<span class="token key attr-name">  message</span><span class="token punctuation">:</span> <span class="token value attr-value">您好, 这里需要密码.</span>
<span class="token key attr-name">  tags</span><span class="token punctuation">:</span>
<span class="token key attr-name">  -</span> <span class="token value attr-value">{name: tagName, password: 密码A}</span>
<span class="token key attr-name">  -</span> <span class="token value attr-value">{name: tagName, password: 密码B}</span>
<span class="token key attr-name">  template</span><span class="token punctuation">:</span> <span class="token value attr-value">&lt;div id="hexo-blog-encrypt" data-wpm="{{hbeWrongPassMessage}}" data-whm="{{hbeWrongHashMessage}}"&gt;&lt;div class="hbe-input-container"&gt;&lt;input type="password" id="hbePass" placeholder="{{hbeMessage}}" /&gt;&lt;label&gt;{{hbeMessage}}&lt;/label&gt;&lt;div class="bottom-line"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id="hbeData" type="hbeData" data-hmacdigest="{{hbeHmacDigest}}"&gt;{{hbeEncryptedData}}&lt;/script&gt;&lt;/div&gt;</span>
<span class="token key attr-name">  wrong_pass_message</span><span class="token punctuation">:</span> <span class="token value attr-value">抱歉, 这个密码看着不太对, 请再试试.</span>
<span class="token key attr-name">  wrong_hash_message</span><span class="token punctuation">:</span> <span class="token value attr-value">抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注：若文章中采用<code>_config.yml</code>中的全局配置，则文章的tags只能有一个，若有多个tags，则失效。</p>
<p>注：<code>文章信息头</code> &gt;<code> _config.yml</code> (站点根目录下的) &gt; 默认配置</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse安装SVN插件的几种方式</title>
    <url>/post/ddb18259.html</url>
    <content><![CDATA[<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><h4 id="方式一：通过Eclipse-Marketplace在线安装"><a href="#方式一：通过Eclipse-Marketplace在线安装" class="headerlink" title="方式一：通过Eclipse Marketplace在线安装"></a><font color="red">方式一：通过Eclipse Marketplace在线安装</font></h4><p>  Help–&gt;Eclipse Marketplace，搜索svn</p>
  <span id="more"></span>

  <img data-src="/post/ddb18259/em_svn_1.png" class="" title="第一步">
  <img data-src="/post/ddb18259/em_svn_2.png" class="" title="第二步">
<p>  点击Install开始安装<br>  <img data-src="/post/ddb18259/em_svn_3.png" class="" title="第三步"><br>  一步一步往下点，然后接受协议，安装完成后重启eclipse即可生效。</p>
<h4 id="方式二：通过Install-New-Software在线安装"><a href="#方式二：通过Install-New-Software在线安装" class="headerlink" title="方式二：通过Install New Software在线安装"></a><font color="red">方式二：通过Install New Software在线安装</font></h4><p>  Help -&gt; Install New Software</p>
<p>  点击add按钮，在弹出窗口中，输入name(自己为变量命的名)和插件的URL，然后点击add</p>
<p>  SVN插件与Subversion版本的对应关系如下：</p>
<p>  <a href="http://subclipse.tigris.org/update_1.6.x/">http://subclipse.tigris.org/update_1.6.x/</a> （Subversion 1.6.x）</p>
<p>  <a href="http://subclipse.tigris.org/update_1.8.x/">http://subclipse.tigris.org/update_1.8.x/</a> （Subversion 1.7.x）</p>
<p>  <a href="http://subclipse.tigris.org/update_1.10.x/">http://subclipse.tigris.org/update_1.10.x/</a> （Subversion 1.8.x）</p>
<p>  <a href="https://dl.bintray.com/subclipse/releases/subclipse/4.2.x/">https://dl.bintray.com/subclipse/releases/subclipse/4.2.x/</a> （Subversion 1.9.x）</p>
  <img data-src="/post/ddb18259/em_svn_4.png" class="" title="第四步">
<p>  全部勾选，然后点击Next</p>
  <img data-src="/post/ddb18259/em_svn_5.png" class="" title="第五步">
<p>  一步一步往下点，然后接受协议，安装完成后重启eclipse即可生效。</p>
<h4 id="方式三：通过下载插件，离线安装"><a href="#方式三：通过下载插件，离线安装" class="headerlink" title="方式三：通过下载插件，离线安装"></a><font color="red">方式三：通过下载插件，离线安装</font></h4><p>   1、下载需要的插件包，<a href="https://github.com/subclipse/subclipse/wiki">https://github.com/subclipse/subclipse/wiki</a></p>
   <img data-src="/post/ddb18259/em_svn_6.png" class="" title="第一步">
<p>   这里有最新版的插件下载地址，也有旧版本的插件下载地址，根据自己的需要选择下载。</p>
   <img data-src="/post/ddb18259/em_svn_7.png" class="" title="第二步">
<p>   下载的包里会有”plugins”和”features”两个文件夹</p>
   <img data-src="/post/ddb18259/em_svn_8.png" class="" title="第三步">
<p>   2、找到eclipse目录下”plugins”和”features”文件夹，将下载好的的svn插件对应名称文件夹下的内容复制到eclipse的同名文件夹中</p>
<p>   3、重启eclipse即可生效</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之基本操作</title>
    <url>/post/343aa4a8.html</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre><code>git

Node.js
</code></pre>
<h4 id="Hexo安装：npm-install-hexo-g"><a href="#Hexo安装：npm-install-hexo-g" class="headerlink" title="Hexo安装：npm install hexo -g"></a>Hexo安装：npm install hexo -g</h4><span id="more"></span>

<p>安装完成后检查：<code>hexo -v</code></p>
<h6 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h6><p>初始化文件夹：<code>hexo init</code></p>
<p>开启服务器：<code>hexo s</code></p>
<p>Ctrl+C为退出服务器，开启服务器后在 <a href="http://localhost:4000/">http://localhost:4000/</a> 中预览博客</p>
<p>清除缓存：<code>hexo clean</code></p>
<p>生成页面：<code>hexo g</code></p>
<p>上传到github：<code>hexo d</code></p>
<p>查看帮助：<code>hexo help</code></p>
<p>查看版本：<code>hexo version</code></p>
<p>新建文章：<code>hexo new "name"</code></p>
<p>新建页面：<code>hexo new page "name"</code></p>
<p>安装插件：<code>npm install --save hexo-admin(插件名)</code></p>
<p>卸载插件：<code>npm uninstall hexo-admin(插件名)</code></p>
<h6 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h6><p>ssh key</p>
<blockquote>
<p>hexo主要配置文件：_config.yml</p>
</blockquote>
<p>首次上传到github安装插件：<code>npm install hexo-deployer-git --save</code></p>
<h6 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h6><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<blockquote>
<p>配置文件：post_asset_folder: true</p>
</blockquote>
<p>坑点：图片链接要写”/“，不要写”"</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之踩坑</title>
    <url>/post/ad07d2fa.html</url>
    <content><![CDATA[<h3 id="hexo-本身-marldown不好用"><a href="#hexo-本身-marldown不好用" class="headerlink" title="hexo 本身 marldown不好用"></a>hexo 本身 marldown不好用</h3><h5 id="hexo-renderer-markdown-it-插件"><a href="#hexo-renderer-markdown-it-插件" class="headerlink" title="hexo-renderer-markdown-it 插件"></a>hexo-renderer-markdown-it 插件</h5><p>为了更好地写markdown文档</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked <span class="token parameter variable">--save</span>
<span class="token function">npm</span> i hexo-renderer-markdown-it <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>

<p>添加到<code>根目录</code>_config.yml文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span>
<span class="token comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span>
<span class="token key atrule">markdown</span><span class="token punctuation">:</span>
  <span class="token key atrule">render</span><span class="token punctuation">:</span>
    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>
  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sub
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sup
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>emoji  <span class="token comment"># add emoji</span>
  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>
    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'v'</span>
    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor
    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> ¶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之图片问题</title>
    <url>/post/172c7c2b.html</url>
    <content><![CDATA[<h5 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h5><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image <span class="token parameter variable">--save</span>

  <span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image <span class="token parameter variable">--save</span>  <span class="token punctuation">(</span>推荐这个<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<pre class="line-numbers language-none"><div class="caption"><span>完整代码</span></div><code class="language-none">'use strict';
var cheerio = require('cheerio');

// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string
function getPosition(str, m, i) {
  return str.split(m, i).join(m).length;
}

var version = String(hexo.version).split('.');
hexo.extend.filter.register('after_post_render', function(data){
  var config = hexo.config;
  if(config.post_asset_folder){
    	var link = data.permalink;
	if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)
	   var beginPos = getPosition(link, '/', 1) + 1;
	else
	   var beginPos = getPosition(link, '/', 3) + 1;
	// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".
	var endPos = link.lastIndexOf('/') + 1;
    link = link.substring(beginPos, endPos);

    var toprocess = ['excerpt', 'more', 'content'];
    for(var i = 0; i &lt; toprocess.length; i++){
      var key = toprocess[i];
 
      var $ = cheerio.load(data[key], {
        ignoreWhitespace: false,
        xmlMode: false,
        lowerCaseTags: false,
        decodeEntities: false
      });

      $('img').each(function(){
		if ($(this).attr('src')){
			// For windows style path, we replace '\' to '/'.
			var src = $(this).attr('src').replace('\\', '/');
			if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
			   !/^\s*\//.test(src)) {
			  // For "about" page, the first part of "src" can't be removed.
			  // In addition, to support multi-level local directory.
			  var linkArray = link.split('/').filter(function(elem){
				return elem != '';
			  });
			  var srcArray = src.split('/').filter(function(elem){
				return elem != '' &amp;&amp; elem != '.';
			  });
			  if(srcArray.length &gt; 1)
				srcArray.shift();
			  src = srcArray.join('/');
			  $(this).attr('src', config.root + link + src);
			  console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src);
			}
		}else{
			console.info&amp;&amp;console.info("no src attr, skipped...");
			console.info&amp;&amp;console.info($(this));
		}
      });
      data[key] = $.html();
    }
  }
});
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打开_config.yml文件，修改下述内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="二、问题推测"><a href="#二、问题推测" class="headerlink" title="二、问题推测"></a>二、问题推测</h5><h6 id="一-本地图片没有有效上传至github仓库中，导致引用无效"><a href="#一-本地图片没有有效上传至github仓库中，导致引用无效" class="headerlink" title="(一)本地图片没有有效上传至github仓库中，导致引用无效"></a>(一)本地图片没有有效上传至github仓库中，导致引用无效</h6><pre><code>解决方案：安装插件（回看前文）
   
</code></pre>
<h6 id="（二）本地图片没有存放在同名文件夹中"><a href="#（二）本地图片没有存放在同名文件夹中" class="headerlink" title="（二）本地图片没有存放在同名文件夹中"></a>（二）本地图片没有存放在同名文件夹中</h6><pre><code>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中
</code></pre>
<h6 id="（三）图片路径出错"><a href="#（三）图片路径出错" class="headerlink" title="（三）图片路径出错"></a>（三）图片路径出错</h6><p>解决方案：打开_config.yml修改下述内容<br><img style="margin-left:30px;" data-src="https://img-blog.csdnimg.cn/20181115112941162.png"></p>
<h6 id="（四）相对路径引用的标签插件"><a href="#（四）相对路径引用的标签插件" class="headerlink" title="（四）相对路径引用的标签插件"></a>（四）相对路径引用的标签插件</h6><pre class="line-numbers language-none"><code class="language-none">通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页
上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的  
发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><small><strong>也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片。</strong></small></p>
<!-- 注释 -->



<blockquote><p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code>，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>
</blockquote>


<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>% asset_img example.jpg This is an example image %<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 编辑器日常使用语法记录</title>
    <url>/post/9c39465b.html</url>
    <content><![CDATA[<h4 id="段首缩进"><a href="#段首缩进" class="headerlink" title="段首缩进"></a>段首缩进</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下面用菜根谭中一段做例<br>  好丑心太明，则物不契；贤愚心太明，则人不亲。士君子须是内精明而外浑厚，使好丑两得其平，贤愚共受其益，才是生成的德量。</p>
<span id="more"></span>

<h4 id="文本局中"><a href="#文本局中" class="headerlink" title="文本局中"></a>文本局中</h4><blockquote class="blockquote-center">
<p>夜宿山寺<br>唐 · 李白<br>危楼高百尺，手可摘星辰。<br>不敢高声语，恐惊天上人。</p>

</blockquote>

<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/post/1.jpg<span class="token punctuation">)</span>

<span class="token punctuation">{</span>% asset_img jkp.jpeg 相对路径示例图 %<span class="token punctuation">}</span>  推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img data-src="/post/9c39465b/child01.jpg" alt="小女孩"></p>
<img data-src="/post/9c39465b/child01.jpg" class="" title="小女孩">

<h4 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>escape</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- more --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>escape</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ol>
  <li>文字链接</li>
  
  <pre class="line-numbers language-none"><code class="language-none">[github](www.github.com)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <li>网址链接</li>
  
  <pre class="line-numbers language-none"><code class="language-none">&lt;www.Google.hk&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>




<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><pre class="line-numbers language-none"><code class="language-none">| 姓名 | 性别 | 电话 |
| :--- | :----: | ----: |
| 张三 | 男 | 123456789123 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="center">性别</th>
<th align="right">电话</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="center">男</td>
<td align="right">123456789123</td>
</tr>
</tbody></table>
<h4 id="图片墙"><a href="#图片墙" class="headerlink" title="图片墙"></a>图片墙</h4><pre class="line-numbers language-none"><code class="language-none">{% grouppicture [group]-[layout] %}{% endgrouppicture %}
{% gp [group]-[layout] %}{% endgp %}

[group]  : 要在组中添加的图片总数。
[layout] : 要显示的组下的默认图片。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-none"><code class="language-none">{% gp 4-4 %}
  ![](/photos/images/1.jpg)
  ![](/photos/images/2.jpg)
  ![](/photos/images/3.jpg)
  ![](/photos/images/4.jpg)
{% endgp %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/photos/images/1.jpg"></div><div class="group-picture-column"><img data-src="/photos/images/2.jpg"></div><div class="group-picture-column"><img data-src="/photos/images/3.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="/photos/images/10.jpg"></div></div></div>


<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><pre class="line-numbers language-none"><code class="language-none">{% button #, 开始 %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a class="btn" href="#">开始</a>

<pre class="line-numbers language-none"><code class="language-none">{% btn #, Text %} {% btn #, 取消,, Title %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a class="btn" href="#">Text</a> <a class="btn" href="#" title="Title">取消</a>


<pre class="line-numbers language-none"><code class="language-none">{% button url, text, icon [class], [title] %}
&lt;!-- 标签别名 --&gt;
{% btn url, text, icon [class], [title] %}

url     : 绝对或相对URL
text    : 按钮文字，如果未指定图标则为必须
icon    : FontAwesome图标名称（开头没有'fa-'）。如果未指定文本，则为必需
[class] : FontAwesome类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。
[title] : 鼠标悬停时的工具提示，可选参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用：</p>
<p>最好添加<code>&lt;div&gt;标签</code>，测试时没加div，下面显示不完全，加上非常美观。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;{% btn https://www.zhyong.cn ,首页,home fa-2x,这是YouForever的首页%}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示：</p>
<div><a class="btn" href="https://blog.xiaosige.com/" title="这是leeze的首页"><i class="fa fa-home fa-fw"></i>首页</a></div>


<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><pre class="line-numbers language-none"><code class="language-none">{% label [class]@Text %}

[class] : default | primary | success | info | warning | danger.
          '@Text' 可以指定是否有空格
          例如。 'success @text'类似于'success @ text'。
          如果未指定，则将选择默认类。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Lorem {% label @ipsum %} {% label primary@dolor sit %} amet, consectetur {% label success@adipiscing elit, %} sed {% label info@do eiusmod %} tempor incididunt ut labore et dolore magna aliqua.

Ut enim *{% label warning @ad %}* minim veniam, quis **{% label danger@nostrud %}** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate ~~{% label default @velit %}~~ &lt;mark&gt;esse&lt;/mark&gt; cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Lorem <mark class="label ">ipsum</mark> <mark class="label primary">dolor sit</mark> amet, consectetur <mark class="label success">adipiscing elit,</mark> sed <mark class="label info">do eiusmod</mark> tempor incididunt ut labore et dolore magna aliqua.</p>
<p>Ut enim <em><mark class="label warning">ad</mark></em> minim veniam, quis <strong><mark class="label danger">nostrud</mark></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
<p>Duis aute irure dolor in reprehenderit in voluptate <del><mark class="label default">velit</mark></del> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><pre class="line-numbers language-none"><code class="language-none">{% note [class] [no-icon] %}
任何内容（支持内联标签）
{% endnote %}

[class]   : default | primary | success | info | warning | danger.
[no-icon] : 禁用备注中的图标

所有参数都是可选的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">{% note %}
无任何样式
{% endnote %}

{% note success %}
成功的笔记
{% endnote %}

{% note primary %}
#### Primary Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div class="note primary"><h5 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<h4 id="pdf-文件"><a href="#pdf-文件" class="headerlink" title="pdf 文件"></a>pdf 文件</h4><p>1,第一方法</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" width="830" height="800" scroll="no"&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2,第二方法</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;embed src="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" width="840" height="800"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这两种方法效果是一样的，但是不够完美，pdf 文件不能随窗口大小变化，后读发现方法在更新。</p>
<p>启用PDF标签插件：<a href="https://github.com/theme-next/theme-next-pdf">https://github.com/theme-next/theme-next-pdf</a></p>
<p>官方教程<br><a href="https://theme-next.org/docs/tag-plugins/pdf">https://theme-next.org/docs/tag-plugins/pdf</a></p>
<p>使用：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf url [height] %}

[url]    : 相对路径
[height] : 可选参数，pdf展示的高度, e.g. 800px.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例1：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf https://zhyong-cn-file.oss-cn-shanghai.aliyuncs.com/books%2Fbyte-of-python-chinese-edition.pdf %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div class="pdf-container" data-target="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" data-height="500px"></div>

<p>示例2：</p>
<pre class="line-numbers language-none"><code class="language-none">{% pdf http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div class="pdf-container" data-target="http://lc-0ww4yxjs.cn-n1.lcfile.com/510df791fa9b2590c109/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.pdf" data-height="500px"></div>

<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>用于页内跳转。其中定义id地方，虽然不太美观，不过只能写HTML。<br>语法</p>
<pre class="line-numbers language-none"><code class="language-none">[点击我跳转到锚点](#jump)
&lt;div id = "jump"&gt;我是一个锚点，跳到我这里来&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用 # 号可标记1 - 6级标题，一级标题对应 1 个 # 号，二级标题对应 2 个 # 号，以此类推。</p>
<pre class="line-numbers language-none"><code class="language-none"># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><pre class="line-numbers language-none"><code class="language-none">
*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>显示效果如下：</p>
<p><em>斜体文本</em></p>
<p><em>斜体文本</em></p>
<p><strong>粗体文本</strong> </p>
<p><strong>粗体文本</strong></p>
<p><em><strong>粗斜体文本</strong></em></p>
<p><em><strong>粗斜体文本</strong></em></p>
<h4 id="字号及颜色"><a href="#字号及颜色" class="headerlink" title="字号及颜色"></a>字号及颜色</h4><pre class="line-numbers language-none"><code class="language-none">&lt;font size=1&gt;大小为1的字体&lt;/font&gt;
&lt;font size=6&gt;大小为6的字体&lt;/font&gt;

&lt;font color=gray size=4&gt;gray颜色的字&lt;/font&gt;
&lt;font color=green size=4&gt;green颜色的字&lt;/font&gt;
&lt;font color=hotpink size=4&gt;hotpink颜色的字&lt;/font&gt;
&lt;font color=LightCoral size=4&gt;LightCoral颜色的字&lt;/font&gt;
&lt;font color=LightSlateGray size=4&gt;LightSlateGray颜色的字&lt;/font&gt;
&lt;font color=orangered size=4&gt;orangered颜色的字&lt;/font&gt;
&lt;font color=red size=4&gt;red颜色的字&lt;/font&gt;
&lt;font color=springgreen size=4&gt;springgreen颜色的字&lt;/font&gt;
&lt;font color=Turquoise size=4&gt;Turquoise颜色的字&lt;/font&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><font size="1">大小为1的字体</font><br><br><font size="6">大小为6的字体</font><br><br><font color="gray" size="4">gray颜色的字</font><br><br><font color="green" size="4">green颜色的字</font><br><br><font color="hotpink" size="4">hotpink颜色的字</font><br><br><font color="LightCoral" size="4">LightCoral颜色的字</font><br><br><font color="LightSlateGray" size="4">LightSlateGray颜色的字</font><br><br><font color="orangered" size="4">orangered颜色的字</font><br><br><font color="red" size="4">red颜色的字</font><br><br><font color="springgreen" size="4">springgreen颜色的字</font><br><br><font color="Turquoise" size="4">Turquoise颜色的字</font></p>
<h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>有多种方法都可以建立分隔线：3个以上的星号，3个以上的减号，3个以上的下划线，也可以在星号、减号、下划线中间插入空格，这几种方式都可以建立分隔线。</p>
<pre class="line-numbers language-none"><code class="language-none">
***
* * *
******
- - -
_ _ _
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><pre class="line-numbers language-none"><code class="language-none">我没有删除线
我也没有删除线
~~我有删除线~~
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<p>我没有删除线<br>我也没有删除线<br><del>我有删除线</del></p>
<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>Markdown中并无下划线的原生语法，可以通过HTML的<u>标签来实现。</u></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;u&gt;我带下划线&lt;/u&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示效果如下：</p>
<p><u>我带下划线</u></p>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表使用星号，加号或是减号作为标记。</p>
<pre class="line-numbers language-none"><code class="language-none">* 列表项1
* 列表项2

+ 列表项1
+ 列表项2

- 列表项1
- 列表项2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<ul>
<li>列表项1</li>
<li>列表项2</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表使用数字加上 . 号来表示，注意 . 号和实际内容之间需要加一个空格。</p>
<pre class="line-numbers language-none"><code class="language-none">1. 有序列表项1
2. 有序列表项2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>显示效果如下：</p>
<ol>
<li>有序列表项1</li>
<li>有序列表项2</li>
</ol>
<h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需要在子列表选项的前面添加 4 个空格即可。</p>
<pre class="line-numbers language-none"><code class="language-none">* 无序列表1
    1. 有序列表1.1
    2. 有序列表1.2
* 无序列表2
    - 无序列表2.1
    - 无序列表2.2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无序列表1<ol>
<li>有序列表1.1</li>
<li>有序列表1.2</li>
</ol>
</li>
<li>无序列表2<ul>
<li>无序列表2.1</li>
<li>无序列表2.2</li>
</ul>
</li>
</ul>
<h4 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h4><p>区块使用 &gt; 符号，后面加上一个空格。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; 区块
&gt; Markdown
&gt; 用Markdown写文章，爽！
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>显示效果如下：</p>
<blockquote>
<p> 区块 Markdown 用Markdown写文章，爽！</p>
</blockquote>
<p>区块嵌套：每一层嵌套加上 &gt; 符号和空格</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; 区块
&gt; &gt; 嵌套1
&gt; &gt; &gt; 嵌套2
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>区块</p>
<blockquote>
<p>嵌套1</p>
<blockquote>
<p>嵌套2</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="折叠-显示-隐藏-部分文字"><a href="#折叠-显示-隐藏-部分文字" class="headerlink" title="折叠(显示/隐藏)部分文字"></a>折叠(显示/隐藏)部分文字</h4><p><code>npm install hexo-hide-posts --save</code></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        title
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<div class="spoiler collapsed">
    <div class="spoiler-title">
        word
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<div class="spoiler collapsed">
    <div class="spoiler-title">
        Several spaces in the title
    </div>
    <div class="spoiler-content">
        <p>content</p>

    </div>
</div>

<p>二选一或者<br><code>npm install hexo-spoiler --save</code></p>
<h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><p> <del>这是一条删除线</del></p>
<p> <em>这里不会显示斜体</em></p>
<p> <code>code</code></p>
<p> <code>more code</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之搭建个人博客</title>
    <url>/post/dfea82e5.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。hexo 博客在 Linux 系统中搭建是非常简单的，在 WIN 系统中比较复杂，我们接触的手机📱永远要比电脑的时间要多那么我们可以在安卓手机上使用 termux 来搭建，这样随时随地都可以写做和发表文章。</p>
  <span id="more"></span> 

<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><div class="note success no-icon"><ol>
<li> 注册 <font color="LightCoral" size="4">github</font> 账号 </li>
<li> 添加 <font color="LightCoral" size="4">username.github.io</font> 仓库 </li>
<li> 搭建 <font color="LightCoral" size="4">git</font> 环境 </li>
<li> 配置 <font color="LightCoral" size="4">ssh</font> </li>
<li> 连接 <font color="LightCoral" size="4">github</font> </li>
<li> 安装 <font color="LightCoral" size="4">Node.js</font> </li>
<li> 搭建 <font color="LightCoral" size="4">Hexo</font> 环境 </li>
</ol>
</div>



<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li> <mark class="label danger">Node</mark> 环境安装：</li>

<p>   参考：<a href="/post/c0a81ac4.html" title="Mac正确的安装和使用nvm">Mac正确的安装和使用nvm</a></p>
<li> <mark class="label danger">Hexo</mark> 环境安装：</li>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</ol>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>   安装完成之后，新建一个文件夹(例如: <code>blog</code>)，执行以下命令进行初始化：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> blog
$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装核心组件"><a href="#安装核心组件" class="headerlink" title="安装核心组件"></a>安装核心组件</h3><p>   安装 npm 核心组件支持</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>   新建完成后，<code>cd blog</code>，查看文件夹目录<br> </p><div class="note primary no-icon"><p>_config.yml 文件是网站的配置文件，可以在其中配置网站的大部分参数。<br>package.json 文件是应用程序的信息。<br>source 是资源文件夹，是用来存放 xxxu 用户资源的地方。<br>themes 是主题文件夹，Hexo 会根据主题来生成不同的静态页面。<br>scaffolds 是模板件夹，当新建文章的时候，Hexo 会根据模板来建立文件。
 </p>
</div><p></p>
<h3 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h3><ol>

<li>下载主题：</li>

<p>   <a href="https://hexo.io/">Hexo</a> 的主题非常丰富可以去<a href="https://hexo.io/themes/">官方主题</a>下载；下面有演示我使用的主题 <a href="https://github.com/theme-next/hexo-theme-next">next</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<li>修改主配置文件：</li>


<p>   在<code>站点</code>配置文件<code>_config.yml</code> 开启 next 主题，修改<code>theme</code>属性，注意 <code>theme: </code>后要加<code>空格</code>，具体的站点和主题信息配置请自行去 <a href="https://hexo.io/zh-cn/">hexo</a> 和 <a href="http://theme-next.iissnan.com/">next 主题</a>文档查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">vi</span> _config.yml

theme: next <span class="token comment"># 找到 theme</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<li>修改主题配置文件：</li>

<p>   在<code>blog</code>文件夹下，新建<code>_config.next.yml</code>，存放主题修改内容。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">touch</span> _config.next.yml  <span class="token comment"># themes/next/_config.yml 中需要修改的，放在这里。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</ol>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 生成静态页面，生成的内容在public文件夹下</span>
hexo s <span class="token comment"># 启动本地服务，进行文章预览调试。hexo s --debug 命令可以用来调试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><p>   配置 ssh 密钥及 github 或者 gitee 部署</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
ssh-key <span class="token punctuation">..</span><span class="token punctuation">..</span>
省略。。。
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"your name"</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"email@email.com"</span>
省略。。。
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li>安装 <font color="LightCoral" size="3">hexo-deployer-git</font> 插件</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li>打开 Hexo 主文件夹下的<font color="LightCoral" size="3">_config.yml</font>，设置其中的 <font color="hotpink" size="3">deploy</font> 参数</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">vi</span> _config.yml

deploy:
    type: <span class="token function">git</span> 
    repo: git@github.com:leeze2012/leeze2012.github.io.git
    branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li>安装完成插件之后，<font color="LightCoral" size="3">blog</font> 目录下使用以下命令部署</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d <span class="token parameter variable">-g</span> <span class="token comment"># 在部署前先生成</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</ol>


<h3 id="Next-常用命令"><a href="#Next-常用命令" class="headerlink" title="Next 常用命令"></a>Next 常用命令</h3><div style="height: 10px;"></div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean     <span class="token comment"># 清理之前生成的内容，即public文件</span>
$ hexo g         <span class="token comment"># 生成静态文件</span>
$ hexo d         <span class="token comment"># 部署</span>
$ hexo s         <span class="token comment"># 启动本地服务，可以通过http://localhost:4000查看</span>
$ hexo s <span class="token parameter variable">--debug</span> <span class="token comment"># 使用debug模式启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>

<li>在 github 新建一个叫 blog 的仓库。</li>

<li>在本地博客文件夹创建 git 版本库，如果没有安装 git 必须先安装 git。</li>

<li>进入需要备份 blog 目录。</li>

<li>创建版本库。</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog
<span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>这个时候 blog 的版本库已经创建好了。<br>验证是否成功，如果有一个 <font color="hotpink" size="4"> .git </font> 的隐藏文件就说明创建成功。<br>查看隐藏文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 连接上面 github 创建的仓库</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin github.com:leeze2012/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 添加备份文件 </li>

<p><code>source/</code> <code>scripts/</code> <code>themes/</code> <code>_config.yml</code> <code>_config.next.yml</code> <code>scaffolds/</code> <code>package.json</code> <code>.gitignore</code> 这些文件需要备份</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> source/ scripts/ themes/ _config.yml _config.next.yml scaffolds/ package.json .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>修改.gitignore文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> .gitignore

   .DS_Store
   themes/
   db.json
   *.log
   node_modules/
   public/
   .deploy*/
   .idea/

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 注释备份内容，明确的注释可以回退版本</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"博客备份"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 第一次强制上传文件到 github 仓库</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>
这样博客就备份成功了，之后备份直接前面 <mark class="label danger">6</mark> 、<mark class="label danger">7</mark> 步，第 <font color="green" size="4">8</font> 部直接使用下面命令就可以了

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 安装<font color="LightCoral" size="4">shelljs</font>模块,实现自动备份。</li>

<div style="height: 10px;"></div>

<p>  要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> shelljs <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div style="height: 10px;"></div>
编写自动备份脚本

<p>待到模块安装完成，在<code>Hexo根目录</code>的<code>scripts</code>文件夹下新建一个<code>js文件</code>，文件名<code>随意取</code>。</p>
<p>如果没有<code>scripts</code>目录，请新建一个。</p>
<p>然后在脚本中，写入以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">'shelljs/global'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

try <span class="token punctuation">{</span>
	hexo.on<span class="token punctuation">(</span><span class="token string">'deployAfter'</span>, <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>//当deploy完成后执行备份
		run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> catch <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console.log<span class="token punctuation">(</span><span class="token string">"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function-name function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>which<span class="token punctuation">(</span><span class="token string">'git'</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>
		echo<span class="token punctuation">(</span><span class="token string">'Sorry, this script requires git'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		echo<span class="token punctuation">(</span><span class="token string">"======================Auto Backup Begin==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cd<span class="token punctuation">(</span><span class="token string">'~/git/blog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //此处修改为Hexo根目录路径
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">'git add --all'</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			echo<span class="token punctuation">(</span><span class="token string">'Error: Git add failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">'git commit -am "Form auto backup script\'</span>s commit<span class="token string">"').code !== 0) {
			echo('Error: Git commit failed');
			exit(1);

		}
		if (exec('git push origin master').code !== 0) {
			echo('Error: Git push failed');
			exit(1);

		}
		echo("</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Auto Backup <span class="token assign-left variable">Complete</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>"<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<ul>
<li><p>其中，需要修改第<code>17</code>行的<code>~/git/blog</code>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</p>
</li>
<li><p>如果你的Git远程仓库名称不为<code>origin</code>的话，还需要修改第<code>28</code>行执行的push命令，修改成自己的远程仓库名和相应的分支名。</p>
</li>
<li><p>保存脚本并退出，然后执行hexo deploy命令，将会得到类似以下结果:</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  Deploying: <span class="token function">git</span>
INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.
INFO  Copying files from public folder<span class="token punctuation">..</span>.
INFO  Copying files from extend dirs<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>master 2fd18b4<span class="token punctuation">]</span> Site updated: <span class="token number">2020</span>-03-02 <span class="token number">13</span>:46:34
 <span class="token number">4</span> files changed, <span class="token number">42</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">4</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
枚举对象: <span class="token number">19</span>, 完成.
对象计数中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">19</span>/19<span class="token punctuation">)</span>, 完成.
使用 <span class="token number">8</span> 个线程进行压缩
压缩对象中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">8</span>/8<span class="token punctuation">)</span>, 完成.
写入对象中: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">10</span>/10<span class="token punctuation">)</span>, <span class="token number">4.25</span> KiB <span class="token operator">|</span> <span class="token number">1.06</span> MiB/s, 完成.
总共 <span class="token number">10</span> （差异 <span class="token number">7</span>），复用 <span class="token number">0</span> （差异 <span class="token number">0</span>）
remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7</span>/7<span class="token punctuation">)</span>, completed with <span class="token number">7</span> <span class="token builtin class-name">local</span> objects.
To github.com:leeze2012/leeze2012.github.io.git
   42f1ef1<span class="token punctuation">..</span>2fd18b4  HEAD -<span class="token operator">&gt;</span> master
分支 <span class="token string">'master'</span> 设置为跟踪来自 <span class="token string">'git@github.com:leeze2012/leeze2012.github.io.git'</span> 的远程分支 <span class="token string">'master'</span>。
INFO  Deploy done: <span class="token function">git</span>
INFO  Deploying: baidu_url_submitter
INFO  Submitting urls
https://blog.xiaosige.com/post/c1dab809.html
https://blog.xiaosige.com/post/73879c7f.html
<span class="token punctuation">{</span><span class="token string">"remain"</span>:99984,<span class="token string">"success"</span>:2<span class="token punctuation">}</span>
INFO  Deploy done: baidu_url_submitter
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Auto Backup <span class="token assign-left variable">Begin</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token punctuation">[</span>master af0e0a8<span class="token punctuation">]</span> Form auto backup script's commit
 <span class="token number">2</span> files changed, <span class="token number">75</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> scripts/.bc.js.swo
To github.com:leeze2012/blog.git
   49dd62c<span class="token punctuation">..</span>af0e0a8  master -<span class="token operator">&gt;</span> master
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Auto Backup <span class="token assign-left variable">Complete</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦</p>
</ol>

<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><ol>

<li> git clone 自己备份的博客源代码克隆备份的 bolg 源文件地址是你自己的地址这里不做演示</li>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>版本库的网址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地目录名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> bolg
hexo init
<span class="token punctuation">..</span>.
<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<li> 安装相应插件：</li>

<p>   本人<code>package.json</code>，<a href="#pkJson">参考</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> valine <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-symbols-count-time <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-blog-encrypt <span class="token parameter variable">--save</span>

<span class="token function">npm</span> uninstall hexo-generator-index <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top <span class="token parameter variable">--save</span>

<span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image <span class="token parameter variable">--save</span>  <span class="token punctuation">(</span>推荐这个<span class="token punctuation">)</span> 

<span class="token comment">## 以下参考选择</span>

<span class="token function">npm</span> <span class="token function">install</span> hexo-tag-aplayer <span class="token parameter variable">--save</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-tag-dplayer <span class="token parameter variable">--save</span>

<span class="token function">npm</span> <span class="token function">install</span> hexo-hide-posts <span class="token parameter variable">--save</span>
<span class="token comment">#二选一</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-spoiler <span class="token parameter variable">--save</span>

<span class="token comment">## 代码主题不用highlight，改用prismjs时，可以扩展prismjs的主题</span>
<span class="token comment">## npm i -S hexo-prism-plugin </span>
<span class="token comment">## 参考：https://theme-next.js.org/highlight/</span>
<span class="token function">npm</span> <span class="token function">install</span> prism-themes 

<span class="token comment"># 添加 RSS 订阅支持（可选的）atom/rss2</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-generator-feed

<span class="token comment"># 添加 emoji 表情支持（可选的）</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis <span class="token parameter variable">--save</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div style="height: 10px;"></div>

<p><strong><code>注：</code></strong> ，使用<code>hexo-asset-image</code>，参考：<a href="/post/172c7c2b.html" title="hexo之图片问题">hexo之图片问题</a></p>
<div class="note warning no-icon"><p><strong>在 npm 5 之前的版本</strong></p>
<p>   使用 <code>npm install</code> 默认选项安装包时，仅仅会把包下载到 <code>node_modules/</code> 中，并<code>不会</code>同时修改 <code>package.json</code>。而使用 <code>--save</code> 选项就可以在安装包的同时，<code>修改</code> <code>package.json</code> 文件。</p>
<p><strong>在 npm 5 之后的版本</strong></p>
<p>   <code>npm install</code> 安装包时，默认便<code>会修改</code> <code>package.json</code> 文件，所以 <code>--save</code> 选项已经<code>不再需要</code>了。</p>
</div>

<p><strong><em><font color="orangered" size="4">注：一些东西摘自网上，未亲自验证。</font></em></strong></p>
<li> package.json：</li>

<div id="pkJson"></div>

<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">{
<span class="token key attr-name">  "name"</span><span class="token punctuation">:</span> <span class="token value attr-value">"hexo-site",</span>
<span class="token key attr-name">  "version"</span><span class="token punctuation">:</span> <span class="token value attr-value">"0.0.0",</span>
<span class="token key attr-name">  "private"</span><span class="token punctuation">:</span> <span class="token value attr-value">true,</span>
<span class="token key attr-name">  "scripts"</span><span class="token punctuation">:</span> <span class="token value attr-value">{</span>
<span class="token key attr-name">    "build"</span><span class="token punctuation">:</span> <span class="token value attr-value">"hexo generate",</span>
<span class="token key attr-name">    "clean"</span><span class="token punctuation">:</span> <span class="token value attr-value">"hexo clean",</span>
<span class="token key attr-name">    "deploy"</span><span class="token punctuation">:</span> <span class="token value attr-value">"hexo deploy",</span>
<span class="token key attr-name">    "server"</span><span class="token punctuation">:</span> <span class="token value attr-value">"hexo server"</span>
  },
<span class="token key attr-name">  "hexo"</span><span class="token punctuation">:</span> <span class="token value attr-value">{</span>
<span class="token key attr-name">    "version"</span><span class="token punctuation">:</span> <span class="token value attr-value">"5.2.0"</span>
  },
<span class="token key attr-name">  "dependencies"</span><span class="token punctuation">:</span> <span class="token value attr-value">{</span>
<span class="token key attr-name">    "hexo"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^5.2.0",</span>
<span class="token key attr-name">    "hexo-abbrlink"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.2.1",</span>
<span class="token key attr-name">    "hexo-asset-image"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-baidu-url-submit"</span><span class="token punctuation">:</span> <span class="token value attr-value">"0.0.6",</span>
<span class="token key attr-name">    "hexo-blog-encrypt"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^3.0.13",</span>
<span class="token key attr-name">    "hexo-cake-moon-menu"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.3.1",</span>
<span class="token key attr-name">    "hexo-deployer-git"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.1.0",</span>
<span class="token key attr-name">    "hexo-filter-github-emojis"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.1.0",</span>
<span class="token key attr-name">    "hexo-generator-archive"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-generator-baidu-sitemap"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.1.9",</span>
<span class="token key attr-name">    "hexo-generator-category"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-generator-feed"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^3.0.0",</span>
<span class="token key attr-name">    "hexo-generator-index-pin-top"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.2.2",</span>
<span class="token key attr-name">    "hexo-generator-searchdb"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.3.3",</span>
<span class="token key attr-name">    "hexo-generator-sitemap"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.1.0",</span>
<span class="token key attr-name">    "hexo-generator-tag"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-hide-posts"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.1.1",</span>
<span class="token key attr-name">    "hexo-inject"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-neat"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.9",</span>
<span class="token key attr-name">    "hexo-related-popular-posts"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^5.0.1",</span>
<span class="token key attr-name">    "hexo-renderer-ejs"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-renderer-marked"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^3.3.0",</span>
<span class="token key attr-name">    "hexo-renderer-pug"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.0.0",</span>
<span class="token key attr-name">    "hexo-renderer-stylus"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.0.1",</span>
<span class="token key attr-name">    "hexo-server"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^2.0.0",</span>
<span class="token key attr-name">    "hexo-sliding-spoiler"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.2.1",</span>
<span class="token key attr-name">    "hexo-symbols-count-time"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.7.1",</span>
<span class="token key attr-name">    "hexo-tag-friends"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.3.4",</span>
<span class="token key attr-name">    "prismjs"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.21.0",</span>
<span class="token key attr-name">    "shelljs"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^0.8.4",</span>
<span class="token key attr-name">    "valine"</span><span class="token punctuation">:</span> <span class="token value attr-value">"^1.4.14"</span>
  }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</ol>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><p>  <a href="https://realfavicongenerator.net/">网站图标生成网站</a></p>
<p>  只要把<code>png</code>图片放进去（尺寸不能太大）</p>
<p>  就可以生成一套图标（苹果手机桌面图标，网页图标，win磁贴图标等等）</p>
<img data-src="/post/dfea82e5/faviconbuild.png" class="" title="示例图">
<p>  下载之后放到<code>blog\source\my_images</code>文件夹中</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /my_images/favicon<span class="token punctuation">-</span>16x16.png
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /my_images/favicon<span class="token punctuation">-</span>32x32.png
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /my_images/apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png
  <span class="token key atrule">safari_pinned_tab</span><span class="token punctuation">:</span> /my_images/safari<span class="token punctuation">-</span>pinned<span class="token punctuation">-</span>tab.svg
  <span class="token key atrule">android_manifest</span><span class="token punctuation">:</span> /my_images/site.webmanifest
  <span class="token key atrule">ms_browserconfig</span><span class="token punctuation">:</span> /my_images/browserconfig.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="一键部署插件"><a href="#一键部署插件" class="headerlink" title="一键部署插件"></a>一键部署插件</h3><p>  插件：<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后修改<code>站点配置文件</code> 中的配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
    <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>constown/constown.github.io.git
    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="back2top"><a href="#back2top" class="headerlink" title="back2top"></a>back2top</h3><p>  Hexo 修改 <code>back2top</code> 标签： <a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu">hexo-cake-moon-menu</a></p>
<p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cake-moon-menu <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  然后在站点配置文件<code>_config.yml</code> 中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">moon_menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">back2top</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>chevron<span class="token punctuation">-</span>up
    <span class="token key atrule">func</span><span class="token punctuation">:</span> back2top
    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>
  <span class="token key atrule">back2bottom</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>chevron<span class="token punctuation">-</span>down
    <span class="token key atrule">func</span><span class="token punctuation">:</span> back2bottom
    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="减少出站链接"><a href="#减少出站链接" class="headerlink" title="减少出站链接"></a>减少出站链接</h3><p>  减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 <code>nofollow</code> 标签的插件。</p>
<p>  首先安装 <code>hexo-filter-nofollow</code> 插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-nofollow <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们在站点的配置文件<code>_config.yml</code> 中添加配置，将 <code>nofollow</code> 设置为 <code>true</code>：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 外部链接优化</span>
<span class="token key atrule">nofollow</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> site
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'exclude1.com'</span>
    <span class="token punctuation">-</span> <span class="token string">'exclude2.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  其中 <code>exclude</code>（例外的链接，比如友链）将不会被加上 <code>nofollow</code> 属性。 </p>
<h3 id="hexo-本地搜索"><a href="#hexo-本地搜索" class="headerlink" title="hexo 本地搜索"></a>hexo 本地搜索</h3><p>  NexT 主题已经实现这个功能，它用了 Hexo 的拓展包 hexo-generator-searchdb，预先生成了一个文本库 search.xml，然后传到了网站里面。在本地搜索的时候，NexT 直接用 javascript 调用了这个文件，从而实现了静态网站的本地搜索。</p>
<p>  安装插件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们修改站点配置<code>_config.yml</code> 文件，添加如下内容：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 本地搜索</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>path：索引文件的路径，相对于站点根目录</li>
<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>
<li>limit：限制搜索的条目数</li>
</ul>
<p>  然后修改<code>主题配置</code>文件<code>_config.yml</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Local Search</span>
<span class="token comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span>
local_search:
  enable: <span class="token boolean">true</span>
  <span class="token comment"># If auto, trigger search by changing input.</span>
  <span class="token comment"># If manual, trigger search by pressing enter key or search button.</span>
  trigger: auto
  <span class="token comment"># Show top n results per article, show all results by setting to -1</span>
  top_n_per_article: <span class="token number">1</span>
  <span class="token comment"># Unescape html strings to the readable one.</span>
  unescape: <span class="token boolean">false</span>
  <span class="token comment"># Preload the search data when the page loads.</span>
  preload: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Rss-订阅"><a href="#Rss-订阅" class="headerlink" title="Rss 订阅"></a>Rss 订阅</h3><p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在站点配置文件<code>_config.yml</code> 中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom
  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>
  <span class="token key atrule">hub</span><span class="token punctuation">:</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span>
  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>
  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date
  <span class="token key atrule">icon</span><span class="token punctuation">:</span> icon.png
  <span class="token key atrule">autodiscovery</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  template<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="增加阅读时间和字数统计"><a href="#增加阅读时间和字数统计" class="headerlink" title="增加阅读时间和字数统计"></a>增加阅读时间和字数统计</h3><p>  首先安装 <code>hexo-symbols-count-time</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-symbols-count-time <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  如果之前安装了<code>hexo-wordcount</code>就要卸载掉npm uninstall hexo-wordcount，因为它只适用于老版本，网页也有教程是这个，<br>  修改站点配置文件<code>_config.yml</code>，没有就添加:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span> 
  <span class="token key atrule">symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#文章内是否显示</span>
  <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">total_symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 网页底部是否显示</span>
  <span class="token key atrule">total_time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude_codeblock</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">awl</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">wpm</span><span class="token punctuation">:</span> <span class="token number">275</span>
  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> <span class="token string">'mins.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  其中awl（Average Word Length）的数值是设定多少字符统计为一个字(word)，中文博客需要设置为 2。wpm（Words Per Minute）是你的阅读速度，多少字（word）统计为阅读时长一分钟。以下是官方文档里的一些阅读速度参考数据：</p>
<ul>
<li>慢速：200</li>
<li>中速：275（默认）</li>
<li>快速：350</li>
</ul>
<p>  然后修改主题配置文件<code>next/_config.yml</code>，</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>
  <span class="token key atrule">separated_meta</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">item_text_post</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">item_text_total</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  最后需要<code>hexo clean</code>然后重新生成，否则可能会出现阅读时间NaN字样，参考官方</p>
<h3 id="永久链接插件"><a href="#永久链接插件" class="headerlink" title="永久链接插件"></a>永久链接插件</h3><p>  插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p>
<p>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们可以在<code>站点配置</code>文件中修改为：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.juanertu.com
<span class="token key atrule">root</span><span class="token punctuation">:</span> /
<span class="token key atrule">permalink</span><span class="token punctuation">:</span> archives/<span class="token punctuation">:</span>abbrlink.html
<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span>
<span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>
  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>
  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32 <span class="token comment"># 算法：crc16(default) and crc32</span>
  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex <span class="token comment"># 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="百度主动推送"><a href="#百度主动推送" class="headerlink" title="百度主动推送"></a>百度主动推送</h3><p>  插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  在<code>站点配置文件</code>中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度主动推送</span>
<span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>
  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">## 提交最新的1个链接</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> tding.top <span class="token comment">## 百度站长平台中注册的域名</span>
  <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token comment">## 准入秘钥</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment">## 文本文档的地址， 新链接会保存在此文本文档里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><ol>
<li>通用站点地图<br>  地址：<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a><br>  安装配置：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  然后我们需要在 Hexo <code>站点配置文件</code>中加入 sitemap 插件：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用站点地图</span>
<span class="token key atrule">sitemap</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>百度站点地图<br>  地址：<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">hexo-generator-baidu-sitemap</a><br>  安装配置：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  具体配置类似通用站点地图，当然也可以看官方提供的教程，下面是一个简单的配置，我们在 Hexo <code>站点配置文件</code>中添加：<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 百度站点地图</span>
<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="文章置顶插件"><a href="#文章置顶插件" class="headerlink" title="文章置顶插件"></a>文章置顶插件</h3><p>  地址：<a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-generator-index <span class="token parameter variable">--save</span> <span class="token comment">#卸载原来的插件</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  在需要置顶的文章的 <code>Front-matter</code> 中加上 <code>top: true</code> 或者 <code>top: 任意数字</code>，比如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 谢谢你来看我的博客
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">header</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> a8863134
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-02-01 12:10:10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>注意：top 中数字越大，文章越靠前。</code><br>  设置置顶图标:<br>  更新为将此代码放置到 <code>hexo/source/_data/post-meta.swig</code> 文件中:</p>
<pre class="line-numbers language-none"><code class="language-none">{# 添加置顶显示 #}
{%- if post.top &gt; 0 %}
    &lt;span class="post-meta-item"&gt;
        &lt;span class="post-meta-item-icon post-sticky-flag"&gt;
          &lt;i class="fa fa-thumbtack" style="color:Tomato"&gt;&lt;/i&gt;
        &lt;/span&gt;
        &lt;span class="post-meta-item-text" style="color:Tomato;font-weight:bold;"&gt;
          &lt;i class="article-topping"&gt;{{ __('post.sticky') }}&lt;/i&gt;
        &lt;/span&gt;
    &lt;/span&gt;
{%- endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>_config.next.yml</code> 设置:</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">custom_file_path:
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  #postMeta: source/_data/post-meta.swig
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  postMeta: source/_data/post-meta.swig</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="静态资源压缩插件"><a href="#静态资源压缩插件" class="headerlink" title="静态资源压缩插件"></a>静态资源压缩插件</h3><p>  地址:<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  然后我们需要在<code>站点配置</code>文件中添加以下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 博文压缩</span>
<span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># 压缩html</span>
<span class="token key atrule">neat_html</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
<span class="token comment"># 压缩css</span>
<span class="token key atrule">neat_css</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span>
<span class="token comment"># 压缩js</span>
<span class="token key atrule">neat_js</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">output</span><span class="token punctuation">:</span>
  <span class="token key atrule">compress</span><span class="token punctuation">:</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/jquery.fancybox.pack.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/index.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/fireworks.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="推荐文章插件"><a href="#推荐文章插件" class="headerlink" title="推荐文章插件"></a>推荐文章插件</h3><p>  地址:<a href="https://github.com/tea3/hexo-related-popular-posts">hexo-related-popular-posts</a><br>  安装插件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-related-popular-posts <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  我们只需要在<code>主题配置</code>文件中修改：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">related_posts</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> 相关文章推荐 <span class="token comment"># Custom header, leave empty to use the default one</span>
  <span class="token key atrule">display_in_home</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">params</span><span class="token punctuation">:</span>
    <span class="token key atrule">maxCount</span><span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token key atrule">PPMixingRate</span><span class="token punctuation">:</span> <span class="token number">0.25</span>
    <span class="token key atrule">isDate</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">isImage</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">isExcerpt</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="emoji-表情支持"><a href="#emoji-表情支持" class="headerlink" title="emoji 表情支持"></a>emoji 表情支持</h3><p>  地址:<a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a><br>  <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">图标</a><br>  安装插件: </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  站点配置文件 <code>.config.yml</code> 中增加：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">emoji</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji
  <span class="token key atrule">styles</span><span class="token punctuation">:</span>
  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  或者</p>
<p><code>hexo-filter-github-emojis</code></p>
<h3 id="加密插件"><a href="#加密插件" class="headerlink" title="加密插件"></a>加密插件</h3><p>  地址：<a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a><br>  我们需要在文章开头添加：</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">---</span>
title: 射频微波基础知识（二）
declare: true
toc: true
tags:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> - 射频电路
</span></span>categories:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> - RF
</span><span class="token prefix unchanged"> </span><span class="token line"> - 射频电路
</span></span>mathjax: true
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">password: 
</span><span class="token prefix inserted">+</span><span class="token line">abstract: 有东西被加密了，请输入密码查看
</span><span class="token prefix inserted">+</span><span class="token line">message: 请输入密码
</span></span><span class="token coord">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="侧栏头像动画"><a href="#侧栏头像动画" class="headerlink" title="侧栏头像动画"></a>侧栏头像动画</h3><p>  先从简单的开始吧！修改头像其实很简单，直接把头像放进 <code>next/source/images/</code> 下，然后再主题配置文件中，找到以下部分：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sidebar Avatar</span>
<span class="token key atrule">avatar</span><span class="token punctuation">:</span>
  <span class="token comment"># In theme directory (source/images): /images/avatar.gif</span>
  <span class="token comment"># In site directory (source/uploads): /uploads/avatar.gif</span>
  <span class="token comment"># You can also use other linking images.</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.jpg
  <span class="token comment"># If true, the avatar would be dispalyed in circle.</span>
  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span>
  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment"># If true, the avatar would be rotated with the cursor.</span>
  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  在 <code>url</code> 处指定头像文件即可，头像可以是网络图片，只需要把本地路径替换为网络图片的网址即可。另外，当打开了 <code>rotated</code> 后，鼠标移到头像处会逆时针旋转半圈，鼠标移开又转回来，不过这个效果看起来好像也比较普通，如果你想让鼠标一过去头像就控记不住记几鬼畜疯狂旋转，就像这样：</p>
<img data-src="/post/dfea82e5/avatar_rotate_hover.gif" class="" title="hover">
<p>  请找到这个文件并愤怒地打开它：<code>source/_data/styles.styl</code>，然后做如下部分修改：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">if hexo-config('avatar.rotated')</span> <span class="token punctuation">{</span>
  <span class="token selector">.site-author-image</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform 1.0s ease-out<span class="token punctuation">;</span>
    <span class="token comment">/*animation: rotate 5s linear infinite;*/</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*@keyframes rotate{from{transform: rotate(0deg)}
  to{transform: rotate(360deg)}
  }*/</span>

  <span class="token comment">/* 原本只是简单地逆时针旋转 180°
  .site-author-image:hover {
    transform: rotateZ(-180deg);
  }
  */</span>
  <span class="token selector">.site-author-image:hover</span> <span class="token punctuation">{</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> rotate 0.15s linear infinite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span><span class="token punctuation">{</span><span class="token selector">from</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token selector">to</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <code>.site-author-image:hover</code> 就是鼠标覆盖上去时的代码，代码的意思就是：动画是 rotate，时间是 0.15 秒（也即 0.15 秒转一圈），动画速度是线性，动画重复无限次，在下方定义了旋转的角度是从 0 ~ 360°，其中正数是顺时针旋转，负数是逆时针旋转。设置完了以后别忘了 Hexo 三连一下试试效果。如果你不想这么鬼畜，想走文艺路线，就换一下注释并且让它转的缓慢一点唱片式旋转，变成：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">if hexo-config('avatar.rotated')</span> <span class="token punctuation">{</span>
  <span class="token selector">.site-author-image</span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform 1.0s ease-out<span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> rotate 5s linear infinite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span><span class="token punctuation">{</span><span class="token selector">from</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token selector">to</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token selector">.site-author-image:hover</span> <span class="token punctuation">{</span>
    <span class="token comment">/*animation: rotate 0.15s linear infinite;*/</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*@keyframes rotate{from{transform: rotate(0deg)}
  to{transform: rotate(360deg)}
  }*/</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img data-src="/post/dfea82e5/avatar_rotate_normal.gif" class="" title="hover">

<h3 id="languages-yml"><a href="#languages-yml" class="headerlink" title="languages.yml"></a>languages.yml</h3><p>  我们原来是通过配置主题下的 <code>languages</code> 目录中的 <code>zh-CN.yml</code> 文件来对菜单等进行中文翻译的，现在我们可以通过在 <code>hexo/source/_data/</code> 下新建数据文件 <code>languages.yml</code>，配置如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">zh-CN</span><span class="token punctuation">:</span>
  <span class="token key atrule">menu</span><span class="token punctuation">:</span>
    <span class="token key atrule">home</span><span class="token punctuation">:</span> 首页
    <span class="token key atrule">archives</span><span class="token punctuation">:</span> 归档
    <span class="token key atrule">categories</span><span class="token punctuation">:</span> 分类
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> 标签
    <span class="token key atrule">about</span><span class="token punctuation">:</span> 关于
    <span class="token key atrule">search</span><span class="token punctuation">:</span> 搜索
    <span class="token key atrule">schedule</span><span class="token punctuation">:</span> 日程表
    <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> 站点地图
    <span class="token key atrule">commonweal</span><span class="token punctuation">:</span> 公益 404
    <span class="token key atrule">message</span><span class="token punctuation">:</span> 留言
    <span class="token key atrule">links</span><span class="token punctuation">:</span> 友情链接

  <span class="token key atrule">reward</span><span class="token punctuation">:</span>
    <span class="token key atrule">donate</span><span class="token punctuation">:</span> 打赏
    <span class="token key atrule">wechatpay</span><span class="token punctuation">:</span> 微信支付
    <span class="token key atrule">alipay</span><span class="token punctuation">:</span> 支付宝
    <span class="token key atrule">paypal</span><span class="token punctuation">:</span> 贝宝
    <span class="token key atrule">bitcoin</span><span class="token punctuation">:</span> 比特币<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<hr>

<blockquote>
<p>其他博客<br><a href="https://www.simon96.online/">遇见西门</a><br><a href="https://zhousiwei.gitee.io/">試毅-思伟</a><br><a href="https://blog.dlzhang.com/">班班碎碎念</a><br><a href="https://me.idealli.com/">小红鸡</a></p>
</blockquote>
<hr>

<blockquote>
<p>其他相关链接<br><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">[持续更新]最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a><br><a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a><br><a href="https://www.hojun.cn/2018/01/25/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E2%80%94%E5%A6%88%E5%A6%88%E5%86%8D%E4%B9%9F%E4%B8%8D%E7%94%A8%E6%8B%85%E5%BF%83%E4%BD%A0%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/">Hexo博客备份</a><br><a href="https://notes.doublemine.me/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html">Doublemine</a><br><a href="https://www.dazhuanlan.com/2019/10/25/5db2632c401b8/">大专栏</a></p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>hexo建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
